{"version":3,"sources":["webpack:///(webpack)/buildin/harmony-module.js","webpack:///./node_modules/cannon/build/cannon.js","webpack:///./node_modules/three/examples/jsm/controls/OrbitControls.js","webpack:///./node_modules/three/build/three.module.js","webpack:///./node_modules/gsap/esm/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/gsap/esm/TweenLite.js"],"names":["module","exports","originalModule","webpackPolyfill","Object","create","children","defineProperty","enumerable","get","l","i","require","e","t","n","r","s","o","u","a","Error","f","call","length","1","_dereq_","name","version","description","homepage","author","keywords","main","engines","node","repository","type","url","bugs","licenses","devDependencies","jshint","uglify-js","nodeunit","grunt","grunt-contrib-jshint","grunt-contrib-nodeunit","grunt-contrib-concat","grunt-contrib-uglify","grunt-browserify","grunt-contrib-yuidoc","browserify","dependencies","2","AABB","ArrayCollisionMatrix","Body","Box","Broadphase","Constraint","ContactEquation","Narrowphase","ConeTwistConstraint","ContactMaterial","ConvexPolyhedron","Cylinder","DistanceConstraint","Equation","EventTarget","FrictionEquation","GSSolver","GridBroadphase","Heightfield","HingeConstraint","LockConstraint","Mat3","Material","NaiveBroadphase","ObjectCollisionMatrix","Pool","Particle","Plane","PointToPointConstraint","Quaternion","Ray","RaycastVehicle","RaycastResult","RigidVehicle","RotationalEquation","RotationalMotorEquation","SAPBroadphase","SPHSystem","Shape","Solver","Sphere","SplitSolver","Spring","Trimesh","Vec3","Vec3Pool","World","../package.json","./collision/AABB","./collision/ArrayCollisionMatrix","./collision/Broadphase","./collision/GridBroadphase","./collision/NaiveBroadphase","./collision/ObjectCollisionMatrix","./collision/Ray","./collision/RaycastResult","./collision/SAPBroadphase","./constraints/ConeTwistConstraint","./constraints/Constraint","./constraints/DistanceConstraint","./constraints/HingeConstraint","./constraints/LockConstraint","./constraints/PointToPointConstraint","./equations/ContactEquation","./equations/Equation","./equations/FrictionEquation","./equations/RotationalEquation","./equations/RotationalMotorEquation","./material/ContactMaterial","./material/Material","./math/Mat3","./math/Quaternion","./math/Vec3","./objects/Body","./objects/RaycastVehicle","./objects/RigidVehicle","./objects/SPHSystem","./objects/Spring","./shapes/Box","./shapes/ConvexPolyhedron","./shapes/Cylinder","./shapes/Heightfield","./shapes/Particle","./shapes/Plane","./shapes/Shape","./shapes/Sphere","./shapes/Trimesh","./solver/GSSolver","./solver/Solver","./solver/SplitSolver","./utils/EventTarget","./utils/Pool","./utils/Vec3Pool","./world/Narrowphase","./world/World","3","options","this","lowerBound","copy","upperBound","tmp","prototype","setFromPoints","points","position","quaternion","skinSize","q","vmult","p","x","y","z","vadd","aabb","clone","extend","overlaps","l1","u1","l2","u2","contains","getCorners","b","c","d","g","h","set","transformIntoFrame_corners","toLocalFrame","frame","target","corners","corner","pointToLocal","toWorldFrame","pointToWorld","../math/Vec3","../utils/Utils","4","matrix","j","index","temp","value","reset","setNumObjects","5","world","useBoundingBoxes","dirty","collisionPairs","p1","p2","Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC","STATIC","KINEMATIC","needBroadphaseCollision","bodyA","bodyB","collisionFilterGroup","collisionFilterMask","sleepState","SLEEPING","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","vsub","boundingRadiusSum2","Math","pow","boundingRadius","norm2","push","aabbNeedsUpdate","computeAABB","Broadphase_makePairsUnique_temp","keys","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","makePairsUnique","N","id1","id","id2","key","pop","pairIndex","setWorld","bsc_dist","boundingSphereCheck","dist","shape","boundingSphereRadius","aabbQuery","result","../math/Quaternion","../objects/Body","../shapes/Plane","../shapes/Shape","6","aabbMin","aabbMax","nx","ny","nz","apply","nbins","bins","binLengths","constructor","GridBroadphase_collisionPairs_d","numObjects","bodies","max","min","xstep","ystep","zstep","xmax","ymax","zmax","xmin","ymin","zmin","xmult","ymult","zmult","binsizeX","binsizeY","binsizeZ","binRadius","sqrt","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","Nbins","ceil","addBoxToBins","x0","y0","z0","x1","y1","z1","bi","xoff0","yoff0","zoff0","xoff1","yoff1","zoff1","xoff","yoff","zoff","idx","si","radius","worldNormalNeedsUpdate","computeWorldNormal","planeNormal","worldNormal","xreset","yreset","zreset","xi","yi","zi","dot","binLength","bin","bj","./Broadphase","7","./AABB","8","9","Transform","from","to","_direction","precision","checkCollisionResponse","skipBackfaces","mode","ANY","hasHit","callback","CLOSEST","ALL","tmpAABB","tmpArray","intersectWorld","_updateDirection","getAABB","broadphase","intersectBodies","v1","v2","pointInTriangle","v0","v","dot00","dot01","dot02","dot11","dot12","intersectBody_xi","intersectBody_qi","intersectBody","body","collisionResponse","qi","shapes","mult","shapeOrientations","shapeOffsets","intersectShape","_shouldStop","normalize","quat","distance","direction","intersect","distanceTo","distanceFromIntersection","intersectMethod","intersectPoint","intersectBox","intersectConvex","convexPolyhedronRepresentation","intersectPlane","len","planeToFrom","planeToTo","n_dot_dir","abs","planePointToFrom","dir_scaled_with_t","hitPointWorld","scale","reportIntersection","intersectConvexOptions","faceList","intersectHeightfield","data","elementSize","worldPillarOffset","localRay","pointToLocalFrame","iMinX","iMinY","iMaxX","iMaxY","inside","getIndexOfPosition","minMax","getRectMinMax","getConvexTrianglePillar","pointToWorldFrame","pillarOffset","pillarConvex","HEIGHTFIELD","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","intersectSphere","delta","intersectionPoint","normal","lerp","d1","d2","intersectConvex_normal","intersectConvex_vector","vector","faces","vertices","normals","faceNormals","fromToDistance","Nfaces","fi","face","faceNormal","scalar","intersectTrimesh_normal","intersectTrimesh_localDirection","intersectTrimesh_localFrom","intersectTrimesh_localTo","intersectTrimesh_worldNormal","intersectTrimesh_worldIntersectPoint","intersectTrimesh_triangles","intersectTrimesh_treeTransform","intersectTrimesh","mesh","triangles","treeTransform","localDirection","localFrom","localTo","worldIntersectPoint","indices","vectorToLocalFrame","fromToDistanceSquared","distanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","vectorToWorldFrame","TRIMESH","hitFaceIndex","../collision/AABB","../collision/RaycastResult","../math/Transform","../shapes/Box","../shapes/ConvexPolyhedron","10","rayFromWorld","rayToWorld","hitNormalWorld","setZero","abort","11","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","indexOf","splice","removeEventListener","addEventListener","insertionSortX","insertionSortY","insertionSortZ","sortList","checkBounds","biPos","bjPos","ri","rj","boundA2","boundB1","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","invN","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","axis","../collision/Broadphase","12","ConeEquation","maxForce","pivotA","pivotB","axisA","axisB","collideConnected","angle","coneEquation","twistEquation","twistAngle","minForce","equations","update","cone","twist","tangents","maxAngle","../equations/ConeEquation","../equations/ContactEquation","../equations/RotationalEquation","./Constraint","./PointToPointConstraint","13","Utils","defaults","wakeUpBodies","idCounter","wakeUp","enable","eqs","enabled","disable","14","eq","distanceEquation","halfDist","ni","15","r1","rotationalEquation1","r2","rotationalEquation2","motor","motorEquation","enableMotor","disableMotor","setMotorSpeed","speed","targetVelocity","setMotorMaxForce","HingeConstraint_update_tmpVec1","HingeConstraint_update_tmpVec2","worldAxisA","worldAxisB","../equations/RotationalMotorEquation","16","halfWay","r3","rotationalEquation3","UNIT_X","UNIT_Y","UNIT_Z","17","equationX","equationY","equationZ","18","tmpVec1","tmpVec2","computeB","nj","nixnj","njxni","GA","jacobianElementA","GB","jacobianElementB","cross","rotational","cos","GW","computeGW","GiMf","computeGiMf","B","../math/Mat3","./Equation","19","restitution","ContactEquation_computeB_temp1","ContactEquation_computeB_temp2","ContactEquation_computeB_temp3","rixn","rjxn","vi","velocity","wi","angularVelocity","vj","force","torque","wj","penetrationVec","negate","spatial","ePlusOne","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","ContactEquation_getImpactVelocityAlongNormal_relVel","getImpactVelocityAlongNormal","xj","relVel","getVelocityAtWorldPoint","20","JacobianElement","eps","setSpookParams","stiffness","relaxation","timeStep","k","Gq","computeGq","zero","multiplyVectors","computeGWlambda","vlambda","wlambda","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","ti","fj","tj","invMassi","invMassSolve","invMassj","invInertiaWorldSolve","computeGiMGt","invIi","invIj","addToWlambda_temp","addToWlambda","deltalambda","computeC","../math/JacobianElement","21","slipForce","FrictionEquation_computeB_temp1","FrictionEquation_computeB_temp2","rixt","rjxt","22","PI","23","24","m1","m2","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","25","26","multiplyElement","element","./Vec3","27","elements","identity","setTrace","vec3","getTrace","smult","mmult","m","sum","solve","eqns","nr","np","multiplier","isNaN","Infinity","toString","row","column","undefined","source","reverse","nc","setRotationFromQuaternion","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","28","toArray","setFromAxisAngle","sin","toAxisAngle","targetAxis","acos","sfv_t1","sfv_t2","setFromVectors","isAntiparallelTo","t1","t2","norm","Quaternion_mult_va","Quaternion_mult_vb","Quaternion_mult_vaxvb","va","vb","vaxvb","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","setFromEuler","c1","c2","c3","s1","s2","s3","29","tmpQuat","worldPoint","localPoint","localVector","worldVector","./Quaternion","30","ZERO","vx","vy","vz","crossmat","unit","ninv","lengthSquared","px","py","pz","isZero","Vec3_tangents_n","Vec3_tangents_randVec","inorm","randVec","almostEquals","almostZero","antip_neg","./Mat3","31","preStep","postStep","previousPosition","initPosition","initVelocity","mass","invMass","material","linearDamping","DYNAMIC","allowSleep","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","_wakeUpAfterNarrowphase","initQuaternion","initAngularVelocity","interpolatedPosition","interpolatedQuaternion","inertia","invInertia","invInertiaWorld","invInertiaSolve","fixedRotation","angularDamping","addShape","updateMassProperties","AWAKE","SLEEPY","dispatchEvent","sleep","sleepyEvent","sleepEvent","sleepTick","time","speedSquared","speedLimitSquared","updateSolveMassProperties","tmpVec","_offset","_orientation","offset","orientation","updateBoundingRadius","updateBoundingSphereRadius","computeAABB_shapeAABB","bodyQuat","shapeAABB","calculateWorldAABB","uiw_m1","uiw_m2","updateInertiaWorld","I","Body_applyForce_r","Body_applyForce_rotForce","applyForce","rotForce","Body_applyLocalForce_worldForce","Body_applyLocalForce_worldPoint","applyLocalForce","localForce","worldForce","Body_applyImpulse_r","Body_applyImpulse_velo","Body_applyImpulse_rotVelo","applyImpulse","impulse","velo","rotVelo","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_worldPoint","applyLocalImpulse","localImpulse","worldImpulse","Body_updateMassProperties_halfExtents","halfExtents","fixed","calculateInertia","../material/Material","../utils/EventTarget","32","WheelInfo","chassisBody","wheelInfos","sliding","indexRightAxis","indexForwardAxis","indexUpAxis","tmpVec4","tmpVec5","tmpVec6","addWheel","info","setSteeringValue","wheelIndex","wheel","steering","applyEngineForce","engineForce","setBrake","brake","addToWorld","constraints","add","that","preStepCallback","updateVehicle","dt","getVehicleAxisWorld","numWheels","updateWheelTransform","currentVehicleSpeedKmHour","forwardWorld","castRay","updateSuspension","relpos","suspensionForce","maxSuspensionForce","raycastResult","updateFriction","hitNormalWorldScaledWithProj","fwd","vel","chassisConnectionPointWorld","isInContact","proj","proj2","deltaRotation","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","rotation","deltaTime","chassisMass","w_it","susp_length","suspensionRestLength","current_length","suspensionLength","length_diff","suspensionStiffness","clippedInvContactDotSuspension","susp_damping","projected_rel_vel","suspensionRelativeVelocity","dampingCompression","dampingRelaxation","removeFromWorld","remove","castRay_rayvector","castRay_target","rayvector","updateWheelTransformWorld","depth","raylen","directionWorld","oldState","rayTest","object","groundObject","hitDistance","minSuspensionLength","maxSuspensionTravel","maxSuspensionLength","denominator","chassis_velocity_at_contactPoint","projVel","inv","chassisConnectionPointLocal","directionLocal","axleLocal","axleWorld","up","right","steeringOrn","rotatingOrn","worldTransform","directions","getWheelTransformWorld","updateFriction_surfNormalWS_scaled_proj","updateFriction_axle","updateFriction_forwardWS","surfNormalWS_scaled_proj","forwardWS","axle","sideImpulse","forwardImpulse","axlei","wheelTrans","surfNormalWS","resolveSingleBilateral","rollingFriction","slipInfo","maxImpulse","calcRollingFriction","factor","skidInfo","maximp","frictionSlip","maximpSide","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","rollInfluence","calcRollingFriction_vel1","calcRollingFriction_vel2","calcRollingFriction_vel","body0","body1","frictionPosWorld","frictionDirectionWorld","j1","contactPosWorld","vel1","vel2","vrel","denom0","computeImpulseDenominator","denom1","jacDiagABInv","computeImpulseDenominator_r0","computeImpulseDenominator_c0","computeImpulseDenominator_vec","computeImpulseDenominator_m","pos","r0","c0","vec","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","pos1","body2","pos2","normalLenSqr","rel_vel","massTerm","../collision/Ray","../objects/WheelInfo","./Body","33","wheelBodies","coordinateSystem","chassisShape","wheelAxes","wheelForces","wheelBody","worldPosition","hingeConstraint","motorTargetVelocity","setWheelForce","applyWheelForce","bodyTorque","concat","addConstraint","_update","bind","removeConstraint","worldAxis","getWheelSpeed","../constraints/HingeConstraint","../shapes/Sphere","34","particles","density","smoothingRadius","speedOfSound","viscosity","pressures","densities","neighbors","particle","SPHSystem_getNeighbors_dist","getNeighbors","R2","SPHSystem_update_dist","SPHSystem_update_a_pressure","SPHSystem_update_a_visc","SPHSystem_update_gradW","SPHSystem_update_r_vec","SPHSystem_update_u","cs","numNeighbors","weight","a_pressure","a_visc","gradW","r_vec","Pij","nabla","neighbor","gradw","nablaw","rVec","resultVec","../shapes/Particle","35","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","applyForce_ri_x_f","applyForce_rj_x_f","applyForce_tmp","r_unit","ri_x_f","rj_x_f","rlen","36","suspensionMaxLength","Number","MAX_VALUE","isFrontWheel","updateWheel","chassis","project","37","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateLocalInertia","getSideNormals","sixTargetVectors","sides","ex","volume","worldCornerTempPos","forEachWorldCorner","worldCornersTemp","wc","./ConvexPolyhedron","./Shape","38","uniqueAxes","worldVertices","worldVerticesNeedsUpdate","computeNormals","worldFaceNormalsNeedsUpdate","worldFaceNormals","uniqueEdges","slice","computeEdges","computeEdges_tmpEdge","edges","edge","numVertices","found","getFaceNormal","vertex","cb","ab","computeNormal","vc","cah_WorldNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","worldVertsB1","polyB","e0","worldb","clipFaceAgainstHull","fsa_faceANormalWS3","fsa_Worldnormal1","fsa_deltaC","fsa_worldEdge0","fsa_worldEdge1","fsa_Cross","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","testSepAxis","numFacesA","numFacesB","e1","maxminA","maxminB","maxA","minA","maxB","minB","d0","cli_aabbmin","cli_aabbmax","computeLocalAABB","getPlaneConstantOfFace","face_i","cfah_faceANormalWS","cfah_edge0","cfah_WorldEdge0","cfah_worldPlaneAnormal1","cfah_planeNormalWS1","cfah_worldA1","cfah_localPlaneNormal","cfah_planeNormalWS","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","planeEqWS","clipFaceAgainstPlane","shift","point","inVertices","outVertices","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","newv","computeWorldVertices","verts","worldVerts","aabbmin","aabbmax","computeWorldFaceNormals","worldNormals","max2","tempWorldVertex","minx","miny","minz","maxx","maxy","maxz","getAveragePointLocal","transformAllPoints","ConvexPolyhedron_pointIsInside","ConvexPolyhedron_vToP","ConvexPolyhedron_vToPointInside","pointIsInside","pointInside","vToP","vToPointInside","project_localAxis","project_localOrigin","hull","localAxis","localOrigin","vs","val","39","radiusTop","radiusBottom","height","numSegments","axes","bottomface","topface","theta","thetaN","40","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","clearCachedConvexTrianglePillar","clamp","floor","getHeightAt","edgeClamp","minmax","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","41","PARTICLE","42","tempNormal","maxVal","43","CYLINDER","44","ax","45","Octree","Float32Array","Int16Array","updateEdges","updateNormals","updateAABB","updateTree","computeNormals_n","triangleAABB","i3","_getUnscaledVertex","insert","removeEmptyNodes","unscaledAABB","getTrianglesInAABB","isx","isy","isz","setScale","wasUniform","isUniform","indexA","indexB","split","parseInt","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector_va","getEdgeVector_vb","getEdgeVector","vectorStore","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","tube","radialSegments","tubularSegments","arc","../utils/Octree","46","iterations","tolerance","GSSolver_solve_lambda","GSSolver_solve_invCs","GSSolver_solve_Bs","invC","deltalambdaTot","GWlambda","lambdaj","iter","maxIter","tolSquared","Neq","Nbodies","invCs","Bs","lambda","./Solver","47","addEquation","removeEquation","removeAllEquations","48","subsolver","nodes","nodePool","createNode","SplitSolver_solve_nodes","SplitSolver_solve_eqs","SplitSolver_solve_dummyWorld","getUnvisitedNode","Nnodes","visited","queue","bfs","root","visitFunc","bds","child","Neqs","sortById","dummyWorld","sort","49","listener","_listeners","listeners","hasEventListener","event","listenerArray","50","OctreeNode","maxDepth","elementData","level","nodeData","subdivided","subdivide","halfDiagonal","Array","ray","51","objects","release","Nargs","arguments","constructObject","52","TupleDictionary","53","54","./Pool","55","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","enableFrictionReduction","createContactEquation","sj","rsi","rsj","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","averageNormal","averageContactPointA","averageContactPointB","createFrictionFromAverage","numContacts","f1","f2","invNumContacts","tmpQuat1","tmpQuat2","getContacts","oldcontacts","frictionPool","qj","bodyContactMaterial","getContactMaterial","shapeContactMaterial","defaultContactMaterial","resolver","boxBox","convexConvex","boxConvex","boxParticle","convexParticle","sphereSphere","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","planeTrimesh","planeShape","trimeshShape","planePos","trimeshPos","planeQuat","trimeshQuat","planeBody","trimeshBody","projected","sphereTrimesh_normal","sphereTrimesh_relpos","sphereTrimesh_v","sphereTrimesh_v2","sphereTrimesh_edgeVertexA","sphereTrimesh_edgeVertexB","sphereTrimesh_edgeVector","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_localSphereAABB","sphereTrimesh_triangles","sphereTrimesh","sphereShape","spherePos","sphereQuat","sphereBody","edgeVertexA","edgeVertexB","edgeVector","edgeVectorUnit","localSpherePos","localSphereAABB","sphereRadius","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","point_on_plane_to_sphere","plane_to_sphere_ortho","spherePlane","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","pointInPolygon","positiveResult","edge_x_normal","vertex_to_p","box_to_sphere","sphereBox_ns","sphereBox_ns1","sphereBox_ns2","sphereBox_sides","sphereBox_sphere_to_corner","sphereBox_side_ns","sphereBox_side_ns1","sphereBox_side_ns2","sphereBox","R","side_ns","side_ns1","side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","ns1","ns2","h1","h2","dot1","dot2","sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","convex_to_sphere","sphereConvex_edge","sphereConvex_edgeUnit","sphereConvex_sphereToCorner","sphereConvex_worldCorner","sphereConvex_worldNormal","sphereConvex_worldPoint","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","sphereConvex_sphereToWorldPoint","sphereConvex","worldCorner","nfaces","worldSpherePointClosestToPlane","penetration","worldPointToSphere","faceVerts","Nverts","worldVertex","penetrationVec2","penetrationSpherePoint","Nfaceverts","edgeUnit","v1_to_xi","xi_to_p","planeBox","planeConvex","planeConvex_v","planeConvex_normal","planeConvex_relpos","planeConvex_projected","convexShape","planePosition","convexPosition","convexQuat","convexBody","convexConvex_sepAxis","convexConvex_q","sepAxis","particlePlane_normal","particlePlane_relpos","particlePlane_projected","planeParticle","particleSphere_normal","sphereParticle","cqj","convexParticle_local","convexParticle_penetratedFaceNormal","convexParticle_vertexToParticle","convexParticle_worldPenetrationVec","penetratedFaceIndex","penetratedFaceNormal","worldPenetrationVec","minPenetration","local","boxHeightfield","convexHeightfield","convexHeightfield_tmp1","convexHeightfield_tmp2","convexHeightfield_faceList","hfShape","convexPos","hfPos","hfQuat","hfBody","localConvexPos","sphereHeightfield_tmp1","sphereHeightfield_tmp2","sphereHeightfield","numContactsBefore","../equations/FrictionEquation","../solver/Solver","../utils/Vec3Pool","56","contacts","frictionEquations","quatNormalizeSkip","quatNormalizeFast","stepnumber","default_dt","nextId","solver","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","integrate","subsystems","addBodyEvent","removeBodyEvent","tmpRay","collisionMatrixTick","addBody","raycastClosest","raycastAll","raycastAny","removeBody","addMaterial","addContactMaterial","cmat","performance","now","nowOffset","Date","timing","navigationStart","step_tmp1","step","timeSinceLastCalled","maxSubSteps","internalStep","internalSteps","t0","h_div_dt","interpvelo","World_step_postStepEvent","World_step_preStepEvent","World_step_collideEvent","contact","World_step_oldContacts","World_step_frictionEquationPool","World_step_p1","World_step_p2","World_step_step_w","World_step_step_wq","invI_tau_dt","profilingStart","gx","gy","gz","Nsubsystems","Nconstraints","NoldContacts","NoldFrictionEquations","ncontacts","speedSquaredB","speedLimitSquaredB","speedSquaredA","speedLimitSquaredA","ld","av","ad","wq","DYNAMIC_OR_KINEMATIC","quatNormalize","half_dt","tau","angularVelo","clearForces","../collision/ArrayCollisionMatrix","../collision/NaiveBroadphase","../material/ContactMaterial","../solver/GSSolver","../utils/TupleDictionary","./Narrowphase","__webpack_require__","__webpack_exports__","OrbitControls","_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__","domElement","quatInverse","lastPosition","lastQuaternion","document","minDistance","maxDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","saveState","scope","updateProjectionMatrix","changeEvent","state","STATE","NONE","setFromUnitVectors","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","addScaledVector","panOffset","setFromSpherical","lookAt","multiplyScalar","zoomChanged","distanceToSquared","EPS","dispose","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","window","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","left","clientWidth","top","bottom","dollyIn","dollyScale","dollyOut","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","preventDefault","focus","button","ctrlKey","metaKey","shiftKey","handleMouseDownDolly","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","needsUpdate","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","AmbientLight","AxesHelper","BoxGeometry","DirectionalLight","EventDispatcher","Fog","GridHelper","LoadingManager","MOUSE","Mesh","MeshLambertMaterial","MeshPhongMaterial","MeshStandardMaterial","Object3D","PerspectiveCamera","PlaneGeometry","Scene","SphereGeometry","Spherical","SpotLight","TOUCH","TextureLoader","Vector2","Vector3","WebGLRenderer","EPSILON","isInteger","isFinite","sign","Function","match","assign","TypeError","output","nextKey","hasOwnProperty","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","array","_lut","_Math","DEG2RAD","RAD2DEG","generateUUID","random","d3","toUpperCase","euclideanModulo","mapLinear","a1","a2","b1","b2","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","log","LN2","floorPowerOfTwo","_x","_y","_z","_w","defineProperties","width","isVector2","setScalar","setX","setY","setComponent","getComponent","addVectors","addScalar","subScalar","multiply","divide","divideScalar","applyMatrix3","clampScalar","minVal","clampLength","round","roundToZero","lengthSq","manhattanLength","manhattanDistanceTo","setLength","alpha","lerpVectors","equals","fromArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","w0","w1","dir","sqrSin","tDir","_onChangeCallback","isQuaternion","euler","isEuler","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","vFrom","vTo","angleTo","rotateTowards","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","_vector","_quaternion","isVector3","setZ","applyEuler","applyAxisAngle","applyMatrix4","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","ay","az","bx","by","bz","projectOnVector","projectOnPlane","reflect","dz","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","getInverse","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","cx","cy","rotate","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","onUpdate","Vector4","WebGLRenderTarget","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","isArray","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","bc","bd","makeRotationFromQuaternion","compose","eye","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","decompose","invSX","invSY","invSZ","makePerspective","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","setFromQuaternion","reorder","newOrder","toVector3","optionalResult","channel","enableAll","toggle","disableAll","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","parent","DefaultUp","configurable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","updateWorldMatrix","isCamera","isLight","attach","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateParents","updateChildren","geometries","serialize","library","JSON","stringify","isMesh","drawMode","isLine","isPoints","geometry","parameters","uuids","extractFromCache","cache","values","recursive","parse","isScene","_points","_vector$2","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Box3","satForAxes","extents","p0","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","expandByVector","expandByScalar","isGeometry","isBufferGeometry","attributes","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","getBoundingSphere","union","_box","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","origin","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","tca","radius2","thc","distanceToPlane","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","targetLengthSq","getBarycoord","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","setFromCoplanarPoints","d4","d5","d6","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","charAt","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","materialId","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","dynamic","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float64BufferAttribute","Float64Array","DirectGeometry","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingBox","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","group","start","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_box$1","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","drawRange","getIndex","setIndex","addAttribute","isInterleavedBufferAttribute","setAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","tangent","computeBoundingBox","computeBoundingSphere","positions","lineDistances","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","setDrawMode","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","dstNormalsFace","dstNormalsVertex","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","kl","mergeMesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","diff","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","hash","srcVertexNormal","destVertexNormal","[object Object]","widthSegments","heightSegments","depthSegments","super","BoxBufferGeometry","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","aspect","view","filmGauge","filmOffset","isShaderMaterial","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_vector1","_vector2","_normalMatrix","isPlane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","deleteBuffer","buffer","delete","bufferType","usage","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","lines","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","code","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isWebGLMultiviewRenderTarget","numViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","diagnostics","prefix","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isInstancedMesh","vertexTextures","gammaOutput","gammaInput","envMapMode","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","0","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","useMorphing","useSkinning","depthMaterial","distanceMaterial","VSMPass","mapPass","renderBufferDirect","getDepthMaterial","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","maxCubemapSize","convert","glInternalFormat","setTextureParameters","mipmap","getCompressedTextureFormats","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","textureType","extension","texParameteri","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","maxSamples","warnedTexture2D","warnedTextureCube","textureUnit","maxTextures","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","poseTarget","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","setPoseTarget","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","poseObject","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","inputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","then","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","getPose","targetRaySpace","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","error","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","compressedTextureFormats","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","blendEquationSeparate","blendFuncSeparate","blendFunc","setFlipSided","frontFace","setCullFace","cullFace","setPolygonOffset","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","formats","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","calls","autoReset","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","instanceMatrix","influencesList","objectInfluences","influences","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","xr","multiview","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","boneTexture","boneMatrices","boneTextureSize","isFog","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","uvScaleMap","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","InstancedMesh","linecap","linejoin","bone","isBone","getBoneByName","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","ol","edge1","edge2","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","closed","taper","bufferGeometry","TubeBufferGeometry","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","generateIndices","generateBufferData","TorusKnotGeometry","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","TorusGeometry","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","intersectsPolygon","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","track","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","fps","clip","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","viewCamera","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","FontLoader","setOptions","fetch","blob","createImageBitmap","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","Clock","autoStart","oldTime","elapsedTime","running","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","findNode","nodeName","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","ascSort","intersectObject","firstValidIndex","nCachedObjects_","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","PointCloud","setFromCamera","coords","intersectObjects","other","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$2","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","extractUrlBase","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","setArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","revision","global","_gsScope","gs","moduleName","_exports","_doc","_globals","GreenSockGlobals","TweenLite","_ticker","_tickerActive","_namespace","_slice","_emptyFunc","_isArray","obj","_defLookup","Definition","sc","gsClass","_classes","check","cur","cl","missing","_gsDefine","_class","globals","_baseParams","Ease","extraParams","_func","_type","_power","_params","_easeMap","_easeReg","register","ease","names","na","ta","easing","getRatio","_calcEnd","pw","linear","Linear","easeIn","swing","Quad","easeInOut","_eventTarget","useParam","priority","wake","pr","_reqAnimFrame","_cancelAnimFrame","cancelAnimationFrame","_getTime","getTime","_lastUpdate","useRAF","_fps","_req","_gap","_nextTime","_self","_useRAF","_lagThreshold","_adjustedLag","_tick","manual","overlap","dispatch","elapsed","tick","lagSmoothing","adjustedLag","clearTimeout","seamless","visibilityState","Ticker","events","Animation","vars","_duration","_totalDuration","_delay","delay","_timeScale","_active","immediateRender","_reversed","reversed","_rootTimeline","tl","useFrames","_rootFramesTimeline","_time","ticker","_dirty","_gc","_initted","_paused","_totalTime","_rawPrevTime","_next","_last","_onUpdate","_timeline","timeline","_checkTimeout","unref","suppressEvents","atTime","resume","totalTime","restart","includeDelay","totalDuration","invalidate","_enabled","isActive","rawTime","ignoreTimeline","_remove","_kill","kill","_uncache","includeSelf","tween","_swapSelfInParams","_callback","callbackScope","eventCallback","smoothChildTiming","uncapped","_pauseTime","_lazyTweens","_lazyRender","progress","totalProgress","ratio","_sortChildren","includeRepeats","pauseTime","raw","SimpleTimeline","autoRemoveChildren","_first","_recent","align","stagger","prevTween","st","_prev","skipDisable","selector","targ","targets","isSelector","jquery","nodeType","overwrite","_overwrite","_overwriteLookup","defaultOverwrite","_targets","_propLookup","_siblings","_register","_applyOverwrite","_isSelector","_firstPT","_overwrittenProps","_startAt","_notifyPluginsOfEnabled","_lazy","defaultEase","_ease","autoSleep","$","jQuery","querySelectorAll","getElementById","_lazyLookup","_numbersExp","_relExp","_setRatio","_tween","fp","_blobDif","startNums","endNums","num","nonNumbers","currentNum","charIndex","_applyPT","setRatio","_addPropTween","prop","overwriteProp","mod","funcParam","stringFilter","getterName","isRelative","pg","defaultStringFilter","_internals","lazyTweens","blobDif","_plugins","_tweenLookup","tweenLookup","_tweenLookupNum","_reservedProps","reservedProps","onComplete","onCompleteParams","onCompleteScope","runBackwards","onUpdateParams","onUpdateScope","onStartParams","onStartScope","onReverseComplete","onReverseCompleteParams","onReverseCompleteScope","onRepeat","onRepeatParams","onRepeatScope","easeParams","yoyo","repeatDelay","autoCSS","lazy","onOverwrite","yoyoEase","none","all","auto","concurrent","allOnStart","preexisting","true","false","_nextGCFrame","lazyRender","_updateRoot","tweens","scrub","_gsTweenID","_onOverwrite","overwrittenTween","overwritingTween","killedProps","props","siblings","changed","curTween","globalStart","oCount","zeroDur","_checkOverlap","reference","ts","_init","initPlugins","startVars","op","dur","immediate","config","_easeType","_easePower","_initProps","_onPluginEvent","propLookup","overwrittenProps","plugin","css","_autoCSS","_onInitTween","_priority","_overwriteProps","_onInitAllProps","_onDisable","_onEnable","isComplete","rawPrevTime","prevRawPrevTime","killProps","record","killed","simultaneousOverwrite","_tempKill","fromTo","fromVars","toVars","delayedCall","getTweensOf","onlyActive","killTweensOf","killDelayedCallsTo","TweenPlugin","_propName","_super","API","_addTween","lookup","_mod","_roundProps","pt2","first","activate","plugins","propName","overwriteProps","initAll","Plugin","_gsQueue","console","com","greensock","Power0","Power1","Power2","Power3","Power4","core"],"mappings":"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","file":"assets/js/vendor.bfc776299ca52c664f1c.js","sourcesContent":["module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/*\n * Copyright (c) 2015 cannon.js Authors\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&false)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.CANNON=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"cannon\",\n  \"version\": \"0.6.2\",\n  \"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n  \"homepage\": \"https://github.com/schteppe/cannon.js\",\n  \"author\": \"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\",\n  \"keywords\": [\n    \"cannon.js\",\n    \"cannon\",\n    \"physics\",\n    \"engine\",\n    \"3d\"\n  ],\n  \"main\": \"./build/cannon.js\",\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/schteppe/cannon.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/schteppe/cannon.js/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\"\n    }\n  ],\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"uglify-js\": \"latest\",\n    \"nodeunit\": \"^0.9.0\",\n    \"grunt\": \"~0.4.0\",\n    \"grunt-contrib-jshint\": \"~0.1.1\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-uglify\": \"^0.5.1\",\n    \"grunt-browserify\": \"^2.1.4\",\n    \"grunt-contrib-yuidoc\": \"^0.5.2\",\n    \"browserify\": \"*\"\n  },\n  \"dependencies\": {}\n}\n\n},{}],2:[function(_dereq_,module,exports){\n// Export classes\nmodule.exports = {\n    version :                       _dereq_('../package.json').version,\n\n    AABB :                          _dereq_('./collision/AABB'),\n    ArrayCollisionMatrix :          _dereq_('./collision/ArrayCollisionMatrix'),\n    Body :                          _dereq_('./objects/Body'),\n    Box :                           _dereq_('./shapes/Box'),\n    Broadphase :                    _dereq_('./collision/Broadphase'),\n    Constraint :                    _dereq_('./constraints/Constraint'),\n    ContactEquation :               _dereq_('./equations/ContactEquation'),\n    Narrowphase :                   _dereq_('./world/Narrowphase'),\n    ConeTwistConstraint :           _dereq_('./constraints/ConeTwistConstraint'),\n    ContactMaterial :               _dereq_('./material/ContactMaterial'),\n    ConvexPolyhedron :              _dereq_('./shapes/ConvexPolyhedron'),\n    Cylinder :                      _dereq_('./shapes/Cylinder'),\n    DistanceConstraint :            _dereq_('./constraints/DistanceConstraint'),\n    Equation :                      _dereq_('./equations/Equation'),\n    EventTarget :                   _dereq_('./utils/EventTarget'),\n    FrictionEquation :              _dereq_('./equations/FrictionEquation'),\n    GSSolver :                      _dereq_('./solver/GSSolver'),\n    GridBroadphase :                _dereq_('./collision/GridBroadphase'),\n    Heightfield :                   _dereq_('./shapes/Heightfield'),\n    HingeConstraint :               _dereq_('./constraints/HingeConstraint'),\n    LockConstraint :                _dereq_('./constraints/LockConstraint'),\n    Mat3 :                          _dereq_('./math/Mat3'),\n    Material :                      _dereq_('./material/Material'),\n    NaiveBroadphase :               _dereq_('./collision/NaiveBroadphase'),\n    ObjectCollisionMatrix :         _dereq_('./collision/ObjectCollisionMatrix'),\n    Pool :                          _dereq_('./utils/Pool'),\n    Particle :                      _dereq_('./shapes/Particle'),\n    Plane :                         _dereq_('./shapes/Plane'),\n    PointToPointConstraint :        _dereq_('./constraints/PointToPointConstraint'),\n    Quaternion :                    _dereq_('./math/Quaternion'),\n    Ray :                           _dereq_('./collision/Ray'),\n    RaycastVehicle :                _dereq_('./objects/RaycastVehicle'),\n    RaycastResult :                 _dereq_('./collision/RaycastResult'),\n    RigidVehicle :                  _dereq_('./objects/RigidVehicle'),\n    RotationalEquation :            _dereq_('./equations/RotationalEquation'),\n    RotationalMotorEquation :       _dereq_('./equations/RotationalMotorEquation'),\n    SAPBroadphase :                 _dereq_('./collision/SAPBroadphase'),\n    SPHSystem :                     _dereq_('./objects/SPHSystem'),\n    Shape :                         _dereq_('./shapes/Shape'),\n    Solver :                        _dereq_('./solver/Solver'),\n    Sphere :                        _dereq_('./shapes/Sphere'),\n    SplitSolver :                   _dereq_('./solver/SplitSolver'),\n    Spring :                        _dereq_('./objects/Spring'),\n    Trimesh :                       _dereq_('./shapes/Trimesh'),\n    Vec3 :                          _dereq_('./math/Vec3'),\n    Vec3Pool :                      _dereq_('./utils/Vec3Pool'),\n    World :                         _dereq_('./world/World'),\n};\n\n},{\"../package.json\":1,\"./collision/AABB\":3,\"./collision/ArrayCollisionMatrix\":4,\"./collision/Broadphase\":5,\"./collision/GridBroadphase\":6,\"./collision/NaiveBroadphase\":7,\"./collision/ObjectCollisionMatrix\":8,\"./collision/Ray\":9,\"./collision/RaycastResult\":10,\"./collision/SAPBroadphase\":11,\"./constraints/ConeTwistConstraint\":12,\"./constraints/Constraint\":13,\"./constraints/DistanceConstraint\":14,\"./constraints/HingeConstraint\":15,\"./constraints/LockConstraint\":16,\"./constraints/PointToPointConstraint\":17,\"./equations/ContactEquation\":19,\"./equations/Equation\":20,\"./equations/FrictionEquation\":21,\"./equations/RotationalEquation\":22,\"./equations/RotationalMotorEquation\":23,\"./material/ContactMaterial\":24,\"./material/Material\":25,\"./math/Mat3\":27,\"./math/Quaternion\":28,\"./math/Vec3\":30,\"./objects/Body\":31,\"./objects/RaycastVehicle\":32,\"./objects/RigidVehicle\":33,\"./objects/SPHSystem\":34,\"./objects/Spring\":35,\"./shapes/Box\":37,\"./shapes/ConvexPolyhedron\":38,\"./shapes/Cylinder\":39,\"./shapes/Heightfield\":40,\"./shapes/Particle\":41,\"./shapes/Plane\":42,\"./shapes/Shape\":43,\"./shapes/Sphere\":44,\"./shapes/Trimesh\":45,\"./solver/GSSolver\":46,\"./solver/Solver\":47,\"./solver/SplitSolver\":48,\"./utils/EventTarget\":49,\"./utils/Pool\":51,\"./utils/Vec3Pool\":54,\"./world/Narrowphase\":55,\"./world/World\":56}],3:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    // Extend lower bound\n    var l = aabb.lowerBound.x;\n    if(this.lowerBound.x > l){\n        this.lowerBound.x = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.x;\n    if(this.upperBound.x < u){\n        this.upperBound.x = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.y;\n    if(this.lowerBound.y > l){\n        this.lowerBound.y = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.y;\n    if(this.upperBound.y < u){\n        this.upperBound.y = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.z;\n    if(this.lowerBound.z > l){\n        this.lowerBound.z = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.z;\n    if(this.upperBound.z < u){\n        this.upperBound.z = u;\n    }\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n};\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53}],4:[function(_dereq_,module,exports){\nmodule.exports = ArrayCollisionMatrix;\n\n/**\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n * @class ArrayCollisionMatrix\n * @constructor\n */\nfunction ArrayCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Array}\n     */\n\tthis.matrix = [];\n}\n\n/**\n * Get an element\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nArrayCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n};\n\n/**\n * Set an element\n * @method set\n * @param {Number} i\n * @param {Number} j\n * @param {Number} value\n */\nArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n};\n\n/**\n * Sets all elements to zero\n * @method reset\n */\nArrayCollisionMatrix.prototype.reset = function() {\n\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\tthis.matrix[i]=0;\n\t}\n};\n\n/**\n * Sets the max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\tthis.matrix.length = n*(n-1)>>1;\n};\n\n},{}],5:[function(_dereq_,module,exports){\nvar Body = _dereq_('../objects/Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Shape = _dereq_('../shapes/Shape');\nvar Plane = _dereq_('../shapes/Plane');\n\nmodule.exports = Broadphase;\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nfunction Broadphase(){\n    /**\n    * The world to search for collisions in.\n    * @property world\n    * @type {World}\n    */\n    this.world = null;\n\n    /**\n     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n     * @property useBoundingBoxes\n     * @type {Boolean}\n     */\n    this.useBoundingBoxes = false;\n\n    /**\n     * Set to true if the objects in the world moved.\n     * @property {Boolean} dirty\n     */\n    this.dirty = true;\n}\n\n/**\n * Get the collision pairs from the world\n * @method collisionPairs\n * @param {World} world The world to search in\n * @param {Array} p1 Empty array to be filled with body objects\n * @param {Array} p2 Empty array to be filled with body objects\n */\nBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n};\n\n/**\n * Check if a body pair needs to be intersection tested at all.\n * @method needBroadphaseCollision\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {bool}\n */\nvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\nBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\n    // Check collision filter masks\n    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n        return false;\n    }\n\n    // Check types\n    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static, kinematic or sleeping. Skip.\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if the bounding volumes of two bodies intersect.\n * @method intersectionTest\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {array} pairs1\n * @param {array} pairs2\n  */\nBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n    if(this.useBoundingBoxes){\n        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n    } else {\n        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n    }\n};\n\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\nvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n    Broadphase_collisionPairs_normal =  new Vec3(),\n    Broadphase_collisionPairs_quat =  new Quaternion(),\n    Broadphase_collisionPairs_relpos  =  new Vec3();\nBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    var r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position,r);\n    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n    var norm2 = r.norm2();\n    if(norm2 < boundingRadiusSum2){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Check if the bounding boxes of two bodies are intersecting.\n * @method doBoundingBoxBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    if(bodyA.aabbNeedsUpdate){\n        bodyA.computeAABB();\n    }\n    if(bodyB.aabbNeedsUpdate){\n        bodyB.computeAABB();\n    }\n\n    // Check AABB / AABB\n    if(bodyA.aabb.overlaps(bodyB.aabb)){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar Broadphase_makePairsUnique_temp = { keys:[] },\n    Broadphase_makePairsUnique_p1 = [],\n    Broadphase_makePairsUnique_p2 = [];\nBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n    var t = Broadphase_makePairsUnique_temp,\n        p1 = Broadphase_makePairsUnique_p1,\n        p2 = Broadphase_makePairsUnique_p2,\n        N = pairs1.length;\n\n    for(var i=0; i!==N; i++){\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for(var i=0; i!==N; i++){\n        var id1 = p1[i].id,\n            id2 = p2[i].id;\n        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n        t[key] = i;\n        t.keys.push(key);\n    }\n\n    for(var i=0; i!==t.keys.length; i++){\n        var key = t.keys.pop(),\n            pairIndex = t[key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[key];\n    }\n};\n\n/**\n * To be implemented by subcasses\n * @method setWorld\n * @param {World} world\n */\nBroadphase.prototype.setWorld = function(world){\n};\n\n/**\n * Check if the bounding spheres of two bodies overlap.\n * @method boundingSphereCheck\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {boolean}\n */\nvar bsc_dist = new Vec3();\nBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n    var dist = bsc_dist;\n    bodyA.position.vsub(bodyB.position,dist);\n    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n};\n\n/**\n * Returns all the bodies within the AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param  {array} result An array to store resulting bodies in.\n * @return {array}\n */\nBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n};\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Plane\":42,\"../shapes/Shape\":43}],6:[function(_dereq_,module,exports){\nmodule.exports = GridBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Shape = _dereq_('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n\n},{\"../math/Vec3\":30,\"../shapes/Shape\":43,\"./Broadphase\":5}],7:[function(_dereq_,module,exports){\nmodule.exports = NaiveBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar AABB = _dereq_('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"./AABB\":3,\"./Broadphase\":5}],8:[function(_dereq_,module,exports){\nmodule.exports = ObjectCollisionMatrix;\n\n/**\n * Records what objects are colliding with each other\n * @class ObjectCollisionMatrix\n * @constructor\n */\nfunction ObjectCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Object}\n     */\n\tthis.matrix = {};\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nObjectCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn i+'-'+j in this.matrix;\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n\t}\n\tif (value) {\n\t\tthis.matrix[i+'-'+j] = true;\n\t}\n\telse {\n\t\tdelete this.matrix[i+'-'+j];\n\t}\n};\n\n/**\n * Empty the matrix\n * @method reset\n */\nObjectCollisionMatrix.prototype.reset = function() {\n\tthis.matrix = {};\n};\n\n/**\n * Set max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n};\n\n},{}],9:[function(_dereq_,module,exports){\nmodule.exports = Ray;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Box = _dereq_('../shapes/Box');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Shape = _dereq_('../shapes/Shape');\nvar AABB = _dereq_('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n    var data = shape.data,\n        w = shape.elementSize,\n        worldPillarOffset = new Vec3();\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = new Ray(this.from, this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\n    // Get the index of the data points to test against\n    var index = [];\n    var iMinX = null;\n    var iMinY = null;\n    var iMaxX = null;\n    var iMaxY = null;\n\n    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n    if(inside){\n        iMinX = index[0];\n        iMinY = index[1];\n        iMaxX = index[0];\n        iMaxY = index[1];\n    }\n    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n    if(inside){\n        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n    }\n\n    if(iMinX === null){\n        return;\n    }\n\n    var minMax = [];\n    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // // Bail out if the ray can't touch the bounding box\n    // // TODO\n    // var aabb = new AABB();\n    // this.getAABB(aabb);\n    // if(aabb.intersects()){\n    //     return;\n    // }\n\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    //body.vectorToLocalFrame(direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    //body.pointToLocalFrame(from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    //body.pointToLocalFrame(to, localTo);\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // Get plane normal\n        // quat.vmult(normal, normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        //body.vectorToWorldFrame(normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n\n},{\"../collision/AABB\":3,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43}],10:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};\n},{\"../math/Vec3\":30}],11:[function(_dereq_,module,exports){\nvar Shape = _dereq_('../shapes/Shape');\nvar Broadphase = _dereq_('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"../collision/Broadphase\":5,\"../shapes/Shape\":43}],12:[function(_dereq_,module,exports){\nmodule.exports = ConeTwistConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar ConeEquation = _dereq_('../equations/ConeEquation');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n\n},{\"../equations/ConeEquation\":18,\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],13:[function(_dereq_,module,exports){\nmodule.exports = Constraint;\n\nvar Utils = _dereq_('../utils/Utils');\n\n/**\n * Constraint base class\n * @class Constraint\n * @author schteppe\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {boolean} [options.collideConnected=true]\n * @param {boolean} [options.wakeUpBodies=true]\n */\nfunction Constraint(bodyA, bodyB, options){\n    options = Utils.defaults(options,{\n        collideConnected : true,\n        wakeUpBodies : true,\n    });\n\n    /**\n     * Equations to be solved in this constraint\n     * @property equations\n     * @type {Array}\n     */\n    this.equations = [];\n\n    /**\n     * @property {Body} bodyA\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * @property {Body} bodyB\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * @property {Number} id\n     */\n    this.id = Constraint.idCounter++;\n\n    /**\n     * Set to true if you want the bodies to collide when they are connected.\n     * @property collideConnected\n     * @type {boolean}\n     */\n    this.collideConnected = options.collideConnected;\n\n    if(options.wakeUpBodies){\n        if(bodyA){\n            bodyA.wakeUp();\n        }\n        if(bodyB){\n            bodyB.wakeUp();\n        }\n    }\n}\n\n/**\n * Update all the equations with data.\n * @method update\n */\nConstraint.prototype.update = function(){\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n};\n\n/**\n * Enables all equations in the constraint.\n * @method enable\n */\nConstraint.prototype.enable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = true;\n    }\n};\n\n/**\n * Disables all equations in the constraint.\n * @method disable\n */\nConstraint.prototype.disable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = false;\n    }\n};\n\nConstraint.idCounter = 0;\n\n},{\"../utils/Utils\":53}],14:[function(_dereq_,module,exports){\nmodule.exports = DistanceConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n * @class DistanceConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n * @param {Number} [maxForce=1e6]\n * @extends Constraint\n */\nfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    if(typeof(distance)===\"undefined\") {\n        distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    if(typeof(maxForce)===\"undefined\") {\n        maxForce = 1e6;\n    }\n\n    /**\n     * @property {number} distance\n     */\n    this.distance = distance;\n\n    /**\n     * @property {ContactEquation} distanceEquation\n     */\n    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n\n    // Make it bidirectional\n    eq.minForce = -maxForce;\n    eq.maxForce =  maxForce;\n}\nDistanceConstraint.prototype = new Constraint();\n\nDistanceConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var eq = this.distanceEquation;\n    var halfDist = this.distance * 0.5;\n    var normal = eq.ni;\n\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.mult(halfDist, eq.ri);\n    normal.mult(-halfDist, eq.rj);\n};\n},{\"../equations/ContactEquation\":19,\"./Constraint\":13}],15:[function(_dereq_,module,exports){\nmodule.exports = HingeConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n * @class HingeConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction HingeConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * Rotation axis, defined locally in bodyA.\n     * @property {Vec3} axisA\n     */\n    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n    axisA.normalize();\n\n    /**\n     * Rotation axis, defined locally in bodyB.\n     * @property {Vec3} axisB\n     */\n    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n    axisB.normalize();\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalMotorEquation} motorEquation\n     */\n    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n    motor.enabled = false; // Not enabled by default\n\n    // Equations to be fed to the solver\n    this.equations.push(\n        r1, // rotational1\n        r2, // rotational2\n        motor\n    );\n}\nHingeConstraint.prototype = new PointToPointConstraint();\nHingeConstraint.constructor = HingeConstraint;\n\n/**\n * @method enableMotor\n */\nHingeConstraint.prototype.enableMotor = function(){\n    this.motorEquation.enabled = true;\n};\n\n/**\n * @method disableMotor\n */\nHingeConstraint.prototype.disableMotor = function(){\n    this.motorEquation.enabled = false;\n};\n\n/**\n * @method setMotorSpeed\n * @param {number} speed\n */\nHingeConstraint.prototype.setMotorSpeed = function(speed){\n    this.motorEquation.targetVelocity = speed;\n};\n\n/**\n * @method setMotorMaxForce\n * @param {number} maxForce\n */\nHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n};\n\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\nHingeConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        worldAxisA = HingeConstraint_update_tmpVec1,\n        worldAxisB = HingeConstraint_update_tmpVec2;\n\n    var axisA = this.axisA;\n    var axisB = this.axisB;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Get world axes\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if(this.motorEquation.enabled){\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],16:[function(_dereq_,module,exports){\nmodule.exports = LockConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n * @class LockConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction LockConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation3\n     */\n    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\n    this.equations.push(r1, r2, r3);\n}\nLockConstraint.prototype = new PointToPointConstraint();\nLockConstraint.constructor = LockConstraint;\n\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\nLockConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        r3 = this.rotationalEquation3,\n        worldAxisA = LockConstraint_update_tmpVec1,\n        worldAxisB = LockConstraint_update_tmpVec2;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],17:[function(_dereq_,module,exports){\nmodule.exports = PointToPointConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};\n},{\"../equations/ContactEquation\":19,\"../math/Vec3\":30,\"./Constraint\":13}],18:[function(_dereq_,module,exports){\nmodule.exports = ConeEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n * @class ConeEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA] Local axis in A\n * @param {Vec3} [options.axisB] Local axis in B\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\n * @param {number} [options.maxForce=1e6]\n * @extends Equation\n */\nfunction ConeEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    /**\n     * The cone angle to keep\n     * @property {number} angle\n     */\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n}\n\nConeEquation.prototype = new Equation();\nConeEquation.prototype.constructor = ConeEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nConeEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.angle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],19:[function(_dereq_,module,exports){\nmodule.exports = ContactEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Contact/non-penetration constraint equation\n * @class ContactEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @extends Equation\n */\nfunction ContactEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\n    /**\n     * @property restitution\n     * @type {Number}\n     */\n    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\n    /**\n     * World-oriented vector that goes from the center of bi to the contact point.\n     * @property {Vec3} ri\n     */\n    this.ri = new Vec3();\n\n    /**\n     * World-oriented vector that starts in body j position and goes to the contact point.\n     * @property {Vec3} rj\n     */\n    this.rj = new Vec3();\n\n    /**\n     * Contact normal, pointing out of body i.\n     * @property {Vec3} ni\n     */\n    this.ni = new Vec3();\n}\n\nContactEquation.prototype = new Equation();\nContactEquation.prototype.constructor = ContactEquation;\n\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nContactEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixn = ContactEquation_computeB_temp1,\n        rjxn = ContactEquation_computeB_temp2,\n\n        vi = bi.velocity,\n        wi = bi.angularVelocity,\n        fi = bi.force,\n        taui = bi.torque,\n\n        vj = bj.velocity,\n        wj = bj.angularVelocity,\n        fj = bj.force,\n        tauj = bj.torque,\n\n        penetrationVec = ContactEquation_computeB_temp3,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n\n        n = this.ni;\n\n    // Caluclate cross products\n    ri.cross(n,rixn);\n    rj.cross(n,rjxn);\n\n    // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n\n    // Calculate the penetration vector\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj,penetrationVec);\n    penetrationVec.vsub(bi.position,penetrationVec);\n    penetrationVec.vsub(ri,penetrationVec);\n\n    var g = n.dot(penetrationVec);\n\n    // Compute iteration\n    var ePlusOne = this.restitution + 1;\n    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    var GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h*GiMf;\n\n    return B;\n};\n\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Get the current relative velocity in the contact point.\n * @method getImpactVelocityAlongNormal\n * @return {number}\n */\nContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n\n    vi.vsub(vj, relVel);\n\n    return this.ni.dot(relVel);\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],20:[function(_dereq_,module,exports){\nmodule.exports = Equation;\n\nvar JacobianElement = _dereq_('../math/JacobianElement'),\n    Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Equation base class\n * @class Equation\n * @constructor\n * @author schteppe\n * @param {Body} bi\n * @param {Body} bj\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n */\nfunction Equation(bi,bj,minForce,maxForce){\n    this.id = Equation.id++;\n\n    /**\n     * @property {number} minForce\n     */\n    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\n    /**\n     * @property {number} maxForce\n     */\n    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\n    /**\n     * @property bi\n     * @type {Body}\n     */\n    this.bi = bi;\n\n    /**\n     * @property bj\n     * @type {Body}\n     */\n    this.bj = bj;\n\n    /**\n     * SPOOK parameter\n     * @property {number} a\n     */\n    this.a = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} b\n     */\n    this.b = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} eps\n     */\n    this.eps = 0.0;\n\n    /**\n     * @property {JacobianElement} jacobianElementA\n     */\n    this.jacobianElementA = new JacobianElement();\n\n    /**\n     * @property {JacobianElement} jacobianElementB\n     */\n    this.jacobianElementB = new JacobianElement();\n\n    /**\n     * @property {boolean} enabled\n     * @default true\n     */\n    this.enabled = true;\n\n    // Set typical spook params\n    this.setSpookParams(1e7,4,1/60);\n}\nEquation.prototype.constructor = Equation;\n\nEquation.id = 0;\n\n/**\n * Recalculates a,b,eps.\n * @method setSpookParams\n */\nEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n    var d = relaxation,\n        k = stiffness,\n        h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = (4.0 * d) / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n};\n\n/**\n * Computes the RHS of the SPOOK equation\n * @method computeB\n * @return {Number}\n */\nEquation.prototype.computeB = function(a,b,h){\n    var GW = this.computeGW(),\n        Gq = this.computeGq(),\n        GiMf = this.computeGiMf();\n    return - Gq * a - GW * b - GiMf*h;\n};\n\n/**\n * Computes G*q, where q are the generalized body coordinates\n * @method computeGq\n * @return {Number}\n */\nEquation.prototype.computeGq = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        xi = bi.position,\n        xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n};\n\nvar zero = new Vec3();\n\n/**\n * Computes G*W, where W are the body velocities\n * @method computeGW\n * @return {Number}\n */\nEquation.prototype.computeGW = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.velocity,\n        vj = bj.velocity,\n        wi = bi.angularVelocity || zero,\n        wj = bj.angularVelocity || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n\n/**\n * Computes G*Wlambda, where W are the body velocities\n * @method computeGWlambda\n * @return {Number}\n */\nEquation.prototype.computeGWlambda = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.vlambda,\n        vj = bj.vlambda,\n        wi = bi.wlambda || zero,\n        wj = bj.wlambda || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n/**\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n * @method computeGiMf\n * @return {Number}\n */\nvar iMfi = new Vec3(),\n    iMfj = new Vec3(),\n    invIi_vmult_taui = new Vec3(),\n    invIj_vmult_tauj = new Vec3();\nEquation.prototype.computeGiMf = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        fi = bi.force,\n        ti = bi.torque,\n        fj = bj.force,\n        tj = bj.torque,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve;\n\n    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n    else { invIi_vmult_taui.set(0,0,0); }\n    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n    else { invIj_vmult_tauj.set(0,0,0); }\n\n    fi.mult(invMassi,iMfi);\n    fj.mult(invMassj,iMfj);\n\n    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n};\n\n/**\n * Computes G*inv(M)*G'\n * @method computeGiMGt\n * @return {Number}\n */\nvar tmp = new Vec3();\nEquation.prototype.computeGiMGt = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve,\n        invIi = bi.invInertiaWorldSolve,\n        invIj = bj.invInertiaWorldSolve,\n        result = invMassi + invMassj;\n\n    if(invIi){\n        invIi.vmult(GA.rotational,tmp);\n        result += tmp.dot(GA.rotational);\n    }\n\n    if(invIj){\n        invIj.vmult(GB.rotational,tmp);\n        result += tmp.dot(GB.rotational);\n    }\n\n    return  result;\n};\n\nvar addToWlambda_temp = new Vec3(),\n    addToWlambda_Gi = new Vec3(),\n    addToWlambda_Gj = new Vec3(),\n    addToWlambda_ri = new Vec3(),\n    addToWlambda_rj = new Vec3(),\n    addToWlambda_Mdiag = new Vec3();\n\n/**\n * Add constraint velocity to the bodies.\n * @method addToWlambda\n * @param {Number} deltalambda\n */\nEquation.prototype.addToWlambda = function(deltalambda){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        temp = addToWlambda_temp;\n\n    // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n    bi.vlambda.vadd(temp, bi.vlambda);\n\n    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n    bj.vlambda.vadd(temp, bj.vlambda);\n\n    // Add to angular velocity\n    if(bi.invInertiaWorldSolve){\n        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bi.wlambda.vadd(temp,bi.wlambda);\n    }\n\n    if(bj.invInertiaWorldSolve){\n        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bj.wlambda.vadd(temp,bj.wlambda);\n    }\n};\n\n/**\n * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n * @method computeInvC\n * @param  {Number} eps\n * @return {Number}\n */\nEquation.prototype.computeC = function(){\n    return this.computeGiMGt() + this.eps;\n};\n\n},{\"../math/JacobianElement\":26,\"../math/Vec3\":30}],21:[function(_dereq_,module,exports){\nmodule.exports = FrictionEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Constrains the slipping in a contact along a tangent\n * @class FrictionEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n * @extends Equation\n */\nfunction FrictionEquation(bodyA, bodyB, slipForce){\n    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3(); // tangent\n}\n\nFrictionEquation.prototype = new Equation();\nFrictionEquation.prototype.constructor = FrictionEquation;\n\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\nFrictionEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixt = FrictionEquation_computeB_temp1,\n        rjxt = FrictionEquation_computeB_temp2,\n        t = this.t;\n\n    // Caluclate cross products\n    ri.cross(t,rixt);\n    rj.cross(t,rjxt);\n\n    // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n\n    var GW = this.computeGW();\n    var GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],22:[function(_dereq_,module,exports){\nmodule.exports = RotationalEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n * @class RotationalEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {number} [options.maxForce]\n * @extends Equation\n */\nfunction RotationalEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    this.maxAngle = Math.PI / 2;\n}\n\nRotationalEquation.prototype = new Equation();\nRotationalEquation.prototype.constructor = RotationalEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nRotationalEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],23:[function(_dereq_,module,exports){\nmodule.exports = RotationalMotorEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n * @class RotationalMotorEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} maxForce\n * @extends Equation\n */\nfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisA\n     */\n    this.axisA = new Vec3();\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisB\n     */\n    this.axisB = new Vec3(); // World oriented rotational axis\n\n    /**\n     * Motor velocity\n     * @property {Number} targetVelocity\n     */\n    this.targetVelocity = 0;\n}\n\nRotationalMotorEquation.prototype = new Equation();\nRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\nRotationalMotorEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n\n        axisA = this.axisA,\n        axisB = this.axisB,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n\n    var GW = this.computeGW() - this.targetVelocity,\n        GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],24:[function(_dereq_,module,exports){\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = ContactMaterial;\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n */\nfunction ContactMaterial(m1, m2, options){\n    options = Utils.defaults(options, {\n        friction: 0.3,\n        restitution: 0.3,\n        contactEquationStiffness: 1e7,\n        contactEquationRelaxation: 3,\n        frictionEquationStiffness: 1e7,\n        frictionEquationRelaxation: 3\n    });\n\n    /**\n     * Identifier of this material\n     * @property {Number} id\n     */\n    this.id = ContactMaterial.idCounter++;\n\n    /**\n     * Participating materials\n     * @property {Array} materials\n     * @todo  Should be .materialA and .materialB instead\n     */\n    this.materials = [m1, m2];\n\n    /**\n     * Friction coefficient\n     * @property {Number} friction\n     */\n    this.friction = options.friction;\n\n    /**\n     * Restitution coefficient\n     * @property {Number} restitution\n     */\n    this.restitution = options.restitution;\n\n    /**\n     * Stiffness of the produced contact equations\n     * @property {Number} contactEquationStiffness\n     */\n    this.contactEquationStiffness = options.contactEquationStiffness;\n\n    /**\n     * Relaxation time of the produced contact equations\n     * @property {Number} contactEquationRelaxation\n     */\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\n    /**\n     * Stiffness of the produced friction equations\n     * @property {Number} frictionEquationStiffness\n     */\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\n    /**\n     * Relaxation time of the produced friction equations\n     * @property {Number} frictionEquationRelaxation\n     */\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n}\n\nContactMaterial.idCounter = 0;\n\n},{\"../utils/Utils\":53}],25:[function(_dereq_,module,exports){\nmodule.exports = Material;\n\n/**\n * Defines a physics material.\n * @class Material\n * @constructor\n * @param {object} [options]\n * @author schteppe\n */\nfunction Material(options){\n    var name = '';\n    options = options || {};\n\n    // Backwards compatibility fix\n    if(typeof(options) === 'string'){\n        name = options;\n        options = {};\n    } else if(typeof(options) === 'object') {\n        name = '';\n    }\n\n    /**\n     * @property name\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * material id.\n     * @property id\n     * @type {number}\n     */\n    this.id = Material.idCounter++;\n\n    /**\n     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} friction\n     */\n    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\n    /**\n     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} restitution\n     */\n    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n}\n\nMaterial.idCounter = 0;\n\n},{}],26:[function(_dereq_,module,exports){\nmodule.exports = JacobianElement;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n * @class JacobianElement\n * @constructor\n */\nfunction JacobianElement(){\n\n    /**\n     * @property {Vec3} spatial\n     */\n    this.spatial = new Vec3();\n\n    /**\n     * @property {Vec3} rotational\n     */\n    this.rotational = new Vec3();\n}\n\n/**\n * Multiply with other JacobianElement\n * @method multiplyElement\n * @param  {JacobianElement} element\n * @return {Number}\n */\nJacobianElement.prototype.multiplyElement = function(element){\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n};\n\n/**\n * Multiply with two vectors\n * @method multiplyVectors\n * @param  {Vec3} spatial\n * @param  {Vec3} rotational\n * @return {Number}\n */\nJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n};\n\n},{\"./Vec3\":30}],27:[function(_dereq_,module,exports){\nmodule.exports = Mat3;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n\n},{\"./Vec3\":30}],28:[function(_dereq_,module,exports){\nmodule.exports = Quaternion;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n    var w = this.w,\n        va = Quaternion_mult_va,\n        vb = Quaternion_mult_vb,\n        vaxvb = Quaternion_mult_vaxvb;\n\n    va.set(this.x,this.y,this.z);\n    vb.set(q.x,q.y,q.z);\n    target.w = w*q.w - va.dot(vb);\n    va.cross(vb,vaxvb);\n\n    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n\n};\n\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n},{\"./Vec3\":30}],29:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('./Vec3');\nvar Quaternion = _dereq_('./Quaternion');\n\nmodule.exports = Transform;\n\n/**\n * @class Transform\n * @constructor\n */\nfunction Transform(options) {\n    options = options || {};\n\n\t/**\n\t * @property {Vec3} position\n\t */\n\tthis.position = new Vec3();\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n\t/**\n\t * @property {Quaternion} quaternion\n\t */\n\tthis.quaternion = new Quaternion();\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n}\n\nvar tmpQuat = new Quaternion();\n\n/**\n * @static\n * @method pointToLocaFrame\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {Vec3} worldPoint\n * @param {Vec3} result\n */\nTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n    var result = result || new Vec3();\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n};\n\n/**\n * Get a global point in local transform coordinates.\n * @method pointToLocal\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToLocal = function(worldPoint, result){\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n};\n\n/**\n * @static\n * @method pointToWorldFrame\n * @param {Vec3} position\n * @param {Vec3} quaternion\n * @param {Vec3} localPoint\n * @param {Vec3} result\n */\nTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n    var result = result || new Vec3();\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n};\n\n/**\n * Get a local point in global transform coordinates.\n * @method pointToWorld\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToWorld = function(localPoint, result){\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n};\n\n\nTransform.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n    quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n    var result = result || new Vec3();\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n};\n\n},{\"./Quaternion\":28,\"./Vec3\":30}],30:[function(_dereq_,module,exports){\nmodule.exports = Vec3;\n\nvar Mat3 = _dereq_('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};\n},{\"./Mat3\":27}],31:[function(_dereq_,module,exports){\nmodule.exports = Body;\n\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\nvar AABB = _dereq_('../collision/AABB');\nvar Box = _dereq_('../shapes/Box');\n\n/**\n * Base class for all body types.\n * @class Body\n * @constructor\n * @extends EventTarget\n * @param {object} [options]\n * @param {Vec3} [options.position]\n * @param {Vec3} [options.velocity]\n * @param {Vec3} [options.angularVelocity]\n * @param {Quaternion} [options.quaternion]\n * @param {number} [options.mass]\n * @param {Material} [options.material]\n * @param {number} [options.type]\n * @param {number} [options.linearDamping=0.01]\n * @param {number} [options.angularDamping=0.01]\n * @param {boolean} [options.allowSleep=true]\n * @param {number} [options.sleepSpeedLimit=0.1]\n * @param {number} [options.sleepTimeLimit=1]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=1]\n * @param {boolean} [options.fixedRotation=false]\n * @param {Body} [options.shape]\n * @example\n *     var body = new Body({\n *         mass: 1\n *     });\n *     var shape = new Sphere(1);\n *     body.addShape(shape);\n *     world.add(body);\n */\nfunction Body(options){\n    options = options || {};\n\n    EventTarget.apply(this);\n\n    this.id = Body.idCounter++;\n\n    /**\n     * Reference to the world the body is living in\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n     * @property preStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.preStep = null;\n\n    /**\n     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n     * @property postStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.postStep = null;\n\n    this.vlambda = new Vec3();\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {Number} collisionResponse\n     */\n\tthis.collisionResponse = true;\n\n    /**\n     * @property position\n     * @type {Vec3}\n     */\n    this.position = new Vec3();\n\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n    /**\n     * @property {Vec3} previousPosition\n     */\n    this.previousPosition = new Vec3();\n\n    /**\n     * Initial position of the body\n     * @property initPosition\n     * @type {Vec3}\n     */\n    this.initPosition = new Vec3();\n\n    /**\n     * @property velocity\n     * @type {Vec3}\n     */\n    this.velocity = new Vec3();\n\n    if(options.velocity){\n        this.velocity.copy(options.velocity);\n    }\n\n    /**\n     * @property initVelocity\n     * @type {Vec3}\n     */\n    this.initVelocity = new Vec3();\n\n    /**\n     * Linear force on the body\n     * @property force\n     * @type {Vec3}\n     */\n    this.force = new Vec3();\n\n    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\n    /**\n     * @property mass\n     * @type {Number}\n     * @default 0\n     */\n    this.mass = mass;\n\n    /**\n     * @property invMass\n     * @type {Number}\n     */\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\n    /**\n     * @property material\n     * @type {Material}\n     */\n    this.material = options.material || null;\n\n    /**\n     * @property linearDamping\n     * @type {Number}\n     */\n    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\n    /**\n     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n     * @property type\n     * @type {Number}\n     */\n    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n    if(typeof(options.type) === typeof(Body.STATIC)){\n        this.type = options.type;\n    }\n\n    /**\n     * If true, the body will automatically fall to sleep.\n     * @property allowSleep\n     * @type {Boolean}\n     * @default true\n     */\n    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\n    /**\n     * Current sleep state.\n     * @property sleepState\n     * @type {Number}\n     */\n    this.sleepState = 0;\n\n    /**\n     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n     * @property sleepSpeedLimit\n     * @type {Number}\n     * @default 0.1\n     */\n    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\n    /**\n     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n     * @property sleepTimeLimit\n     * @type {Number}\n     * @default 1\n     */\n    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\n    this.timeLastSleepy = 0;\n\n    this._wakeUpAfterNarrowphase = false;\n\n\n    /**\n     * Rotational force on the body, around center of mass\n     * @property {Vec3} torque\n     */\n    this.torque = new Vec3();\n\n    /**\n     * Orientation of the body\n     * @property quaternion\n     * @type {Quaternion}\n     */\n    this.quaternion = new Quaternion();\n\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n\n    /**\n     * @property initQuaternion\n     * @type {Quaternion}\n     */\n    this.initQuaternion = new Quaternion();\n\n    /**\n     * @property angularVelocity\n     * @type {Vec3}\n     */\n    this.angularVelocity = new Vec3();\n\n    if(options.angularVelocity){\n        this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    /**\n     * @property initAngularVelocity\n     * @type {Vec3}\n     */\n    this.initAngularVelocity = new Vec3();\n\n    this.interpolatedPosition = new Vec3();\n    this.interpolatedQuaternion = new Quaternion();\n\n    /**\n     * @property shapes\n     * @type {array}\n     */\n    this.shapes = [];\n\n    /**\n     * @property shapeOffsets\n     * @type {array}\n     */\n    this.shapeOffsets = [];\n\n    /**\n     * @property shapeOrientations\n     * @type {array}\n     */\n    this.shapeOrientations = [];\n\n    /**\n     * @property inertia\n     * @type {Vec3}\n     */\n    this.inertia = new Vec3();\n\n    /**\n     * @property {Vec3} invInertia\n     */\n    this.invInertia = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorld\n     */\n    this.invInertiaWorld = new Mat3();\n\n    this.invMassSolve = 0;\n\n    /**\n     * @property {Vec3} invInertiaSolve\n     */\n    this.invInertiaSolve = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorldSolve\n     */\n    this.invInertiaWorldSolve = new Mat3();\n\n    /**\n     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n     * @property {Boolean} fixedRotation\n     * @default false\n     */\n    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\n    /**\n     * @property {Number} angularDamping\n     */\n    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\n    /**\n     * @property aabb\n     * @type {AABB}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * Indicates if the AABB needs to be updated before use.\n     * @property aabbNeedsUpdate\n     * @type {Boolean}\n     */\n    this.aabbNeedsUpdate = true;\n\n    this.wlambda = new Vec3();\n\n    if(options.shape){\n        this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n}\nBody.prototype = new EventTarget();\nBody.prototype.constructor = Body;\n\n/**\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n * @static\n * @property DYNAMIC\n * @type {Number}\n */\nBody.DYNAMIC = 1;\n\n/**\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n * @static\n * @property STATIC\n * @type {Number}\n */\nBody.STATIC = 2;\n\n/**\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n * @static\n * @property KINEMATIC\n * @type {Number}\n */\nBody.KINEMATIC = 4;\n\n\n\n/**\n * @static\n * @property AWAKE\n * @type {number}\n */\nBody.AWAKE = 0;\n\n/**\n * @static\n * @property SLEEPY\n * @type {number}\n */\nBody.SLEEPY = 1;\n\n/**\n * @static\n * @property SLEEPING\n * @type {number}\n */\nBody.SLEEPING = 2;\n\nBody.idCounter = 0;\n\n/**\n * Wake the body up.\n * @method wakeUp\n */\nBody.prototype.wakeUp = function(){\n    var s = this.sleepState;\n    this.sleepState = 0;\n    if(s === Body.SLEEPING){\n        this.dispatchEvent({type:\"wakeup\"});\n    }\n};\n\n/**\n * Force body sleep\n * @method sleep\n */\nBody.prototype.sleep = function(){\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0,0,0);\n    this.angularVelocity.set(0,0,0);\n};\n\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\n\nBody.sleepEvent = {\n    type: \"sleep\"\n};\n\n/**\n * Called every timestep to update internal sleep timer and change sleep state if needed.\n * @method sleepTick\n * @param {Number} time The world time in seconds\n */\nBody.prototype.sleepTick = function(time){\n    if(this.allowSleep){\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n            this.sleepState = Body.SLEEPY; // Sleepy\n            this.timeLastSleepy = time;\n            this.dispatchEvent(Body.sleepyEvent);\n        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n            this.wakeUp(); // Wake up\n        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n            this.sleep(); // Sleeping\n            this.dispatchEvent(Body.sleepEvent);\n        }\n    }\n};\n\n/**\n * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n * @method updateSolveMassProperties\n */\nBody.prototype.updateSolveMassProperties = function(){\n    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n    } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n};\n\n/**\n * Convert a world point to local body frame.\n * @method pointToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToLocalFrame = function(worldPoint,result){\n    var result = result || new Vec3();\n    worldPoint.vsub(this.position,result);\n    this.quaternion.conjugate().vmult(result,result);\n    return result;\n};\n\n/**\n * Convert a world vector to local body frame.\n * @method vectorToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToLocalFrame = function(worldVector, result){\n    var result = result || new Vec3();\n    this.quaternion.conjugate().vmult(worldVector,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method pointToWorldFrame\n * @param  {Vec3} localPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToWorldFrame = function(localPoint,result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localPoint,result);\n    result.vadd(this.position,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method vectorToWorldFrame\n * @param  {Vec3} localVector\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\n\n/**\n * Add a shape to the body with a local offset and orientation.\n * @method addShape\n * @param {Shape} shape\n * @param {Vec3} offset\n * @param {Quaternion} quaternion\n * @return {Body} The body object, for chainability.\n */\nBody.prototype.addShape = function(shape, _offset, _orientation){\n    var offset = new Vec3();\n    var orientation = new Quaternion();\n\n    if(_offset){\n        offset.copy(_offset);\n    }\n    if(_orientation){\n        orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n\n    this.aabbNeedsUpdate = true;\n\n    return this;\n};\n\n/**\n * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n * @method updateBoundingRadius\n */\nBody.prototype.updateBoundingRadius = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        N = shapes.length,\n        radius = 0;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].norm(),\n            r = shape.boundingSphereRadius;\n        if(offset + r > radius){\n            radius = offset + r;\n        }\n    }\n\n    this.boundingRadius = radius;\n};\n\nvar computeAABB_shapeAABB = new AABB();\n\n/**\n * Updates the .aabb\n * @method computeAABB\n * @todo rename to updateAABB()\n */\nBody.prototype.computeAABB = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        shapeOrientations = this.shapeOrientations,\n        N = shapes.length,\n        offset = tmpVec,\n        orientation = tmpQuat,\n        bodyQuat = this.quaternion,\n        aabb = this.aabb,\n        shapeAABB = computeAABB_shapeAABB;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n\n        // Get shape world quaternion\n        shapeOrientations[i].mult(bodyQuat, orientation);\n\n        // Get shape world position\n        orientation.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset);\n\n        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n        // vec2.add(offset, offset, this.position);\n\n        // Get shape AABB\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n        if(i === 0){\n            aabb.copy(shapeAABB);\n        } else {\n            aabb.extend(shapeAABB);\n        }\n    }\n\n    this.aabbNeedsUpdate = false;\n};\n\nvar uiw_m1 = new Mat3(),\n    uiw_m2 = new Mat3(),\n    uiw_m3 = new Mat3();\n\n/**\n * Update .inertiaWorld and .invInertiaWorld\n * @method updateInertiaWorld\n */\nBody.prototype.updateInertiaWorld = function(force){\n    var I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force) {\n        // If inertia M = s*I, where I is identity and s a scalar, then\n        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n        // where R is the rotation matrix.\n        // In other words, we don't have to transform the inertia if all\n        // inertia diagonal entries are equal.\n    } else {\n        var m1 = uiw_m1,\n            m2 = uiw_m2,\n            m3 = uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I,m1);\n        m1.mmult(m2,this.invInertiaWorld);\n        //m3.getTrace(this.invInertiaWorld);\n    }\n\n    /*\n    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n    */\n};\n\n/**\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n * @method applyForce\n * @param  {Vec3} force The amount of force to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyForce_r = new Vec3();\nvar Body_applyForce_rotForce = new Vec3();\nBody.prototype.applyForce = function(force,worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyForce_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced rotational force\n    var rotForce = Body_applyForce_rotForce;\n    r.cross(force,rotForce);\n\n    // Add linear force\n    this.force.vadd(force,this.force);\n\n    // Add rotational force\n    this.torque.vadd(rotForce,this.torque);\n};\n\n/**\n * Apply force to a local point in the body.\n * @method applyLocalForce\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_worldPoint = new Vec3();\nBody.prototype.applyLocalForce = function(localForce, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldForce = Body_applyLocalForce_worldForce;\n    var worldPoint = Body_applyLocalForce_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyForce(worldForce, worldPoint);\n};\n\n/**\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n * @method applyImpulse\n * @param  {Vec3} impulse The amount of impulse to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyImpulse_r = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nBody.prototype.applyImpulse = function(impulse, worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyImpulse_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced central impulse velocity\n    var velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.mult(this.invMass,velo);\n\n    // Add linear impulse\n    this.velocity.vadd(velo, this.velocity);\n\n    // Compute produced rotational impulse velocity\n    var rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse,rotVelo);\n\n    /*\n    rotVelo.x *= this.invInertia.x;\n    rotVelo.y *= this.invInertia.y;\n    rotVelo.z *= this.invInertia.z;\n    */\n    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\n    // Add rotational Impulse\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n};\n\n/**\n * Apply locally-defined impulse to a local point in the body.\n * @method applyLocalImpulse\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_worldPoint = new Vec3();\nBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyImpulse(worldImpulse, worldPoint);\n};\n\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Should be called whenever you change the body shape or mass.\n * @method updateMassProperties\n */\nBody.prototype.updateMassProperties = function(){\n    var halfExtents = Body_updateMassProperties_halfExtents;\n\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    var I = this.inertia;\n    var fixed = this.fixedRotation;\n\n    // Approximate with AABB box\n    this.computeAABB();\n    halfExtents.set(\n        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n    );\n    Box.calculateInertia(halfExtents, this.mass, I);\n\n    this.invInertia.set(\n        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n        I.z > 0 && !fixed ? 1.0 / I.z : 0\n    );\n    this.updateInertiaWorld(true);\n};\n\n/**\n * Get world velocity of a point in the body.\n * @method getVelocityAtWorldPoint\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3} The result vector.\n */\nBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n    var r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n};\n\n},{\"../collision/AABB\":3,\"../material/Material\":25,\"../math/Mat3\":27,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Shape\":43,\"../utils/EventTarget\":49}],32:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Ray = _dereq_('../collision/Ray');\nvar WheelInfo = _dereq_('../objects/WheelInfo');\n\nmodule.exports = RaycastVehicle;\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n * @class RaycastVehicle\n * @constructor\n * @param {object} [options]\n * @param {Body} [options.chassisBody] The car chassis body.\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n * @param {integer} [options.indexLeftAxis]\n * @param {integer} [options.indexUpAxis]\n */\nfunction RaycastVehicle(options){\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    /**\n     * An array of WheelInfo objects.\n     * @property {array} wheelInfos\n     */\n    this.wheelInfos = [];\n\n    /**\n     * Will be set to true if the car is sliding.\n     * @property {boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * @property {World} world\n     */\n    this.world = null;\n\n    /**\n     * Index of the right axis, 0=x, 1=y, 2=z\n     * @property {integer} indexRightAxis\n     * @default 1\n     */\n    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\n    /**\n     * Index of the forward axis, 0=x, 1=y, 2=z\n     * @property {integer} indexForwardAxis\n     * @default 0\n     */\n    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\n    /**\n     * Index of the up axis, 0=x, 1=y, 2=z\n     * @property {integer} indexUpAxis\n     * @default 2\n     */\n    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n}\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpVec3 = new Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nvar tmpRay = new Ray();\n\n/**\n * Add a wheel. For information about the options, see WheelInfo.\n * @method addWheel\n * @param {object} [options]\n */\nRaycastVehicle.prototype.addWheel = function(options){\n    options = options || {};\n\n    var info = new WheelInfo(options);\n    var index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n\n    return index;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    var wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method applyEngineForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n    this.wheelInfos[wheelIndex].engineForce = value;\n};\n\n/**\n * Set the braking force of a wheel\n * @method setBrake\n * @param {number} brake\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n    this.wheelInfos[wheelIndex].brake = brake;\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    world.add(this.chassisBody);\n    var that = this;\n    this.preStepCallback = function(){\n        that.updateVehicle(world.dt);\n    };\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n};\n\n/**\n * Get one of the wheel axles, world-oriented.\n * @private\n * @method getVehicleAxisWorld\n * @param  {integer} axisIndex\n * @param  {Vec3} result\n */\nRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n    result.set(\n        axisIndex === 0 ? 1 : 0,\n        axisIndex === 1 ? 1 : 0,\n        axisIndex === 2 ? 1 : 0\n    );\n    this.chassisBody.vectorToWorldFrame(result, result);\n};\n\nRaycastVehicle.prototype.updateVehicle = function(timeStep){\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n\n    for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\n    var forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0){\n        this.currentVehicleSpeedKmHour *= -1;\n    }\n\n    // simulate suspension\n    for (var i = 0; i < numWheels; i++) {\n        this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n\n    var impulse = new Vec3();\n    var relpos = new Vec3();\n    for (var i = 0; i < numWheels; i++) {\n        //apply suspension force\n        var wheel = wheelInfos[i];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n            suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n    }\n\n    this.updateFriction(timeStep);\n\n    var hitNormalWorldScaledWithProj = new Vec3();\n    var fwd  = new Vec3();\n    var vel = new Vec3();\n    for (i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        //var relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\n        // Hack to get the rotation in the correct direction\n        var m = 1;\n        switch(this.indexUpAxis){\n        case 1:\n            m = -1;\n            break;\n        }\n\n        if (wheel.isInContact) {\n\n            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\n            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\n            var proj2 = fwd.dot(vel);\n            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n        }\n\n        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n            // Apply custom rotation when accelerating and sliding\n            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n        }\n\n        // Lock wheels\n        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n            wheel.deltaRotation = 0;\n        }\n\n        wheel.rotation += wheel.deltaRotation; // Use the old value\n        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n};\n\nRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n    var chassisBody = this.chassisBody;\n    var chassisMass = chassisBody.mass;\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n\n    for (var w_it = 0; w_it < numWheels; w_it++){\n        var wheel = wheelInfos[w_it];\n\n        if (wheel.isInContact){\n            var force;\n\n            // Spring\n            var susp_length = wheel.suspensionRestLength;\n            var current_length = wheel.suspensionLength;\n            var length_diff = (susp_length - current_length);\n\n            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\n            // Damper\n            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n            var susp_damping;\n            if (projected_rel_vel < 0) {\n                susp_damping = wheel.dampingCompression;\n            } else {\n                susp_damping = wheel.dampingRelaxation;\n            }\n            force -= susp_damping * projected_rel_vel;\n\n            wheel.suspensionForce = force * chassisMass;\n            if (wheel.suspensionForce < 0) {\n                wheel.suspensionForce = 0;\n            }\n        } else {\n            wheel.suspensionForce = 0;\n        }\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    world.remove(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n};\n\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nRaycastVehicle.prototype.castRay = function(wheel) {\n    var rayvector = castRay_rayvector;\n    var target = castRay_target;\n\n    this.updateWheelTransformWorld(wheel);\n    var chassisBody = this.chassisBody;\n\n    var depth = -1;\n\n    var raylen = wheel.suspensionRestLength + wheel.radius;\n\n    wheel.directionWorld.scale(raylen, rayvector);\n    var source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    var raycastResult = wheel.raycastResult;\n\n    var param = 0;\n\n    raycastResult.reset();\n    // Turn off ray collision with the chassis temporarily\n    var oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n\n    // Cast ray against world\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n\n    var object = raycastResult.body;\n\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius;\n\n        // clamp on max suspension travel\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n            wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n            wheel.suspensionLength = maxSuspensionLength;\n            wheel.raycastResult.reset();\n        }\n\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\n        var chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\n        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\n        if (denominator >= -0.1) {\n            wheel.suspensionRelativeVelocity = 0;\n            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n            var inv = -1 / denominator;\n            wheel.suspensionRelativeVelocity = projVel * inv;\n            wheel.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n};\n\nRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n    wheel.isInContact = false;\n    var chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n};\n\n\n/**\n * Update one of the wheel transform.\n * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n * @method updateWheelTransform\n * @param {integer} wheelIndex The wheel index to update.\n */\nRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n    var up = tmpVec4;\n    var right = tmpVec5;\n    var fwd = tmpVec6;\n\n    var wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n\n    // Rotate around steering over the wheelAxle\n    var steering = wheel.steering;\n    var steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n\n    var rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\n    // World rotation of the wheel\n    var q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n\n    q.normalize();\n\n    // world position of the wheel\n    var p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n};\n\nvar directions = [\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\n\n/**\n * Get the world transform of one of the wheels\n * @method getWheelTransformWorld\n * @param  {integer} wheelIndex\n * @return {Transform}\n */\nRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n};\n\n\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nRaycastVehicle.prototype.updateFriction = function(timeStep) {\n    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\n    //calculate the impulse, so that the wheels don't move sidewards\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n    var forwardWS = updateFriction_forwardWS;\n    var axle = updateFriction_axle;\n\n    var numWheelsOnGround = 0;\n\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject){\n            numWheelsOnGround++;\n        }\n\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if(!forwardWS[i]){\n            forwardWS[i] = new Vec3();\n        }\n        if(!axle[i]){\n            axle[i] = new Vec3();\n        }\n    }\n\n    for (var i = 0; i < numWheels; i++){\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n\n        if (groundObject) {\n            var axlei = axle[i];\n            var wheelTrans = this.getWheelTransformWorld(i);\n\n            // Get world axle\n            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\n            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n            var proj = axlei.dot(surfNormalWS);\n            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n            axlei.normalize();\n\n            surfNormalWS.cross(axlei, forwardWS[i]);\n            forwardWS[i].normalize();\n\n            wheel.sideImpulse = resolveSingleBilateral(\n                chassisBody,\n                wheel.raycastResult.hitPointWorld,\n                groundObject,\n                wheel.raycastResult.hitPointWorld,\n                axlei\n            );\n\n            wheel.sideImpulse *= sideFrictionStiffness2;\n        }\n    }\n\n    var sideFactor = 1;\n    var fwdFactor = 0.5;\n\n    this.sliding = false;\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n\n        var rollingFriction = 0;\n\n        wheel.slipInfo = 1;\n        if (groundObject) {\n            var defaultRollingFrictionImpulse = 0;\n            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\n            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n            // rollingFriction = calcRollingFriction(contactPt);\n            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\n            rollingFriction += wheel.engineForce * timeStep;\n\n            // rollingFriction = 0;\n            var factor = maxImpulse / rollingFriction;\n            wheel.slipInfo *= factor;\n        }\n\n        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        wheel.forwardImpulse = 0;\n        wheel.skidInfo = 1;\n\n        if (groundObject) {\n            wheel.skidInfo = 1;\n\n            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n            var maximpSide = maximp;\n\n            var maximpSquared = maximp * maximpSide;\n\n            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\n            var x = wheel.forwardImpulse * fwdFactor;\n            var y = wheel.sideImpulse * sideFactor;\n\n            var impulseSquared = x * x + y * y;\n\n            wheel.sliding = false;\n            if (impulseSquared > maximpSquared) {\n                this.sliding = true;\n                wheel.sliding = true;\n\n                var factor = maximp / Math.sqrt(impulseSquared);\n\n                wheel.skidInfo *= factor;\n            }\n        }\n    }\n\n    if (this.sliding) {\n        for (var i = 0; i < numWheels; i++) {\n            var wheel = wheelInfos[i];\n            if (wheel.sideImpulse !== 0) {\n                if (wheel.skidInfo < 1){\n                    wheel.forwardImpulse *= wheel.skidInfo;\n                    wheel.sideImpulse *= wheel.skidInfo;\n                }\n            }\n        }\n    }\n\n    // apply the impulses\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var rel_pos = new Vec3();\n        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n        // cannons applyimpulse is using world coord for the position\n        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (wheel.forwardImpulse !== 0) {\n            var impulse = new Vec3();\n            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n            chassisBody.applyImpulse(impulse, rel_pos);\n        }\n\n        if (wheel.sideImpulse !== 0){\n            var groundObject = wheel.raycastResult.body;\n\n            var rel_pos2 = new Vec3();\n            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n            var sideImp = new Vec3();\n            axle[i].scale(wheel.sideImpulse, sideImp);\n\n            // Scale the relative position in the up direction with rollInfluence.\n            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n            chassisBody.applyImpulse(sideImp, rel_pos);\n\n            //apply friction impulse on the ground\n            sideImp.scale(-1, sideImp);\n            groundObject.applyImpulse(sideImp, rel_pos2);\n        }\n    }\n};\n\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n    var j1 = 0;\n    var contactPosWorld = frictionPosWorld;\n\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    var vel1 = calcRollingFriction_vel1;\n    var vel2 = calcRollingFriction_vel2;\n    var vel = calcRollingFriction_vel;\n    // contactPosWorld.vsub(body0.position, rel_pos1);\n    // contactPosWorld.vsub(body1.position, rel_pos2);\n\n    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n    vel1.vsub(vel2, vel);\n\n    var vrel = frictionDirectionWorld.dot(vel);\n\n    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n    var relaxation = 1;\n    var jacDiagABInv = relaxation / (denom0 + denom1);\n\n    // calculate j that moves us to zero relative velocity\n    j1 = -vrel * jacDiagABInv;\n\n    if (maxImpulse < j1) {\n        j1 = maxImpulse;\n    }\n    if (j1 < -maxImpulse) {\n        j1 = -maxImpulse;\n    }\n\n    return j1;\n}\n\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n    var r0 = computeImpulseDenominator_r0;\n    var c0 = computeImpulseDenominator_c0;\n    var vec = computeImpulseDenominator_vec;\n    var m = computeImpulseDenominator_m;\n\n    pos.vsub(body.position, r0);\n    r0.cross(normal, c0);\n    body.invInertiaWorld.vmult(c0, m);\n    m.cross(r0, vec);\n\n    return body.invMass + normal.dot(vec);\n}\n\n\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3();\n\n//bilateral constraint between two dynamic objects\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n    var normalLenSqr = normal.norm2();\n    if (normalLenSqr > 1.1){\n        return 0; // no impulse\n    }\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    // pos1.vsub(body1.position, rel_pos1);\n    // pos2.vsub(body2.position, rel_pos2);\n\n    var vel1 = resolveSingleBilateral_vel1;\n    var vel2 = resolveSingleBilateral_vel2;\n    var vel = resolveSingleBilateral_vel;\n    body1.getVelocityAtWorldPoint(pos1, vel1);\n    body2.getVelocityAtWorldPoint(pos2, vel2);\n\n    vel1.vsub(vel2, vel);\n\n    var rel_vel = normal.dot(vel);\n\n    var contactDamping = 0.2;\n    var massTerm = 1 / (body1.invMass + body2.invMass);\n    var impulse = - contactDamping * rel_vel * massTerm;\n\n    return impulse;\n}\n},{\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/WheelInfo\":36,\"./Body\":31}],33:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Sphere = _dereq_('../shapes/Sphere');\nvar Box = _dereq_('../shapes/Box');\nvar Vec3 = _dereq_('../math/Vec3');\nvar HingeConstraint = _dereq_('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.add(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n\n},{\"../constraints/HingeConstraint\":15,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Sphere\":44,\"./Body\":31}],34:[function(_dereq_,module,exports){\nmodule.exports = SPHSystem;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Particle = _dereq_('../shapes/Particle');\nvar Body = _dereq_('../objects/Body');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Particle\":41,\"../shapes/Shape\":43}],35:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n\n},{\"../math/Vec3\":30}],36:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = WheelInfo;\n\n/**\n * @class WheelInfo\n * @constructor\n * @param {Object} [options]\n *\n * @param {Vec3} [options.chassisConnectionPointLocal]\n * @param {Vec3} [options.chassisConnectionPointWorld]\n * @param {Vec3} [options.directionLocal]\n * @param {Vec3} [options.directionWorld]\n * @param {Vec3} [options.axleLocal]\n * @param {Vec3} [options.axleWorld]\n * @param {number} [options.suspensionRestLength=1]\n * @param {number} [options.suspensionMaxLength=2]\n * @param {number} [options.radius=1]\n * @param {number} [options.suspensionStiffness=100]\n * @param {number} [options.dampingCompression=10]\n * @param {number} [options.dampingRelaxation=10]\n * @param {number} [options.frictionSlip=10000]\n * @param {number} [options.steering=0]\n * @param {number} [options.rotation=0]\n * @param {number} [options.deltaRotation=0]\n * @param {number} [options.rollInfluence=0.01]\n * @param {number} [options.maxSuspensionForce]\n * @param {boolean} [options.isFrontWheel=true]\n * @param {number} [options.clippedInvContactDotSuspension=1]\n * @param {number} [options.suspensionRelativeVelocity=0]\n * @param {number} [options.suspensionForce=0]\n * @param {number} [options.skidInfo=0]\n * @param {number} [options.suspensionLength=0]\n * @param {number} [options.maxSuspensionTravel=1]\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n */\nfunction WheelInfo(options){\n    options = Utils.defaults(options, {\n        chassisConnectionPointLocal: new Vec3(),\n        chassisConnectionPointWorld: new Vec3(),\n        directionLocal: new Vec3(),\n        directionWorld: new Vec3(),\n        axleLocal: new Vec3(),\n        axleWorld: new Vec3(),\n        suspensionRestLength: 1,\n        suspensionMaxLength: 2,\n        radius: 1,\n        suspensionStiffness: 100,\n        dampingCompression: 10,\n        dampingRelaxation: 10,\n        frictionSlip: 10000,\n        steering: 0,\n        rotation: 0,\n        deltaRotation: 0,\n        rollInfluence: 0.01,\n        maxSuspensionForce: Number.MAX_VALUE,\n        isFrontWheel: true,\n        clippedInvContactDotSuspension: 1,\n        suspensionRelativeVelocity: 0,\n        suspensionForce: 0,\n        skidInfo: 0,\n        suspensionLength: 0,\n        maxSuspensionTravel: 1,\n        useCustomSlidingRotationalSpeed: false,\n        customSlidingRotationalSpeed: -0.1\n    });\n\n    /**\n     * Max travel distance of the suspension, in meters.\n     * @property {number} maxSuspensionTravel\n     */\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\n    /**\n     * Speed to apply to the wheel rotation when the wheel is sliding.\n     * @property {number} customSlidingRotationalSpeed\n     */\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\n    /**\n     * If the customSlidingRotationalSpeed should be used.\n     * @property {Boolean} useCustomSlidingRotationalSpeed\n     */\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\n    /**\n     * @property {Boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * Connection point, defined locally in the chassis body frame.\n     * @property {Vec3} chassisConnectionPointLocal\n     */\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\n    /**\n     * @property {Vec3} chassisConnectionPointWorld\n     */\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\n    /**\n     * @property {Vec3} directionLocal\n     */\n    this.directionLocal = options.directionLocal.clone();\n\n    /**\n     * @property {Vec3} directionWorld\n     */\n    this.directionWorld = options.directionWorld.clone();\n\n    /**\n     * @property {Vec3} axleLocal\n     */\n    this.axleLocal = options.axleLocal.clone();\n\n    /**\n     * @property {Vec3} axleWorld\n     */\n    this.axleWorld = options.axleWorld.clone();\n\n    /**\n     * @property {number} suspensionRestLength\n     */\n    this.suspensionRestLength = options.suspensionRestLength;\n\n    /**\n     * @property {number} suspensionMaxLength\n     */\n    this.suspensionMaxLength = options.suspensionMaxLength;\n\n    /**\n     * @property {number} radius\n     */\n    this.radius = options.radius;\n\n    /**\n     * @property {number} suspensionStiffness\n     */\n    this.suspensionStiffness = options.suspensionStiffness;\n\n    /**\n     * @property {number} dampingCompression\n     */\n    this.dampingCompression = options.dampingCompression;\n\n    /**\n     * @property {number} dampingRelaxation\n     */\n    this.dampingRelaxation = options.dampingRelaxation;\n\n    /**\n     * @property {number} frictionSlip\n     */\n    this.frictionSlip = options.frictionSlip;\n\n    /**\n     * @property {number} steering\n     */\n    this.steering = 0;\n\n    /**\n     * Rotation value, in radians.\n     * @property {number} rotation\n     */\n    this.rotation = 0;\n\n    /**\n     * @property {number} deltaRotation\n     */\n    this.deltaRotation = 0;\n\n    /**\n     * @property {number} rollInfluence\n     */\n    this.rollInfluence = options.rollInfluence;\n\n    /**\n     * @property {number} maxSuspensionForce\n     */\n    this.maxSuspensionForce = options.maxSuspensionForce;\n\n    /**\n     * @property {number} engineForce\n     */\n    this.engineForce = 0;\n\n    /**\n     * @property {number} brake\n     */\n    this.brake = 0;\n\n    /**\n     * @property {number} isFrontWheel\n     */\n    this.isFrontWheel = options.isFrontWheel;\n\n    /**\n     * @property {number} clippedInvContactDotSuspension\n     */\n    this.clippedInvContactDotSuspension = 1;\n\n    /**\n     * @property {number} suspensionRelativeVelocity\n     */\n    this.suspensionRelativeVelocity = 0;\n\n    /**\n     * @property {number} suspensionForce\n     */\n    this.suspensionForce = 0;\n\n    /**\n     * @property {number} skidInfo\n     */\n    this.skidInfo = 0;\n\n    /**\n     * @property {number} suspensionLength\n     */\n    this.suspensionLength = 0;\n\n    /**\n     * @property {number} sideImpulse\n     */\n    this.sideImpulse = 0;\n\n    /**\n     * @property {number} forwardImpulse\n     */\n    this.forwardImpulse = 0;\n\n    /**\n     * The result from raycasting\n     * @property {RaycastResult} raycastResult\n     */\n    this.raycastResult = new RaycastResult();\n\n    /**\n     * Wheel world transform\n     * @property {Transform} worldTransform\n     */\n    this.worldTransform = new Transform();\n\n    /**\n     * @property {boolean} isInContact\n     */\n    this.isInContact = false;\n}\n\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\nvar chassis_velocity_at_contactPoint = new Vec3();\nWheelInfo.prototype.updateWheel = function(chassis){\n    var raycastResult = this.raycastResult;\n\n    if (this.isInContact){\n        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n        if (project >= -0.1) {\n            this.suspensionRelativeVelocity = 0.0;\n            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n            var inv = -1 / project;\n            this.suspensionRelativeVelocity = projVel * inv;\n            this.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n    }\n};\n},{\"../collision/RaycastResult\":10,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Utils\":53}],37:[function(_dereq_,module,exports){\nmodule.exports = Box;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this);\n\n    this.type = Shape.types.BOX;\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n\n},{\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],38:[function(_dereq_,module,exports){\nmodule.exports = ConvexPolyhedron;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    var that = this;\n    Shape.call(this);\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"./Shape\":43}],39:[function(_dereq_,module,exports){\nmodule.exports = Cylinder;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\nfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n    var N = numSegments,\n        verts = [],\n        axes = [],\n        faces = [],\n        bottomface = [],\n        topface = [],\n        cos = Math.cos,\n        sin = Math.sin;\n\n    // First bottom point\n    verts.push(new Vec3(radiusBottom*cos(0),\n                               radiusBottom*sin(0),\n                               -height*0.5));\n    bottomface.push(0);\n\n    // First top point\n    verts.push(new Vec3(radiusTop*cos(0),\n                               radiusTop*sin(0),\n                               height*0.5));\n    topface.push(1);\n\n    for(var i=0; i<N; i++){\n        var theta = 2*Math.PI/N * (i+1);\n        var thetaN = 2*Math.PI/N * (i+0.5);\n        if(i<N-1){\n            // Bottom\n            verts.push(new Vec3(radiusBottom*cos(theta),\n                                       radiusBottom*sin(theta),\n                                       -height*0.5));\n            bottomface.push(2*i+2);\n            // Top\n            verts.push(new Vec3(radiusTop*cos(theta),\n                                       radiusTop*sin(theta),\n                                       height*0.5));\n            topface.push(2*i+3);\n\n            // Face\n            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n        } else {\n            faces.push([0,1, 2*i+1, 2*i]); // Connect\n        }\n\n        // Axis: we can cut off half of them if we have even number of segments\n        if(N % 2 === 1 || i < N / 2){\n            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n        }\n    }\n    faces.push(topface);\n    axes.push(new Vec3(0,0,1));\n\n    // Reorder bottom face\n    var temp = [];\n    for(var i=0; i<bottomface.length; i++){\n        temp.push(bottomface[bottomface.length - i - 1]);\n    }\n    faces.push(temp);\n\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n    ConvexPolyhedron.call( this, verts, faces, axes );\n}\n\nCylinder.prototype = new ConvexPolyhedron();\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],40:[function(_dereq_,module,exports){\nvar Shape = _dereq_('./Shape');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this);\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.type = Shape.types.HEIGHTFIELD;\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var idx = [];\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\n    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n    var minmax = [];\n    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\n    return (minmax[0] + minmax[1]) / 2; // average\n};\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53,\"./ConvexPolyhedron\":38,\"./Shape\":43}],41:[function(_dereq_,module,exports){\nmodule.exports = Particle;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Particle shape.\n * @class Particle\n * @constructor\n * @author schteppe\n * @extends Shape\n */\nfunction Particle(){\n    Shape.call(this);\n\n    this.type = Shape.types.PARTICLE;\n}\nParticle.prototype = new Shape();\nParticle.prototype.constructor = Particle;\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nParticle.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nParticle.prototype.volume = function(){\n    return 0;\n};\n\nParticle.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = 0;\n};\n\nParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],42:[function(_dereq_,module,exports){\nmodule.exports = Plane;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n * @class Plane\n * @constructor\n * @extends Shape\n * @author schteppe\n */\nfunction Plane(){\n    Shape.call(this);\n    this.type = Shape.types.PLANE;\n\n    // World oriented normal\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n\n    this.boundingSphereRadius = Number.MAX_VALUE;\n}\nPlane.prototype = new Shape();\nPlane.prototype.constructor = Plane;\n\nPlane.prototype.computeWorldNormal = function(quat){\n    var n = this.worldNormal;\n    n.set(0,0,1);\n    quat.vmult(n,n);\n    this.worldNormalNeedsUpdate = false;\n};\n\nPlane.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    return target;\n};\n\nPlane.prototype.volume = function(){\n    return Number.MAX_VALUE; // The plane is infinite...\n};\n\nvar tempNormal = new Vec3();\nPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0,0,1); // Default plane normal is z\n    quat.vmult(tempNormal,tempNormal);\n    var maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if(tempNormal.x === 1){ max.x = pos.x; }\n    if(tempNormal.y === 1){ max.y = pos.y; }\n    if(tempNormal.z === 1){ max.z = pos.z; }\n\n    if(tempNormal.x === -1){ min.x = pos.x; }\n    if(tempNormal.y === -1){ min.y = pos.y; }\n    if(tempNormal.z === -1){ min.z = pos.z; }\n};\n\nPlane.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = Number.MAX_VALUE;\n};\n},{\"../math/Vec3\":30,\"./Shape\":43}],43:[function(_dereq_,module,exports){\nmodule.exports = Shape;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @author schteppe\n * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n */\nfunction Shape(){\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = true;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n * @return {Number}\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @return {Vec3}\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Shape\":43}],44:[function(_dereq_,module,exports){\nmodule.exports = Sphere;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this);\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius!==undefined ? Number(radius) : 1.0;\n    this.type = Shape.types.SPHERE;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],45:[function(_dereq_,module,exports){\nmodule.exports = Trimesh;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar AABB = _dereq_('../collision/AABB');\nvar Octree = _dereq_('../utils/Octree');\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     var vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     var indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     var trimeshShape = new Trimesh(vertices, indices);\n */\nfunction Trimesh(vertices, indices) {\n    Shape.call(this);\n    this.type = Shape.types.TRIMESH;\n\n    /**\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = new Float32Array(vertices);\n\n    /**\n     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n     * @property indices\n     * @type {Array}\n     */\n    this.indices = new Int16Array(indices);\n\n    /**\n     * The normals data.\n     * @property normals\n     * @type {Array}\n     */\n    this.normals = new Float32Array(indices.length);\n\n    /**\n     * The local AABB of the mesh.\n     * @property aabb\n     * @type {Array}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * References to vertex pairs, making up all unique edges in the trimesh.\n     * @property {array} edges\n     */\n    this.edges = null;\n\n    /**\n     * Local scaling of the mesh. Use .setScale() to set it.\n     * @property {Vec3} scale\n     */\n    this.scale = new Vec3(1, 1, 1);\n\n    /**\n     * The indexed triangles. Use .updateTree() to update it.\n     * @property {Octree} tree\n     */\n    this.tree = new Octree();\n\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n}\nTrimesh.prototype = new Shape();\nTrimesh.prototype.constructor = Trimesh;\n\nvar computeNormals_n = new Vec3();\n\n/**\n * @method updateTree\n */\nTrimesh.prototype.updateTree = function(){\n    var tree = this.tree;\n\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n\n    // Insert all triangles\n    var triangleAABB = new AABB();\n    var a = new Vec3();\n    var b = new Vec3();\n    var c = new Vec3();\n    var points = [a, b, c];\n    for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n};\n\nvar unscaledAABB = new AABB();\n\n/**\n * Get triangles in a local AABB from the trimesh.\n * @method getTrianglesInAABB\n * @param  {AABB} aabb\n * @param  {array} result An array of integers, referencing the queried triangles.\n */\nTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n    unscaledAABB.copy(aabb);\n\n    // Scale it to local\n    var scale = this.scale;\n    var isx = scale.x;\n    var isy = scale.y;\n    var isz = scale.z;\n    var l = unscaledAABB.lowerBound;\n    var u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n\n    return this.tree.aabbQuery(unscaledAABB, result);\n};\n\n/**\n * @method setScale\n * @param {Vec3} scale\n */\nTrimesh.prototype.setScale = function(scale){\n    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n    var isUniform = scale.x === scale.y === scale.z;\n\n    if(!(wasUniform && isUniform)){\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n};\n\n/**\n * Compute the normals of the faces. Will save in the .normals array.\n * @method updateNormals\n */\nTrimesh.prototype.updateNormals = function(){\n    var n = computeNormals_n;\n\n    // Generate normals\n    var normals = this.normals;\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n\n        this.getVertex(a, va);\n        this.getVertex(b, vb);\n        this.getVertex(c, vc);\n\n        Trimesh.computeNormal(vb, va, vc, n);\n\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n    }\n};\n\n/**\n * Update the .edges property\n * @method updateEdges\n */\nTrimesh.prototype.updateEdges = function(){\n    var edges = {};\n    var add = function(indexA, indexB){\n        var key = a < b ? a + '_' + b : b + '_' + a;\n        edges[key] = true;\n    };\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n        add(a,b);\n        add(b,c);\n        add(c,a);\n    }\n    var keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (var i = 0; i < keys.length; i++) {\n        var indices = keys[i].split('_');\n        this.edges[2 * i] = parseInt(indices[0], 10);\n        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n};\n\n/**\n * Get an edge vertex\n * @method getEdgeVertex\n * @param  {number} edgeIndex\n * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n * @param  {Vec3} vertexStore Where to store the result\n */\nTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n};\n\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\n\n/**\n * Get a vector along an edge.\n * @method getEdgeVector\n * @param  {number} edgeIndex\n * @param  {Vec3} vectorStore\n */\nTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n    var va = getEdgeVector_va;\n    var vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nTrimesh.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\n\n/**\n * Get vertex i.\n * @method getVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getVertex = function(i, out){\n    var scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n};\n\n/**\n * Get raw vertex i\n * @private\n * @method _getUnscaledVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype._getUnscaledVertex = function(i, out){\n    var i3 = i * 3;\n    var vertices = this.vertices;\n    return out.set(\n        vertices[i3],\n        vertices[i3 + 1],\n        vertices[i3 + 2]\n    );\n};\n\n/**\n * Get a vertex from the trimesh,transformed by the given position and quaternion.\n * @method getWorldVertex\n * @param  {number} i\n * @param  {Vec3} pos\n * @param  {Quaternion} quat\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n};\n\n/**\n * Get the three vertices for triangle i.\n * @method getTriangleVertices\n * @param  {number} i\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n    var i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n};\n\n/**\n * Compute the normal of triangle i.\n * @method getNormal\n * @param  {Number} i\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.getNormal = function(i, target){\n    var i3 = i * 3;\n    return target.set(\n        this.normals[i3],\n        this.normals[i3 + 1],\n        this.normals[i3 + 2]\n    );\n};\n\nvar cli_aabb = new AABB();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n    );\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\n\n/**\n * Compute the local AABB for the trimesh\n * @method computeLocalAABB\n * @param  {AABB} aabb\n */\nTrimesh.prototype.computeLocalAABB = function(aabb){\n    var l = aabb.lowerBound,\n        u = aabb.upperBound,\n        n = this.vertices.length,\n        vertices = this.vertices,\n        v = computeLocalAABB_worldVert;\n\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for(var i=0; i !== n; i++){\n        this.getVertex(i, v);\n\n        if(v.x < l.x){\n            l.x = v.x;\n        } else if(v.x > u.x){\n            u.x = v.x;\n        }\n\n        if(v.y < l.y){\n            l.y = v.y;\n        } else if(v.y > u.y){\n            u.y = v.y;\n        }\n\n        if(v.z < l.z){\n            l.z = v.z;\n        } else if(v.z > u.z){\n            u.z = v.z;\n        }\n    }\n};\n\n\n/**\n * Update the .aabb property\n * @method updateAABB\n */\nTrimesh.prototype.updateAABB = function(){\n    this.computeLocalAABB(this.aabb);\n};\n\n/**\n * Will update the .boundingSphereRadius property\n * @method updateBoundingSphereRadius\n */\nTrimesh.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var vertices = this.vertices;\n    var v = new Vec3();\n    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    /*\n    var n = this.vertices.length / 3,\n        verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n\n    var v = tempWorldVertex;\n    for(var i=0; i<n; i++){\n        this.getVertex(i, v);\n        quat.vmult(v, v);\n        pos.vadd(v, v);\n        if (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n    */\n\n    // Faster approximation using local AABB\n    var frame = calculateWorldAABB_frame;\n    var result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n};\n\n/**\n * Get approximate volume\n * @method volume\n * @return {Number}\n */\nTrimesh.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\nTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n    radius = radius || 1;\n    tube = tube || 0.5;\n    radialSegments = radialSegments || 8;\n    tubularSegments = tubularSegments || 6;\n    arc = arc || Math.PI * 2;\n\n    var vertices = [];\n    var indices = [];\n\n    for ( var j = 0; j <= radialSegments; j ++ ) {\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n\n            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n            var z = tube * Math.sin( v );\n\n            vertices.push( x, y, z );\n        }\n    }\n\n    for ( var j = 1; j <= radialSegments; j ++ ) {\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\n            var a = ( tubularSegments + 1 ) * j + i - 1;\n            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( tubularSegments + 1 ) * j + i;\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return new Trimesh(vertices, indices);\n};\n\n},{\"../collision/AABB\":3,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Octree\":50,\"./Shape\":43}],46:[function(_dereq_,module,exports){\nmodule.exports = GSSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @class GSSolver\n * @constructor\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @author schteppe / https://github.com/schteppe\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n * @extends Solver\n */\nfunction GSSolver(){\n    Solver.call(this);\n\n    /**\n     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n     * @property iterations\n     * @type {Number}\n     * @todo write more about solver and iterations in the wiki\n     */\n    this.iterations = 10;\n\n    /**\n     * When tolerance is reached, the system is assumed to be converged.\n     * @property tolerance\n     * @type {Number}\n     */\n    this.tolerance = 1e-7;\n}\nGSSolver.prototype = new Solver();\n\nvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\nGSSolver.prototype.solve = function(dt,world){\n    var iter = 0,\n        maxIter = this.iterations,\n        tolSquared = this.tolerance*this.tolerance,\n        equations = this.equations,\n        Neq = equations.length,\n        bodies = world.bodies,\n        Nbodies = bodies.length,\n        h = dt,\n        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\n    // Update solve mass\n    if(Neq !== 0){\n        for(var i=0; i!==Nbodies; i++){\n            bodies[i].updateSolveMassProperties();\n        }\n    }\n\n    // Things that does not change during iteration can be computed once\n    var invCs = GSSolver_solve_invCs,\n        Bs = GSSolver_solve_Bs,\n        lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for(var i=0; i!==Neq; i++){\n        var c = equations[i];\n        lambda[i] = 0.0;\n        Bs[i] = c.computeB(h);\n        invCs[i] = 1.0 / c.computeC();\n    }\n\n    if(Neq !== 0){\n\n        // Reset vlambda\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                vlambda=b.vlambda,\n                wlambda=b.wlambda;\n            vlambda.set(0,0,0);\n            if(wlambda){\n                wlambda.set(0,0,0);\n            }\n        }\n\n        // Iterate over equations\n        for(iter=0; iter!==maxIter; iter++){\n\n            // Accumulate the total error for each iteration.\n            deltalambdaTot = 0.0;\n\n            for(var j=0; j!==Neq; j++){\n\n                var c = equations[j];\n\n                // Compute iteration\n                B = Bs[j];\n                invC = invCs[j];\n                lambdaj = lambda[j];\n                GWlambda = c.computeGWlambda();\n                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\n                // Clamp if we are not within the min/max interval\n                if(lambdaj + deltalambda < c.minForce){\n                    deltalambda = c.minForce - lambdaj;\n                } else if(lambdaj + deltalambda > c.maxForce){\n                    deltalambda = c.maxForce - lambdaj;\n                }\n                lambda[j] += deltalambda;\n\n                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n                c.addToWlambda(deltalambda);\n            }\n\n            // If the total error is small enough - stop iterate\n            if(deltalambdaTot*deltalambdaTot < tolSquared){\n                break;\n            }\n        }\n\n        // Add result to velocity\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                v=b.velocity,\n                w=b.angularVelocity;\n            v.vadd(b.vlambda, v);\n            if(w){\n                w.vadd(b.wlambda, w);\n            }\n        }\n    }\n\n    return iter;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Solver\":47}],47:[function(_dereq_,module,exports){\nmodule.exports = Solver;\n\n/**\n * Constraint equation solver base class.\n * @class Solver\n * @constructor\n * @author schteppe / https://github.com/schteppe\n */\nfunction Solver(){\n    /**\n     * All equations to be solved\n     * @property {Array} equations\n     */\n    this.equations = [];\n}\n\n/**\n * Should be implemented in subclasses!\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSolver.prototype.solve = function(dt,world){\n    // Should return the number of iterations done!\n    return 0;\n};\n\n/**\n * Add an equation\n * @method addEquation\n * @param {Equation} eq\n */\nSolver.prototype.addEquation = function(eq){\n    if (eq.enabled) {\n        this.equations.push(eq);\n    }\n};\n\n/**\n * Remove an equation\n * @method removeEquation\n * @param {Equation} eq\n */\nSolver.prototype.removeEquation = function(eq){\n    var eqs = this.equations;\n    var i = eqs.indexOf(eq);\n    if(i !== -1){\n        eqs.splice(i,1);\n    }\n};\n\n/**\n * Add all equations\n * @method removeAllEquations\n */\nSolver.prototype.removeAllEquations = function(){\n    this.equations.length = 0;\n};\n\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports = SplitSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\nvar Body = _dereq_('../objects/Body');\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n * @class SplitSolver\n * @constructor\n * @extends Solver\n * @param {Solver} subsolver\n */\nfunction SplitSolver(subsolver){\n    Solver.call(this);\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n\n    // Create needed nodes, reuse if possible\n    while(this.nodePool.length < 128){\n        this.nodePool.push(this.createNode());\n    }\n}\nSplitSolver.prototype = new Solver();\n\n// Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\nvar SplitSolver_solve_nodePool = []; // All allocated node objects\nvar SplitSolver_solve_eqs = [];   // Temp array\nvar SplitSolver_solve_bds = [];   // Temp array\nvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes){\n    var Nnodes = nodes.length;\n    for(var i=0; i!==Nnodes; i++){\n        var node = nodes[i];\n        if(!node.visited && !(node.body.type & STATIC)){\n            return node;\n        }\n    }\n    return false;\n}\n\nvar queue = [];\nfunction bfs(root,visitFunc,bds,eqs){\n    queue.push(root);\n    root.visited = true;\n    visitFunc(root,bds,eqs);\n    while(queue.length) {\n        var node = queue.pop();\n        // Loop over unvisited child nodes\n        var child;\n        while((child = getUnvisitedNode(node.children))) {\n            child.visited = true;\n            visitFunc(child,bds,eqs);\n            queue.push(child);\n        }\n    }\n}\n\nfunction visitFunc(node,bds,eqs){\n    bds.push(node.body);\n    var Neqs = node.eqs.length;\n    for(var i=0; i!==Neqs; i++){\n        var eq = node.eqs[i];\n        if(eqs.indexOf(eq) === -1){\n            eqs.push(eq);\n        }\n    }\n}\n\nSplitSolver.prototype.createNode = function(){\n    return { body:null, children:[], eqs:[], visited:false };\n};\n\n/**\n * Solve the subsystems\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSplitSolver.prototype.solve = function(dt,world){\n    var nodes=SplitSolver_solve_nodes,\n        nodePool=this.nodePool,\n        bodies=world.bodies,\n        equations=this.equations,\n        Neq=equations.length,\n        Nbodies=bodies.length,\n        subsolver=this.subsolver;\n\n    // Create needed nodes, reuse if possible\n    while(nodePool.length < Nbodies){\n        nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n    }\n\n    // Reset node values\n    for(var i=0; i!==Nbodies; i++){\n        var node = nodes[i];\n        node.body = bodies[i];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n    }\n    for(var k=0; k!==Neq; k++){\n        var eq=equations[k],\n            i=bodies.indexOf(eq.bi),\n            j=bodies.indexOf(eq.bj),\n            ni=nodes[i],\n            nj=nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n    }\n\n    var child, n=0, eqs=SplitSolver_solve_eqs;\n\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n\n    var dummyWorld = SplitSolver_solve_dummyWorld;\n    while((child = getUnvisitedNode(nodes))){\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\n        var Neqs = eqs.length;\n\n        eqs = eqs.sort(sortById);\n\n        for(var i=0; i!==Neqs; i++){\n            subsolver.addEquation(eqs[i]);\n        }\n\n        var iter = subsolver.solve(dt,dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n    }\n\n    return n;\n};\n\nfunction sortById(a, b){\n    return b.id - a.id;\n}\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"./Solver\":47}],49:[function(_dereq_,module,exports){\n/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n\n},{}],50:[function(_dereq_,module,exports){\nvar AABB = _dereq_('../collision/AABB');\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Octree;\n\n/**\n * @class OctreeNode\n * @param {object} [options]\n * @param {Octree} [options.root]\n * @param {AABB} [options.aabb]\n */\nfunction OctreeNode(options){\n    options = options || {};\n\n    /**\n     * The root node\n     * @property {OctreeNode} root\n     */\n    this.root = options.root || null;\n\n    /**\n     * Boundary of this node\n     * @property {AABB} aabb\n     */\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\n    /**\n     * Contained data at the current node level.\n     * @property {Array} data\n     */\n    this.data = [];\n\n    /**\n     * Children to this node\n     * @property {Array} children\n     */\n    this.children = [];\n}\n\n/**\n * @class Octree\n * @param {AABB} aabb The total AABB of the tree\n * @param {object} [options]\n * @param {number} [options.maxDepth=8]\n * @extends OctreeNode\n */\nfunction Octree(aabb, options){\n    options = options || {};\n    options.root = null;\n    options.aabb = aabb;\n    OctreeNode.call(this, options);\n\n    /**\n     * Maximum subdivision depth\n     * @property {number} maxDepth\n     */\n    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n}\nOctree.prototype = new OctreeNode();\n\nOctreeNode.prototype.reset = function(aabb, options){\n    this.children.length = this.data.length = 0;\n};\n\n/**\n * Insert data into this node\n * @method insert\n * @param  {AABB} aabb\n * @param  {object} elementData\n * @return {boolean} True if successful, otherwise false\n */\nOctreeNode.prototype.insert = function(aabb, elementData, level){\n    var nodeData = this.data;\n    level = level || 0;\n\n    // Ignore objects that do not belong in this node\n    if (!this.aabb.contains(aabb)){\n        return false; // object cannot be added\n    }\n\n    var children = this.children;\n\n    if(level < (this.maxDepth || this.root.maxDepth)){\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length){\n            this.subdivide();\n            subdivided = true;\n        }\n\n        // add to whichever node will accept it\n        for (var i = 0; i !== 8; i++) {\n            if (children[i].insert(aabb, elementData, level + 1)){\n                return true;\n            }\n        }\n\n        if(subdivided){\n            // No children accepted! Might as well just remove em since they contain none\n            children.length = 0;\n        }\n    }\n\n    // Too deep, or children didnt want it. add it in current node\n    nodeData.push(elementData);\n\n    return true;\n};\n\nvar halfDiagonal = new Vec3();\n\n/**\n * Create 8 equally sized children nodes and put them in the .children array.\n * @method subdivide\n */\nOctreeNode.prototype.subdivide = function() {\n    var aabb = this.aabb;\n    var l = aabb.lowerBound;\n    var u = aabb.upperBound;\n\n    var children = this.children;\n\n    children.push(\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n    );\n\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n\n    var root = this.root || this;\n\n    for (var i = 0; i !== 8; i++) {\n        var child = children[i];\n\n        // Set current node as root\n        child.root = root;\n\n        // Compute bounds\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n\n        lowerBound.vadd(l, lowerBound);\n\n        // Upper bound is always lower bound + halfDiagonal\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n};\n\n/**\n * Get all data, potentially within an AABB\n * @method aabbQuery\n * @param  {AABB} aabb\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\n    var nodeData = this.data;\n\n    // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n    var children = this.children;\n\n\n    // for (var i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)){\n            Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Get all data, potentially intersected by a ray.\n * @method rayQuery\n * @param  {Ray} ray\n * @param  {Transform} treeTransform\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n\n    return result;\n};\n\n/**\n * @method removeEmptyNodes\n */\nOctreeNode.prototype.removeEmptyNodes = function() {\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            if(!node.children[i].data.length){\n                node.children.splice(i, 1);\n            }\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../math/Vec3\":30}],51:[function(_dereq_,module,exports){\nmodule.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n},{}],52:[function(_dereq_,module,exports){\nmodule.exports = TupleDictionary;\n\n/**\n * @class TupleDictionary\n * @constructor\n */\nfunction TupleDictionary() {\n\n    /**\n     * The data storage\n     * @property data\n     * @type {Object}\n     */\n    this.data = { keys:[] };\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nTupleDictionary.prototype.get = function(i, j) {\n    if (i > j) {\n        // swap\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    return this.data[i+'-'+j];\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nTupleDictionary.prototype.set = function(i, j, value) {\n    if (i > j) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    var key = i+'-'+j;\n\n    // Check if key already exists\n    if(!this.get(i,j)){\n        this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n};\n\n/**\n * @method reset\n */\nTupleDictionary.prototype.reset = function() {\n    var data = this.data,\n        keys = data.keys;\n    while(keys.length > 0){\n        var key = keys.pop();\n        delete data[key];\n    }\n};\n\n},{}],53:[function(_dereq_,module,exports){\nfunction Utils(){}\n\nmodule.exports = Utils;\n\n/**\n * Extend an options object with default values.\n * @static\n * @method defaults\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n * @param  {object} defaults An object containing default values.\n * @return {object} The modified options object.\n */\nUtils.defaults = function(options, defaults){\n    options = options || {};\n\n    for(var key in defaults){\n        if(!(key in options)){\n            options[key] = defaults[key];\n        }\n    }\n\n    return options;\n};\n\n},{}],54:[function(_dereq_,module,exports){\nmodule.exports = Vec3Pool;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Pool = _dereq_('./Pool');\n\n/**\n * @class Vec3Pool\n * @constructor\n * @extends Pool\n */\nfunction Vec3Pool(){\n    Pool.call(this);\n    this.type = Vec3;\n}\nVec3Pool.prototype = new Pool();\n\n/**\n * Construct a vector\n * @method constructObject\n * @return {Vec3}\n */\nVec3Pool.prototype.constructObject = function(){\n    return new Vec3();\n};\n\n},{\"../math/Vec3\":30,\"./Pool\":51}],55:[function(_dereq_,module,exports){\nmodule.exports = Narrowphase;\n\nvar AABB = _dereq_('../collision/AABB');\nvar Shape = _dereq_('../shapes/Shape');\nvar Ray = _dereq_('../collision/Ray');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('../solver/Solver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @class Narrowphase\n * @constructor\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo  should move methods to prototype\n */\nfunction Narrowphase(world){\n\n    /**\n     * Internal storage of pooled contact points.\n     * @property {Array} contactPointPool\n     */\n    this.contactPointPool = [];\n\n    this.frictionEquationPool = [];\n\n    this.result = [];\n    this.frictionResult = [];\n\n    /**\n     * Pooled vectors.\n     * @property {Vec3Pool} v3pool\n     */\n    this.v3pool = new Vec3Pool();\n\n    this.world = world;\n    this.currentContactMaterial = null;\n\n    /**\n     * @property {Boolean} enableFrictionReduction\n     */\n    this.enableFrictionReduction = false;\n}\n\n/**\n * Make a contact object, by using the internal pool or creating a new one.\n * @method createContactEquation\n * @return {ContactEquation}\n */\nNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n    var c;\n    if(this.contactPointPool.length){\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n    } else {\n        c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n    var cm = this.currentContactMaterial;\n\n    c.restitution = cm.restitution;\n\n    c.setSpookParams(\n        cm.contactEquationStiffness,\n        cm.contactEquationRelaxation,\n        this.world.dt\n    );\n\n    var matA = si.material || bi.material;\n    var matB = sj.material || bj.material;\n    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n        c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = rsi || si;\n    c.sj = rsj || sj;\n\n    return c;\n};\n\nNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n    var bodyA = contactEquation.bi;\n    var bodyB = contactEquation.bj;\n    var shapeA = contactEquation.si;\n    var shapeB = contactEquation.sj;\n\n    var world = this.world;\n    var cm = this.currentContactMaterial;\n\n    // If friction or restitution were specified in the material, use them\n    var friction = cm.friction;\n    var matA = shapeA.material || bodyA.material;\n    var matB = shapeB.material || bodyB.material;\n    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n        friction = matA.friction * matB.friction;\n    }\n\n    if(friction > 0){\n\n        // Create 2 tangent equations\n        var mug = friction * world.gravity.length();\n        var reducedMass = (bodyA.invMass + bodyB.invMass);\n        if(reducedMass > 0){\n            reducedMass = 1/reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug*reducedMass;\n        c1.maxForce = c2.maxForce = mug*reducedMass;\n\n        // Copy over the relative vectors\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj);\n\n        // Construct tangents\n        contactEquation.ni.tangents(c1.t, c2.t);\n\n        // Set spook params\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\n        c1.enabled = c2.enabled = contactEquation.enabled;\n\n        outArray.push(c1, c2);\n\n        return true;\n    }\n\n    return false;\n};\n\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\n\n// Take the average N latest contact point on the plane.\nNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n    // The last contactEquation\n    var c = this.result[this.result.length - 1];\n\n    // Create the result: two \"average\" friction equations\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n    }\n\n    var f1 = this.frictionResult[this.frictionResult.length - 2];\n    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n\n    var bodyA = c.bi;\n    var bodyB = c.bj;\n    for(var i=0; i!==numContacts; i++){\n        c = this.result[this.result.length - 1 - i];\n        if(c.bodyA !== bodyA){\n            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n    }\n\n    var invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n    f2.ri.copy(f1.ri); // Should be the same\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n    // return eq;\n};\n\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\n\n/**\n * Generate all contacts between a list of body pairs\n * @method getContacts\n * @param {array} p1 Array of body indices\n * @param {array} p2 Array of body indices\n * @param {World} world\n * @param {array} result Array to store generated contacts\n * @param {array} oldcontacts Optional. Array of reusable contact objects\n */\nNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n\n    var qi = tmpQuat1;\n    var qj = tmpQuat2;\n    var xi = tmpVec1;\n    var xj = tmpVec2;\n\n    for(var k=0, N=p1.length; k!==N; k++){\n\n        // Get current collision bodies\n        var bi = p1[k],\n            bj = p2[k];\n\n        // Get contact material\n        var bodyContactMaterial = null;\n        if(bi.material && bj.material){\n            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n        }\n\n        for (var i = 0; i < bi.shapes.length; i++) {\n            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n            xi.vadd(bi.position, xi);\n            var si = bi.shapes[i];\n\n            for (var j = 0; j < bj.shapes.length; j++) {\n\n                // Compute world transform of shapes\n                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n                xj.vadd(bj.position, xj);\n                var sj = bj.shapes[j];\n\n                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n                    continue;\n                }\n\n                // Get collision material\n                var shapeContactMaterial = null;\n                if(si.material && sj.material){\n                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n                }\n\n                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\n                // Get contacts\n                var resolver = this[si.type | sj.type];\n                if(resolver){\n                    if (si.type < sj.type) {\n                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n                    } else {\n                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n                    }\n                }\n            }\n        }\n    }\n};\n\nvar numWarnings = 0;\nvar maxWarnings = 10;\n\nfunction warn(msg){\n    if(numWarnings > maxWarnings){\n        return;\n    }\n\n    numWarnings++;\n\n    console.warn(msg);\n}\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\nNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\nNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\n/**\n * @method sphereSphere\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE] =\nNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have only one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    xj.vsub(xi, r.ni);\n    r.ni.normalize();\n\n    // Contact point locations\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.mult(si.radius, r.ri);\n    r.rj.mult(-sj.radius, r.rj);\n\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n\n    this.result.push(r);\n\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n};\n\n/**\n * @method planeTrimesh\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\nNarrowphase.prototype.planeTrimesh = function(\n    planeShape,\n    trimeshShape,\n    planePos,\n    trimeshPos,\n    planeQuat,\n    trimeshQuat,\n    planeBody,\n    trimeshBody\n){\n    // Make contacts!\n    var v = new Vec3();\n\n    var normal = planeTrimesh_normal;\n    normal.set(0,0,1);\n    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\n    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v);\n\n        // Safe up\n        var v2 = new Vec3();\n        v2.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n        // Check plane side\n        var relpos = planeTrimesh_relpos;\n        v.vsub(planePos, relpos);\n        var dot = normal.dot(relpos);\n\n        if(dot <= 0.0){\n            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\n            r.ni.copy(normal); // Contact normal is the plane normal\n\n            // Get vertex position projected on plane\n            var projected = planeTrimesh_projected;\n            normal.scale(relpos.dot(normal), projected);\n            v.vsub(projected,projected);\n\n            // ri is the projected world position minus plane position\n            r.ri.copy(projected);\n            r.ri.vsub(planeBody.position, r.ri);\n\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj);\n\n            // Store result\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n};\n\n/**\n * @method sphereTrimesh\n * @param  {Shape}      sphereShape\n * @param  {Shape}      trimeshShape\n * @param  {Vec3}       spherePos\n * @param  {Vec3}       trimeshPos\n * @param  {Quaternion} sphereQuat\n * @param  {Quaternion} trimeshQuat\n * @param  {Body}       sphereBody\n * @param  {Body}       trimeshBody\n */\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nvar sphereTrimesh_projected = new Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\nNarrowphase.prototype.sphereTrimesh = function (\n    sphereShape,\n    trimeshShape,\n    spherePos,\n    trimeshPos,\n    sphereQuat,\n    trimeshQuat,\n    sphereBody,\n    trimeshBody\n) {\n\n    var edgeVertexA = sphereTrimesh_edgeVertexA;\n    var edgeVertexB = sphereTrimesh_edgeVertexB;\n    var edgeVector = sphereTrimesh_edgeVector;\n    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    var localSpherePos = sphereTrimesh_localSpherePos;\n    var tmp = sphereTrimesh_tmp;\n    var localSphereAABB = sphereTrimesh_localSphereAABB;\n    var v2 = sphereTrimesh_v2;\n    var relpos = sphereTrimesh_relpos;\n    var triangles = sphereTrimesh_triangles;\n\n    // Convert sphere position to local in the trimesh\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\n    // Get the aabb of the sphere locally in the trimesh\n    var sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(\n        localSpherePos.x - sphereRadius,\n        localSpherePos.y - sphereRadius,\n        localSpherePos.z - sphereRadius\n    );\n    localSphereAABB.upperBound.set(\n        localSpherePos.x + sphereRadius,\n        localSpherePos.y + sphereRadius,\n        localSpherePos.z + sphereRadius\n    );\n\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\n    // Vertices\n    var v = sphereTrimesh_v;\n    var radiusSquared = sphereShape.radius * sphereShape.radius;\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\n            // Check vertex overlap in sphere\n            v.vsub(localSpherePos, relpos);\n\n            if(relpos.norm2() <= radiusSquared){\n\n                // Safe up\n                v2.copy(v);\n                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n                v.vsub(spherePos, relpos);\n\n                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n                r.ni.copy(relpos);\n                r.ni.normalize();\n\n                // ri is the vector from sphere center to the sphere surface\n                r.ri.copy(r.ni);\n                r.ri.scale(sphereShape.radius, r.ri);\n                r.ri.vadd(spherePos, r.ri);\n                r.ri.vsub(sphereBody.position, r.ri);\n\n                r.rj.copy(v);\n                r.rj.vsub(trimeshBody.position, r.rj);\n\n                // Store result\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    // Check all edges\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\n            // Project sphere position to the edge\n            localSpherePos.vsub(edgeVertexB, tmp);\n            var positionAlongEdgeB = tmp.dot(edgeVector);\n\n            localSpherePos.vsub(edgeVertexA, tmp);\n            var positionAlongEdgeA = tmp.dot(edgeVector);\n\n            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\n                // Now check the orthogonal distance from edge to sphere center\n                localSpherePos.vsub(edgeVertexA, tmp);\n\n                edgeVectorUnit.copy(edgeVector);\n                edgeVectorUnit.normalize();\n                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\n                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n                tmp.vadd(edgeVertexA, tmp);\n\n                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n                var dist = tmp.distanceTo(localSpherePos);\n                if(dist < sphereShape.radius){\n                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n                    tmp.vsub(localSpherePos, r.ni);\n                    r.ni.normalize();\n                    r.ni.scale(sphereShape.radius, r.ri);\n\n                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n                    tmp.vsub(trimeshBody.position, r.rj);\n\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n\n    // Triangle faces\n    var va = sphereTrimesh_va;\n    var vb = sphereTrimesh_vb;\n    var vc = sphereTrimesh_vc;\n    var normal = sphereTrimesh_normal;\n    for(var i=0, N = triangles.length; i !== N; i++){\n        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n        trimeshShape.getNormal(triangles[i], normal);\n        localSpherePos.vsub(va, tmp);\n        var dist = tmp.dot(normal);\n        normal.scale(dist, tmp);\n        localSpherePos.vsub(tmp, tmp);\n\n        // tmp is now the sphere position projected to the triangle plane\n        dist = tmp.distanceTo(localSpherePos);\n        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n\n    triangles.length = 0;\n};\n\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3();\n\n/**\n * @method spherePlane\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\nNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    r.ni.set(0,0,1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n    r.ni.normalize(); // Needed?\n\n    // Vector from sphere center to contact point\n    r.ni.mult(si.radius, r.ri);\n\n    // Project down sphere on plane\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\n    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\n        // Make it relative to the body\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p){\n    var positiveResult = null;\n    var N = verts.length;\n    for(var i=0; i!==N; i++){\n        var v = verts[i];\n\n        // Get edge to the next vertex\n        var edge = pointInPolygon_edge;\n        verts[(i+1) % (N)].vsub(v,edge);\n\n        // Get cross product between polygon normal and the edge\n        var edge_x_normal = pointInPolygon_edge_x_normal;\n        //var edge_x_normal = new Vec3();\n        edge.cross(normal,edge_x_normal);\n\n        // Get vector between point and current vertex\n        var vertex_to_p = pointInPolygon_vtp;\n        p.vsub(v,vertex_to_p);\n\n        // This dot product determines which side of the edge the point is\n        var r = edge_x_normal.dot(vertex_to_p);\n\n        // If all such dot products have same sign, we are inside the polygon.\n        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n            if(positiveResult===null){\n                positiveResult = r>0;\n            }\n            continue;\n        } else {\n            return false; // Encountered some other sign. Exit.\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return true;\n}\n\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\n\n/**\n * @method sphereBox\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\nNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n\n    // we refer to the box as body j\n    var sides = sphereBox_sides;\n    xi.vsub(xj,box_to_sphere);\n    sj.getSideNormals(sides,qj);\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // Check side (plane) intersections\n    var found = false;\n\n    // Store the resulting side penetration info\n    var side_ns = sphereBox_side_ns;\n    var side_ns1 = sphereBox_side_ns1;\n    var side_ns2 = sphereBox_side_ns2;\n    var side_h = null;\n    var side_penetrations = 0;\n    var side_dot1 = 0;\n    var side_dot2 = 0;\n    var side_distance = null;\n    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n\n        var h = ns.norm();\n        ns.normalize();\n\n        // The normal/distance dot product tells which side of the plane we are\n        var dot = box_to_sphere.dot(ns);\n\n        if(dot<h+R && dot>0){\n            // Intersects plane. Now check the other two dimensions\n            var ns1 = sphereBox_ns1;\n            var ns2 = sphereBox_ns2;\n            ns1.copy(sides[(idx+1)%3]);\n            ns2.copy(sides[(idx+2)%3]);\n            var h1 = ns1.norm();\n            var h2 = ns2.norm();\n            ns1.normalize();\n            ns2.normalize();\n            var dot1 = box_to_sphere.dot(ns1);\n            var dot2 = box_to_sphere.dot(ns2);\n            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n                var dist = Math.abs(dot-h-R);\n                if(side_distance===null || dist < side_distance){\n                    side_distance = dist;\n                    side_dot1 = dot1;\n                    side_dot2 = dot2;\n                    side_h = h;\n                    side_ns.copy(ns);\n                    side_ns1.copy(ns1);\n                    side_ns2.copy(ns2);\n                    side_penetrations++;\n                }\n            }\n        }\n    }\n    if(side_penetrations){\n        found = true;\n        var r = this.createContactEquation(bi,bj,si,sj);\n        side_ns.mult(-R,r.ri); // Sphere r\n        r.ni.copy(side_ns);\n        r.ni.negate(r.ni); // Normal should be out of sphere\n        side_ns.mult(side_h,side_ns);\n        side_ns1.mult(side_dot1,side_ns1);\n        side_ns.vadd(side_ns1,side_ns);\n        side_ns2.mult(side_dot2,side_ns2);\n        side_ns.vadd(side_ns2,r.rj);\n\n        // Make relative to bodies\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n\n    // Check corners\n    var rj = v3pool.get();\n    var sphere_to_corner = sphereBox_sphere_to_corner;\n    for(var j=0; j!==2 && !found; j++){\n        for(var k=0; k!==2 && !found; k++){\n            for(var l=0; l!==2 && !found; l++){\n                rj.set(0,0,0);\n                if(j){\n                    rj.vadd(sides[0],rj);\n                } else {\n                    rj.vsub(sides[0],rj);\n                }\n                if(k){\n                    rj.vadd(sides[1],rj);\n                } else {\n                    rj.vsub(sides[1],rj);\n                }\n                if(l){\n                    rj.vadd(sides[2],rj);\n                } else {\n                    rj.vsub(sides[2],rj);\n                }\n\n                // World position of corner\n                xj.vadd(rj,sphere_to_corner);\n                sphere_to_corner.vsub(xi,sphere_to_corner);\n\n                if(sphere_to_corner.norm2() < R*R){\n                    found = true;\n                    var r = this.createContactEquation(bi,bj,si,sj);\n                    r.ri.copy(sphere_to_corner);\n                    r.ri.normalize();\n                    r.ni.copy(r.ri);\n                    r.ri.mult(R,r.ri);\n                    r.rj.copy(rj);\n\n                    // Make relative to bodies\n                    r.ri.vadd(xi, r.ri);\n                    r.ri.vsub(bi.position, r.ri);\n                    r.rj.vadd(xj, r.rj);\n                    r.rj.vsub(bj.position, r.rj);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(rj);\n    rj = null;\n\n    // Check edges\n    var edgeTangent = v3pool.get();\n    var edgeCenter = v3pool.get();\n    var r = v3pool.get(); // r = edge center to sphere center\n    var orthogonal = v3pool.get();\n    var dist = v3pool.get();\n    var Nsides = sides.length;\n    for(var j=0; j!==Nsides && !found; j++){\n        for(var k=0; k!==Nsides && !found; k++){\n            if(j%3 !== k%3){\n                // Get edge tangent\n                sides[k].cross(sides[j],edgeTangent);\n                edgeTangent.normalize();\n                sides[j].vadd(sides[k], edgeCenter);\n                r.copy(xi);\n                r.vsub(edgeCenter,r);\n                r.vsub(xj,r);\n                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\n                // Find the third side orthogonal to this one\n                var l = 0;\n                while(l===j%3 || l===k%3){\n                    l++;\n                }\n\n                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n                dist.copy(xi);\n                dist.vsub(orthogonal,dist);\n                dist.vsub(edgeCenter,dist);\n                dist.vsub(xj,dist);\n\n                // Distances in tangent direction and distance in the plane orthogonal to it\n                var tdist = Math.abs(orthonorm);\n                var ndist = dist.norm();\n\n                if(tdist < sides[l].norm() && ndist<R){\n                    found = true;\n                    var res = this.createContactEquation(bi,bj,si,sj);\n                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n                    res.rj.copy(res.rj);\n                    dist.negate(res.ni);\n                    res.ni.normalize();\n\n                    res.ri.copy(res.rj);\n                    res.ri.vadd(xj,res.ri);\n                    res.ri.vsub(xi,res.ri);\n                    res.ri.normalize();\n                    res.ri.mult(R,res.ri);\n\n                    // Make relative to bodies\n                    res.ri.vadd(xi, res.ri);\n                    res.ri.vsub(bi.position, res.ri);\n                    res.rj.vadd(xj, res.rj);\n                    res.rj.vsub(bj.position, res.rj);\n\n                    this.result.push(res);\n                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n};\n\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\n\n/**\n * @method sphereConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n    xi.vsub(xj,convex_to_sphere);\n    var normals = sj.faceNormals;\n    var faces = sj.faces;\n    var verts = sj.vertices;\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //     return;\n    // }\n\n    // Check corners\n    for(var i=0; i!==verts.length; i++){\n        var v = verts[i];\n\n        // World position of corner\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v,worldCorner);\n        xj.vadd(worldCorner,worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if(sphere_to_corner.norm2() < R * R){\n            found = true;\n            var r = this.createContactEquation(bi,bj,si,sj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.mult(R,r.ri);\n            worldCorner.vsub(xj,r.rj);\n\n            // Should be relative to the body.\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n\n            // Should be relative to the body.\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n            return;\n        }\n    }\n\n    // Check side (plane) intersections\n    var found = false;\n    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n        var normal = normals[i];\n        var face = faces[i];\n\n        // Get world-transformed normal of the face\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal,worldNormal);\n\n        // Get a world vertex from the face\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]],worldPoint);\n        worldPoint.vadd(xj,worldPoint);\n\n        // Get a point on the sphere, closest to the face normal\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\n        // Vector from a face point to the closest point on the sphere\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\n        // The penetration. Negative value means overlap.\n        var penetration = penetrationVec.dot(worldNormal);\n\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n\n        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n            // Intersects plane. Now check if the sphere is inside the face polygon\n            var faceVerts = []; // Face vertices, in world coords\n            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n                var worldVertex = v3pool.get();\n                qj.vmult(verts[face[j]], worldVertex);\n                xj.vadd(worldVertex,worldVertex);\n                faceVerts.push(worldVertex);\n            }\n\n            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n                found = true;\n                var r = this.createContactEquation(bi,bj,si,sj);\n\n                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n                var penetrationVec2 = v3pool.get();\n                worldNormal.mult(-penetration, penetrationVec2);\n                var penetrationSpherePoint = v3pool.get();\n                worldNormal.mult(-R, penetrationSpherePoint);\n\n                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n                xi.vsub(xj,r.rj);\n                r.rj.vadd(penetrationSpherePoint,r.rj);\n                r.rj.vadd(penetrationVec2 , r.rj);\n\n                // Should be relative to the body.\n                r.rj.vadd(xj, r.rj);\n                r.rj.vsub(bj.position, r.rj);\n\n                // Should be relative to the body.\n                r.ri.vadd(xi, r.ri);\n                r.ri.vsub(bi.position, r.ri);\n\n                v3pool.release(penetrationVec2);\n                v3pool.release(penetrationSpherePoint);\n\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                // Release world vertices\n                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                    v3pool.release(faceVerts[j]);\n                }\n\n                return; // We only expect *one* face contact\n            } else {\n                // Edge?\n                for(var j=0; j!==face.length; j++){\n\n                    // Get two world transformed vertices\n                    var v1 = v3pool.get();\n                    var v2 = v3pool.get();\n                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n                    xj.vadd(v1, v1);\n                    xj.vadd(v2, v2);\n\n                    // Construct edge vector\n                    var edge = sphereConvex_edge;\n                    v2.vsub(v1,edge);\n\n                    // Construct the same vector, but normalized\n                    var edgeUnit = sphereConvex_edgeUnit;\n                    edge.unit(edgeUnit);\n\n                    // p is xi projected onto the edge\n                    var p = v3pool.get();\n                    var v1_to_xi = v3pool.get();\n                    xi.vsub(v1, v1_to_xi);\n                    var dot = v1_to_xi.dot(edgeUnit);\n                    edgeUnit.mult(dot, p);\n                    p.vadd(v1, p);\n\n                    // Compute a vector from p to the center of the sphere\n                    var xi_to_p = v3pool.get();\n                    p.vsub(xi, xi_to_p);\n\n                    // Collision if the edge-sphere distance is less than the radius\n                    // AND if p is in between v1 and v2\n                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n                        // Edge contact!\n                        var r = this.createContactEquation(bi,bj,si,sj);\n                        p.vsub(xj,r.rj);\n\n                        p.vsub(xi,r.ni);\n                        r.ni.normalize();\n\n                        r.ni.mult(R,r.ri);\n\n                        // Should be relative to the body.\n                        r.rj.vadd(xj, r.rj);\n                        r.rj.vsub(bj.position, r.rj);\n\n                        // Should be relative to the body.\n                        r.ri.vadd(xi, r.ri);\n                        r.ri.vsub(bi.position, r.ri);\n\n                        this.result.push(r);\n                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                        // Release world vertices\n                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                            v3pool.release(faceVerts[j]);\n                        }\n\n                        v3pool.release(v1);\n                        v3pool.release(v2);\n                        v3pool.release(p);\n                        v3pool.release(xi_to_p);\n                        v3pool.release(v1_to_xi);\n\n                        return;\n                    }\n\n                    v3pool.release(v1);\n                    v3pool.release(v2);\n                    v3pool.release(p);\n                    v3pool.release(xi_to_p);\n                    v3pool.release(v1_to_xi);\n                }\n            }\n\n            // Release world vertices\n            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                v3pool.release(faceVerts[j]);\n            }\n        }\n    }\n};\n\nvar planeBox_normal = new Vec3();\nvar plane_to_corner = new Vec3();\n\n/**\n * @method planeBox\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\nNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n};\n\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\n\n/**\n * @method planeConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.planeConvex = function(\n    planeShape,\n    convexShape,\n    planePosition,\n    convexPosition,\n    planeQuat,\n    convexQuat,\n    planeBody,\n    convexBody\n){\n    // Simply return the points behind the plane.\n    var worldVertex = planeConvex_v,\n        worldNormal = planeConvex_normal;\n    worldNormal.set(0,0,1);\n    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\n    var numContacts = 0;\n    var relpos = planeConvex_relpos;\n    for(var i = 0; i !== convexShape.vertices.length; i++){\n\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n\n        var dot = worldNormal.dot(relpos);\n        if(dot <= 0.0){\n\n            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\n            // Get vertex position projected on plane\n            var projected = planeConvex_projected;\n            worldNormal.mult(worldNormal.dot(relpos),projected);\n            worldVertex.vsub(projected, projected);\n            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\n            // rj is now just the vector from the convex center to the vertex\n            worldVertex.vsub(convexPosition, r.rj);\n\n            // Make it relative to the body\n            r.ri.vadd(planePosition, r.ri);\n            r.ri.vsub(planeBody.position, r.ri);\n            r.rj.vadd(convexPosition, r.rj);\n            r.rj.vsub(convexBody.position, r.rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    if(this.enableFrictionReduction && numContacts){\n        this.createFrictionFromAverage(numContacts);\n    }\n};\n\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\n\n/**\n * @method convexConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n    var sepAxis = convexConvex_sepAxis;\n\n    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n        return;\n    }\n\n    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n        var numContacts = 0;\n        for(var j = 0; j !== res.length; j++){\n            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n                ri = r.ri,\n                rj = r.rj;\n            sepAxis.negate(r.ni);\n            res[j].normal.negate(q);\n            q.mult(res[j].depth, q);\n            res[j].point.vadd(q, ri);\n            rj.copy(res[j].point);\n\n            // Contact points are in world coordinates. Transform back to relative\n            ri.vsub(xi,ri);\n            rj.vsub(xj,rj);\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n        if(this.enableFrictionReduction && numContacts){\n            this.createFrictionFromAverage(numContacts);\n        }\n    }\n};\n\n\n/**\n * @method convexTrimesh\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\n// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n//     var sepAxis = convexConvex_sepAxis;\n\n//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n//         return;\n//     }\n\n//     // Construct a temp hull for each triangle\n//     var hullB = new ConvexPolyhedron();\n\n//     hullB.faces = [[0,1,2]];\n//     var va = new Vec3();\n//     var vb = new Vec3();\n//     var vc = new Vec3();\n//     hullB.vertices = [\n//         va,\n//         vb,\n//         vc\n//     ];\n\n//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\n//         var triangleNormal = new Vec3();\n//         sj.getNormal(i, triangleNormal);\n//         hullB.faceNormals = [triangleNormal];\n\n//         sj.getTriangleVertices(i, va, vb, vc);\n\n//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n//         if(!d){\n//             triangleNormal.scale(-1, triangleNormal);\n//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\n//             if(!d){\n//                 continue;\n//             }\n//         }\n\n//         var res = [];\n//         var q = convexConvex_q;\n//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n//         for(var j = 0; j !== res.length; j++){\n//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n//                 ri = r.ri,\n//                 rj = r.rj;\n//             r.ni.copy(triangleNormal);\n//             r.ni.negate(r.ni);\n//             res[j].normal.negate(q);\n//             q.mult(res[j].depth, q);\n//             res[j].point.vadd(q, ri);\n//             rj.copy(res[j].point);\n\n//             // Contact points are in world coordinates. Transform back to relative\n//             ri.vsub(xi,ri);\n//             rj.vsub(xj,rj);\n\n//             // Make relative to bodies\n//             ri.vadd(xi, ri);\n//             ri.vsub(bi.position, ri);\n//             rj.vadd(xj, rj);\n//             rj.vsub(bj.position, rj);\n\n//             result.push(r);\n//         }\n//     }\n// };\n\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\n\n/**\n * @method particlePlane\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\nNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var normal = particlePlane_normal;\n    normal.set(0,0,1);\n    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n    var relpos = particlePlane_relpos;\n    xi.vsub(bj.position,relpos);\n    var dot = normal.dot(relpos);\n    if(dot <= 0.0){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n\n        // Get particle position projected on plane\n        var projected = particlePlane_projected;\n        normal.mult(normal.dot(xi),projected);\n        xi.vsub(projected,projected);\n        //projected.vadd(bj.position,projected);\n\n        // rj is now the projected world position minus plane position\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\nvar particleSphere_normal = new Vec3();\n\n/**\n * @method particleSphere\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\nNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    // The normal is the unit vector from sphere center to particle center\n    var normal = particleSphere_normal;\n    normal.set(0,0,1);\n    xi.vsub(xj,normal);\n    var lengthSquared = normal.norm2();\n\n    if(lengthSquared <= sj.radius * sj.radius){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.mult(sj.radius,r.rj);\n        r.ni.copy(normal); // Contact normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// WIP\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nvar convexParticle_normal = new Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\n\n/**\n * @method convexParticle\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var penetratedFaceIndex = -1;\n    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n    var minPenetration = null;\n    var numDetectedFaces = 0;\n\n    // Convert particle position xi to local coords in the convex\n    var local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj,local); // Convert position to relative the convex origin\n    qj.conjugate(cqj);\n    cqj.vmult(local,local);\n\n    if(sj.pointIsInside(local)){\n\n        if(sj.worldVerticesNeedsUpdate){\n            sj.computeWorldVertices(xj,qj);\n        }\n        if(sj.worldFaceNormalsNeedsUpdate){\n            sj.computeWorldFaceNormals(qj);\n        }\n\n        // For each world polygon in the polyhedra\n        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\n            // Construct world face vertices\n            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n            var normal = sj.worldFaceNormals[i];\n\n            // Check how much the particle penetrates the polygon plane.\n            xi.vsub(verts[0],convexParticle_vertexToParticle);\n            var penetration = -normal.dot(convexParticle_vertexToParticle);\n            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n                minPenetration = penetration;\n                penetratedFaceIndex = i;\n                penetratedFaceNormal.copy(normal);\n                numDetectedFaces++;\n            }\n        }\n\n        if(penetratedFaceIndex!==-1){\n            // Setup contact\n            var r = this.createContactEquation(bi,bj,si,sj);\n            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\n            // rj is the particle position projected to the face\n            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n            r.rj.copy(worldPenetrationVec);\n            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n            //projectedToFace.copy(r.rj);\n\n            //qj.vmult(r.rj,r.rj);\n            penetratedFaceNormal.negate( r.ni ); // Contact normal\n            r.ri.set(0,0,0); // Center of particle\n\n            var ri = r.ri,\n                rj = r.rj;\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n        }\n    }\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n};\n\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\n\n/**\n * @method convexHeightfield\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.convexHeightfield = function (\n    convexShape,\n    hfShape,\n    convexPos,\n    hfPos,\n    convexQuat,\n    hfQuat,\n    convexBody,\n    hfBody\n){\n    var data = hfShape.data,\n        w = hfShape.elementSize,\n        radius = convexShape.boundingSphereRadius,\n        worldPillarOffset = convexHeightfield_tmp2,\n        faceList = convexHeightfield_faceList;\n\n    // Get sphere position to heightfield local!\n    var localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n        return;\n    }\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n        }\n    }\n};\n\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\n\n/**\n * @method sphereHeightfield\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.sphereHeightfield = function (\n    sphereShape,\n    hfShape,\n    spherePos,\n    hfPos,\n    sphereQuat,\n    hfQuat,\n    sphereBody,\n    hfBody\n){\n    var data = hfShape.data,\n        radius = sphereShape.radius,\n        w = hfShape.elementSize,\n        worldPillarOffset = sphereHeightfield_tmp2;\n\n    // Get sphere position to heightfield local!\n    var localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n        return;\n    }\n\n    var result = this.result;\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            var numContactsBefore = result.length;\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            var numContacts = result.length - numContactsBefore;\n\n            if(numContacts > 2){\n                return;\n            }\n            /*\n            // Skip all but 1\n            for (var k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n            */\n        }\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/Ray\":9,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43,\"../solver/Solver\":47,\"../utils/Vec3Pool\":54}],56:[function(_dereq_,module,exports){\n/* global performance */\n\nmodule.exports = World;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar GSSolver = _dereq_('../solver/GSSolver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\nvar Narrowphase = _dereq_('./Narrowphase');\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');\nvar Material = _dereq_('../material/Material');\nvar ContactMaterial = _dereq_('../material/ContactMaterial');\nvar Body = _dereq_('../objects/Body');\nvar TupleDictionary = _dereq_('../utils/TupleDictionary');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar AABB = _dereq_('../collision/AABB');\nvar Ray = _dereq_('../collision/Ray');\nvar NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');\n\n/**\n * The physics world\n * @class World\n * @constructor\n * @extends EventTarget\n */\nfunction World(){\n    EventTarget.apply(this);\n\n    /**\n     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n     * @property {Number} dt\n     */\n    this.dt = -1;\n\n    /**\n     * Makes bodies go to sleep when they've been inactive\n     * @property allowSleep\n     * @type {Boolean}\n     */\n    this.allowSleep = false;\n\n    /**\n     * All the current contacts (instances of ContactEquation) in the world.\n     * @property contacts\n     * @type {Array}\n     */\n    this.contacts = [];\n    this.frictionEquations = [];\n\n    /**\n     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n     * @property quatNormalizeSkip\n     * @type {Number}\n     */\n    this.quatNormalizeSkip = 0;\n\n    /**\n     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n     * @property quatNormalizeFast\n     * @type {Boolean}\n     * @see Quaternion.normalizeFast\n     * @see Quaternion.normalize\n     */\n    this.quatNormalizeFast = false;\n\n    /**\n     * The wall-clock time since simulation start\n     * @property time\n     * @type {Number}\n     */\n    this.time = 0.0;\n\n    /**\n     * Number of timesteps taken since start\n     * @property stepnumber\n     * @type {Number}\n     */\n    this.stepnumber = 0;\n\n    /// Default and last timestep sizes\n    this.default_dt = 1/60;\n\n    this.nextId = 0;\n    /**\n     * @property gravity\n     * @type {Vec3}\n     */\n    this.gravity = new Vec3();\n\n    /**\n     * @property broadphase\n     * @type {Broadphase}\n     */\n    this.broadphase = new NaiveBroadphase();\n\n    /**\n     * @property bodies\n     * @type {Array}\n     */\n    this.bodies = [];\n\n    /**\n     * @property solver\n     * @type {Solver}\n     */\n    this.solver = new GSSolver();\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    /**\n     * @property narrowphase\n     * @type {Narrowphase}\n     */\n    this.narrowphase = new Narrowphase(this);\n\n    /**\n     * @property {ArrayCollisionMatrix} collisionMatrix\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\n    /**\n     * CollisionMatrix from the previous step.\n     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\n    /**\n     * All added materials\n     * @property materials\n     * @type {Array}\n     */\n    this.materials = [];\n\n    /**\n     * @property contactmaterials\n     * @type {Array}\n     */\n    this.contactmaterials = [];\n\n    /**\n     * Used to look up a ContactMaterial given two instances of Material.\n     * @property {TupleDictionary} contactMaterialTable\n     */\n    this.contactMaterialTable = new TupleDictionary();\n\n    this.defaultMaterial = new Material(\"default\");\n\n    /**\n     * This contact material is used if no suitable contactmaterial is found for a contact.\n     * @property defaultContactMaterial\n     * @type {ContactMaterial}\n     */\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\n    /**\n     * @property doProfiling\n     * @type {Boolean}\n     */\n    this.doProfiling = false;\n\n    /**\n     * @property profile\n     * @type {Object}\n     */\n    this.profile = {\n        solve:0,\n        makeContactConstraints:0,\n        broadphase:0,\n        integrate:0,\n        narrowphase:0,\n    };\n\n    /**\n     * @property subsystems\n     * @type {Array}\n     */\n    this.subsystems = [];\n\n    this.addBodyEvent = {\n        type:\"addBody\",\n        body : null,\n    };\n\n    this.removeBodyEvent = {\n        type:\"removeBody\",\n        body : null,\n    };\n}\nWorld.prototype = new EventTarget();\n\n// Temp stuff\nvar tmpAABB1 = new AABB();\nvar tmpArray1 = [];\nvar tmpRay = new Ray();\n\n/**\n * Get the contact material between materials m1 and m2\n * @method getContactMaterial\n * @param {Material} m1\n * @param {Material} m2\n * @return {ContactMaterial} The contact material if it was found.\n */\nWorld.prototype.getContactMaterial = function(m1,m2){\n    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n};\n\n/**\n * Get number of objects in the world.\n * @method numObjects\n * @return {Number}\n * @deprecated\n */\nWorld.prototype.numObjects = function(){\n    return this.bodies.length;\n};\n\n/**\n * Store old collision state info\n * @method collisionMatrixTick\n */\nWorld.prototype.collisionMatrixTick = function(){\n\tvar temp = this.collisionMatrixPrevious;\n\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\tthis.collisionMatrix = temp;\n\tthis.collisionMatrix.reset();\n};\n\n/**\n * Add a rigid body to the simulation.\n * @method add\n * @param {Body} body\n * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n * @todo Adding an array of bodies should be possible. This would save some loops too\n * @deprecated Use .addBody instead\n */\nWorld.prototype.add = World.prototype.addBody = function(body){\n    if(this.bodies.indexOf(body) !== -1){\n        return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if(body instanceof Body){\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n    }\n\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.dispatchEvent(this.addBodyEvent);\n};\n\n/**\n * Add a constraint to the simulation.\n * @method addConstraint\n * @param {Constraint} c\n */\nWorld.prototype.addConstraint = function(c){\n    this.constraints.push(c);\n};\n\n/**\n * Removes a constraint\n * @method removeConstraint\n * @param {Constraint} c\n */\nWorld.prototype.removeConstraint = function(c){\n    var idx = this.constraints.indexOf(c);\n    if(idx!==-1){\n        this.constraints.splice(idx,1);\n    }\n};\n\n/**\n * Raycast test\n * @method rayTest\n * @param {Vec3} from\n * @param {Vec3} to\n * @param {Function|RaycastResult} result\n * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n */\nWorld.prototype.rayTest = function(from, to, result){\n    if(result instanceof RaycastResult){\n        // Do raycastclosest\n        this.raycastClosest(from, to, {\n            skipBackfaces: true\n        }, result);\n    } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n            skipBackfaces: true\n        }, result);\n    }\n};\n\n/**\n * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n * @method raycastAll\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {Function} callback\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAll = function(from, to, options, callback){\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n * @method raycastAny\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAny = function(from, to, options, result){\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and return information of the closest hit.\n * @method raycastClosest\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastClosest = function(from, to, options, result){\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method remove\n * @param {Body} body\n * @deprecated Use .removeBody instead\n */\nWorld.prototype.remove = function(body){\n    body.world = null;\n    var n = this.bodies.length-1,\n        bodies = this.bodies,\n        idx = bodies.indexOf(body);\n    if(idx !== -1){\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\n        // Recompute index\n        for(var i=0; i!==bodies.length; i++){\n            bodies[i].index = i;\n        }\n\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        this.dispatchEvent(this.removeBodyEvent);\n    }\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method removeBody\n * @param {Body} body\n */\nWorld.prototype.removeBody = World.prototype.remove;\n\n/**\n * Adds a material to the World.\n * @method addMaterial\n * @param {Material} m\n * @todo Necessary?\n */\nWorld.prototype.addMaterial = function(m){\n    this.materials.push(m);\n};\n\n/**\n * Adds a contact material to the World\n * @method addContactMaterial\n * @param {ContactMaterial} cmat\n */\nWorld.prototype.addContactMaterial = function(cmat) {\n\n    // Add contact material\n    this.contactmaterials.push(cmat);\n\n    // Add current contact material to the material table\n    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n};\n\n// performance.now()\nif(typeof performance === 'undefined'){\n    performance = {};\n}\nif(!performance.now){\n    var nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = function(){\n        return Date.now() - nowOffset;\n    };\n}\n\nvar step_tmp1 = new Vec3();\n\n/**\n * Step the physics world forward in time.\n *\n * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n *\n * @method step\n * @param {Number} dt                       The fixed time step size to use.\n * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n *\n * @example\n *     // fixed timestepping without interpolation\n *     world.step(1/60);\n *\n * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n */\nWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n    maxSubSteps = maxSubSteps || 10;\n    timeSinceLastCalled = timeSinceLastCalled || 0;\n\n    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\n        this.internalStep(dt);\n\n        // Increment time\n        this.time += dt;\n\n    } else {\n\n        // Compute the number of fixed steps we should have taken since the last step\n        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n        internalSteps = Math.min(internalSteps,maxSubSteps);\n\n        // Do some fixed steps to catch up\n        var t0 = performance.now();\n        for(var i=0; i!==internalSteps; i++){\n            this.internalStep(dt);\n            if(performance.now() - t0 > dt * 1000){\n                // We are slower than real-time. Better bail out.\n                break;\n            }\n        }\n\n        // Increment internal clock\n        this.time += timeSinceLastCalled;\n\n        // Compute \"Left over\" time step\n        var h = this.time % dt;\n        var h_div_dt = h / dt;\n        var interpvelo = step_tmp1;\n        var bodies = this.bodies;\n\n        for(var j=0; j !== bodies.length; j++){\n            var b = bodies[j];\n            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\n                // Interpolate\n                b.position.vsub(b.previousPosition, interpvelo);\n                interpvelo.scale(h_div_dt, interpvelo);\n                b.position.vadd(interpvelo, b.interpolatedPosition);\n\n                // TODO: interpolate quaternion\n                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\n            } else {\n\n                // For static bodies, just copy. Who else will do it?\n                b.interpolatedPosition.copy(b.position);\n                b.interpolatedQuaternion.copy(b.quaternion);\n            }\n        }\n    }\n};\n\n/**\n * Step the simulation\n * @method step\n * @param {Number} dt\n */\nvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n    World_step_preStepEvent = {type:\"preStep\"},\n    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n    World_step_oldContacts = [], // Pools for unused objects\n    World_step_frictionEquationPool = [],\n    World_step_p1 = [], // Reusable arrays for collision pairs\n    World_step_p2 = [],\n    World_step_gvec = new Vec3(), // Temporary vectors and quats\n    World_step_vi = new Vec3(),\n    World_step_vj = new Vec3(),\n    World_step_wi = new Vec3(),\n    World_step_wj = new Vec3(),\n    World_step_t1 = new Vec3(),\n    World_step_t2 = new Vec3(),\n    World_step_rixn = new Vec3(),\n    World_step_rjxn = new Vec3(),\n    World_step_step_q = new Quaternion(),\n    World_step_step_w = new Quaternion(),\n    World_step_step_wq = new Quaternion(),\n    invI_tau_dt = new Vec3();\nWorld.prototype.internalStep = function(dt){\n    this.dt = dt;\n\n    var world = this,\n        that = this,\n        contacts = this.contacts,\n        p1 = World_step_p1,\n        p2 = World_step_p2,\n        N = this.numObjects(),\n        bodies = this.bodies,\n        solver = this.solver,\n        gravity = this.gravity,\n        doProfiling = this.doProfiling,\n        profile = this.profile,\n        DYNAMIC = Body.DYNAMIC,\n        profilingStart,\n        constraints = this.constraints,\n        frictionEquationPool = World_step_frictionEquationPool,\n        gnorm = gravity.norm(),\n        gx = gravity.x,\n        gy = gravity.y,\n        gz = gravity.z,\n        i=0;\n\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add gravity to all objects\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var f = bi.force, m = bi.mass;\n            f.x += m*gx;\n            f.y += m*gy;\n            f.z += m*gz;\n        }\n    }\n\n    // Update subsystems\n    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n        this.subsystems[i].update();\n    }\n\n    // Collision detection\n    if(doProfiling){ profilingStart = performance.now(); }\n    p1.length = 0; // Clean up pair arrays from last step\n    p2.length = 0;\n    this.broadphase.collisionPairs(this,p1,p2);\n    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\n    // Remove constrained pairs with collideConnected == false\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        if(!c.collideConnected){\n            for(var j = p1.length-1; j>=0; j-=1){\n                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n                    p1.splice(j, 1);\n                    p2.splice(j, 1);\n                }\n            }\n        }\n    }\n\n    this.collisionMatrixTick();\n\n    // Generate contacts\n    if(doProfiling){ profilingStart = performance.now(); }\n    var oldcontacts = World_step_oldContacts;\n    var NoldContacts = contacts.length;\n\n    for(i=0; i!==NoldContacts; i++){\n        oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n\n    // Transfer FrictionEquation from current list to the pool for reuse\n    var NoldFrictionEquations = this.frictionEquations.length;\n    for(i=0; i!==NoldFrictionEquations; i++){\n        frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n\n    this.narrowphase.getContacts(\n        p1,\n        p2,\n        this,\n        contacts,\n        oldcontacts, // To be reused\n        this.frictionEquations,\n        frictionEquationPool\n    );\n\n    if(doProfiling){\n        profile.narrowphase = performance.now() - profilingStart;\n    }\n\n    // Loop over all collisions\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add all friction eqs\n    for (var i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n    }\n\n    var ncontacts = contacts.length;\n    for(var k=0; k!==ncontacts; k++){\n\n        // Current contact\n        var c = contacts[k];\n\n        // Get current collision indeces\n        var bi = c.bi,\n            bj = c.bj,\n            si = c.si,\n            sj = c.sj;\n\n        // Get collision properties\n        var cm;\n        if(bi.material && bj.material){\n            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n        } else {\n            cm = this.defaultContactMaterial;\n        }\n\n        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        var mu = cm.friction;\n        // c.restitution = cm.restitution;\n\n        // If friction or restitution were specified in the material, use them\n        if(bi.material && bj.material){\n            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n                mu = bi.material.friction * bj.material.friction;\n            }\n\n            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n                c.restitution = bi.material.restitution * bj.material.restitution;\n            }\n        }\n\n\t\t// c.setSpookParams(\n  //           cm.contactEquationStiffness,\n  //           cm.contactEquationRelaxation,\n  //           dt\n  //       );\n\n\t\tsolver.addEquation(c);\n\n\t\t// // Add friction constraint equation\n\t\t// if(mu > 0){\n\n\t\t// \t// Create 2 tangent equations\n\t\t// \tvar mug = mu * gnorm;\n\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t// \tif(reducedMass > 0){\n\t\t// \t\treducedMass = 1/reducedMass;\n\t\t// \t}\n\t\t// \tvar pool = frictionEquationPool;\n\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tthis.frictionEquations.push(c1, c2);\n\n\t\t// \tc1.bi = c2.bi = bi;\n\t\t// \tc1.bj = c2.bj = bj;\n\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\n\t\t// \t// Copy over the relative vectors\n\t\t// \tc1.ri.copy(c.ri);\n\t\t// \tc1.rj.copy(c.rj);\n\t\t// \tc2.ri.copy(c.ri);\n\t\t// \tc2.rj.copy(c.rj);\n\n\t\t// \t// Construct tangents\n\t\t// \tc.ni.tangents(c1.t, c2.t);\n\n  //           // Set spook params\n  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\n  //           c1.enabled = c2.enabled = c.enabled;\n\n\t\t// \t// Add equations to solver\n\t\t// \tsolver.addEquation(c1);\n\t\t// \tsolver.addEquation(c2);\n\t\t// }\n\n        if( bi.allowSleep &&\n            bi.type === Body.DYNAMIC &&\n            bi.sleepState  === Body.SLEEPING &&\n            bj.sleepState  === Body.AWAKE &&\n            bj.type !== Body.STATIC\n        ){\n            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n            if(speedSquaredB >= speedLimitSquaredB*2){\n                bi._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        if( bj.allowSleep &&\n            bj.type === Body.DYNAMIC &&\n            bj.sleepState  === Body.SLEEPING &&\n            bi.sleepState  === Body.AWAKE &&\n            bi.type !== Body.STATIC\n        ){\n            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n            if(speedSquaredA >= speedLimitSquaredA*2){\n                bj._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        // Now we know that i and j are in contact. Set collision matrix state\n\t\tthis.collisionMatrix.set(bi, bj, true);\n\n        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n            // First contact!\n            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n            World_step_collideEvent.body = bj;\n            World_step_collideEvent.contact = c;\n            bi.dispatchEvent(World_step_collideEvent);\n\n            World_step_collideEvent.body = bi;\n            bj.dispatchEvent(World_step_collideEvent);\n        }\n    }\n    if(doProfiling){\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n    }\n\n    // Wake up bodies\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi._wakeUpAfterNarrowphase){\n            bi.wakeUp();\n            bi._wakeUpAfterNarrowphase = false;\n        }\n    }\n\n    // Add user-added constraints\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        c.update();\n        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n            var eq = c.equations[j];\n            solver.addEquation(eq);\n        }\n    }\n\n    // Solve the constrained system\n    solver.solve(dt,this);\n\n    if(doProfiling){\n        profile.solve = performance.now() - profilingStart;\n    }\n\n    // Remove all contacts from solver\n    solver.removeAllEquations();\n\n    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n    var pow = Math.pow;\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var ld = pow(1.0 - bi.linearDamping,dt);\n            var v = bi.velocity;\n            v.mult(ld,v);\n            var av = bi.angularVelocity;\n            if(av){\n                var ad = pow(1.0 - bi.angularDamping,dt);\n                av.mult(ad,av);\n            }\n        }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent);\n\n    // Invoke pre-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.preStep){\n            bi.preStep.call(bi);\n        }\n    }\n\n    // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n    var q = World_step_step_q;\n    var w = World_step_step_w;\n    var wq = World_step_step_wq;\n    var stepnumber = this.stepnumber;\n    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n    var quatNormalizeFast = this.quatNormalizeFast;\n    var half_dt = dt * 0.5;\n    var PLANE = Shape.types.PLANE,\n        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\n    for(i=0; i!==N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n            var velo = b.velocity,\n                angularVelo = b.angularVelocity,\n                pos = b.position,\n                quat = b.quaternion,\n                invMass = b.invMass,\n                invInertia = b.invInertiaWorld;\n\n            velo.x += force.x * invMass * dt;\n            velo.y += force.y * invMass * dt;\n            velo.z += force.z * invMass * dt;\n\n            if(b.angularVelocity){\n                invInertia.vmult(tau,invI_tau_dt);\n                invI_tau_dt.mult(dt,invI_tau_dt);\n                invI_tau_dt.vadd(angularVelo,angularVelo);\n            }\n\n            // Use new velocity  - leap frog\n            pos.x += velo.x * dt;\n            pos.y += velo.y * dt;\n            pos.z += velo.z * dt;\n\n            if(b.angularVelocity){\n                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n                w.mult(quat,wq);\n                quat.x += half_dt * wq.x;\n                quat.y += half_dt * wq.y;\n                quat.z += half_dt * wq.z;\n                quat.w += half_dt * wq.w;\n                if(quatNormalize){\n                    if(quatNormalizeFast){\n                        quat.normalizeFast();\n                    } else {\n                        quat.normalize();\n                    }\n                }\n            }\n\n            if(b.aabb){\n                b.aabbNeedsUpdate = true;\n            }\n\n            // Update world inertia\n            if(b.updateInertiaWorld){\n                b.updateInertiaWorld();\n            }\n        }\n    }\n    this.clearForces();\n\n    this.broadphase.dirty = true;\n\n    if(doProfiling){\n        profile.integrate = performance.now() - profilingStart;\n    }\n\n    // Update world time\n    this.time += dt;\n    this.stepnumber += 1;\n\n    this.dispatchEvent(World_step_postStepEvent);\n\n    // Invoke post-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        var postStep = bi.postStep;\n        if(postStep){\n            postStep.call(bi);\n        }\n    }\n\n    // Sleeping update\n    if(this.allowSleep){\n        for(i=0; i!==N; i++){\n            bodies[i].sleepTick(this.time);\n        }\n    }\n};\n\n/**\n * Sets all body forces in the world to zero.\n * @method clearForces\n */\nWorld.prototype.clearForces = function(){\n    var bodies = this.bodies;\n    var N = bodies.length;\n    for(var i=0; i !== N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n\n        b.force.set(0,0,0);\n        b.torque.set(0,0,0);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/ArrayCollisionMatrix\":4,\"../collision/NaiveBroadphase\":7,\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../material/ContactMaterial\":24,\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Shape\":43,\"../solver/GSSolver\":46,\"../utils/EventTarget\":49,\"../utils/TupleDictionary\":52,\"../utils/Vec3Pool\":54,\"./Narrowphase\":55}]},{},[2])\n(2)\n});","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\nimport {\n\tEventDispatcher,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3\n} from \"../../../build/three.module.js\";\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyIn( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tswitch ( scope.mouseButtons.LEFT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.mouseButtons.MIDDLE ) {\n\n\t\t\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.mouseButtons.RIGHT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\nif ( Number.isInteger === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\tNumber.isInteger = function ( value ) {\n\n\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t};\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( 'name' in Function.prototype === false ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\tObject.assign = function ( target ) {\n\n\t\tif ( target === undefined || target === null ) {\n\n\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t}\n\n\t\tvar output = Object( target );\n\n\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\tvar source = arguments[ index ];\n\n\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn output;\n\n\t};\n\n}\n\nvar REVISION = '109';\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nvar CullFaceNone = 0;\nvar CullFaceBack = 1;\nvar CullFaceFront = 2;\nvar CullFaceFrontBack = 3;\nvar FrontFaceDirectionCW = 0;\nvar FrontFaceDirectionCCW = 1;\nvar BasicShadowMap = 0;\nvar PCFShadowMap = 1;\nvar PCFSoftShadowMap = 2;\nvar VSMShadowMap = 3;\nvar FrontSide = 0;\nvar BackSide = 1;\nvar DoubleSide = 2;\nvar FlatShading = 1;\nvar SmoothShading = 2;\nvar NoColors = 0;\nvar FaceColors = 1;\nvar VertexColors = 2;\nvar NoBlending = 0;\nvar NormalBlending = 1;\nvar AdditiveBlending = 2;\nvar SubtractiveBlending = 3;\nvar MultiplyBlending = 4;\nvar CustomBlending = 5;\nvar AddEquation = 100;\nvar SubtractEquation = 101;\nvar ReverseSubtractEquation = 102;\nvar MinEquation = 103;\nvar MaxEquation = 104;\nvar ZeroFactor = 200;\nvar OneFactor = 201;\nvar SrcColorFactor = 202;\nvar OneMinusSrcColorFactor = 203;\nvar SrcAlphaFactor = 204;\nvar OneMinusSrcAlphaFactor = 205;\nvar DstAlphaFactor = 206;\nvar OneMinusDstAlphaFactor = 207;\nvar DstColorFactor = 208;\nvar OneMinusDstColorFactor = 209;\nvar SrcAlphaSaturateFactor = 210;\nvar NeverDepth = 0;\nvar AlwaysDepth = 1;\nvar LessDepth = 2;\nvar LessEqualDepth = 3;\nvar EqualDepth = 4;\nvar GreaterEqualDepth = 5;\nvar GreaterDepth = 6;\nvar NotEqualDepth = 7;\nvar MultiplyOperation = 0;\nvar MixOperation = 1;\nvar AddOperation = 2;\nvar NoToneMapping = 0;\nvar LinearToneMapping = 1;\nvar ReinhardToneMapping = 2;\nvar Uncharted2ToneMapping = 3;\nvar CineonToneMapping = 4;\nvar ACESFilmicToneMapping = 5;\n\nvar UVMapping = 300;\nvar CubeReflectionMapping = 301;\nvar CubeRefractionMapping = 302;\nvar EquirectangularReflectionMapping = 303;\nvar EquirectangularRefractionMapping = 304;\nvar SphericalReflectionMapping = 305;\nvar CubeUVReflectionMapping = 306;\nvar CubeUVRefractionMapping = 307;\nvar RepeatWrapping = 1000;\nvar ClampToEdgeWrapping = 1001;\nvar MirroredRepeatWrapping = 1002;\nvar NearestFilter = 1003;\nvar NearestMipmapNearestFilter = 1004;\nvar NearestMipMapNearestFilter = 1004;\nvar NearestMipmapLinearFilter = 1005;\nvar NearestMipMapLinearFilter = 1005;\nvar LinearFilter = 1006;\nvar LinearMipmapNearestFilter = 1007;\nvar LinearMipMapNearestFilter = 1007;\nvar LinearMipmapLinearFilter = 1008;\nvar LinearMipMapLinearFilter = 1008;\nvar UnsignedByteType = 1009;\nvar ByteType = 1010;\nvar ShortType = 1011;\nvar UnsignedShortType = 1012;\nvar IntType = 1013;\nvar UnsignedIntType = 1014;\nvar FloatType = 1015;\nvar HalfFloatType = 1016;\nvar UnsignedShort4444Type = 1017;\nvar UnsignedShort5551Type = 1018;\nvar UnsignedShort565Type = 1019;\nvar UnsignedInt248Type = 1020;\nvar AlphaFormat = 1021;\nvar RGBFormat = 1022;\nvar RGBAFormat = 1023;\nvar LuminanceFormat = 1024;\nvar LuminanceAlphaFormat = 1025;\nvar RGBEFormat = RGBAFormat;\nvar DepthFormat = 1026;\nvar DepthStencilFormat = 1027;\nvar RedFormat = 1028;\nvar RGB_S3TC_DXT1_Format = 33776;\nvar RGBA_S3TC_DXT1_Format = 33777;\nvar RGBA_S3TC_DXT3_Format = 33778;\nvar RGBA_S3TC_DXT5_Format = 33779;\nvar RGB_PVRTC_4BPPV1_Format = 35840;\nvar RGB_PVRTC_2BPPV1_Format = 35841;\nvar RGBA_PVRTC_4BPPV1_Format = 35842;\nvar RGBA_PVRTC_2BPPV1_Format = 35843;\nvar RGB_ETC1_Format = 36196;\nvar RGBA_ASTC_4x4_Format = 37808;\nvar RGBA_ASTC_5x4_Format = 37809;\nvar RGBA_ASTC_5x5_Format = 37810;\nvar RGBA_ASTC_6x5_Format = 37811;\nvar RGBA_ASTC_6x6_Format = 37812;\nvar RGBA_ASTC_8x5_Format = 37813;\nvar RGBA_ASTC_8x6_Format = 37814;\nvar RGBA_ASTC_8x8_Format = 37815;\nvar RGBA_ASTC_10x5_Format = 37816;\nvar RGBA_ASTC_10x6_Format = 37817;\nvar RGBA_ASTC_10x8_Format = 37818;\nvar RGBA_ASTC_10x10_Format = 37819;\nvar RGBA_ASTC_12x10_Format = 37820;\nvar RGBA_ASTC_12x12_Format = 37821;\nvar LoopOnce = 2200;\nvar LoopRepeat = 2201;\nvar LoopPingPong = 2202;\nvar InterpolateDiscrete = 2300;\nvar InterpolateLinear = 2301;\nvar InterpolateSmooth = 2302;\nvar ZeroCurvatureEnding = 2400;\nvar ZeroSlopeEnding = 2401;\nvar WrapAroundEnding = 2402;\nvar TrianglesDrawMode = 0;\nvar TriangleStripDrawMode = 1;\nvar TriangleFanDrawMode = 2;\nvar LinearEncoding = 3000;\nvar sRGBEncoding = 3001;\nvar GammaEncoding = 3007;\nvar RGBEEncoding = 3002;\nvar LogLuvEncoding = 3003;\nvar RGBM7Encoding = 3004;\nvar RGBM16Encoding = 3005;\nvar RGBDEncoding = 3006;\nvar BasicDepthPacking = 3200;\nvar RGBADepthPacking = 3201;\nvar TangentSpaceNormalMap = 0;\nvar ObjectSpaceNormalMap = 1;\n\nvar ZeroStencilOp = 0;\nvar KeepStencilOp = 7680;\nvar ReplaceStencilOp = 7681;\nvar IncrementStencilOp = 7682;\nvar DecrementStencilOp = 7683;\nvar IncrementWrapStencilOp = 34055;\nvar DecrementWrapStencilOp = 34056;\nvar InvertStencilOp = 5386;\n\nvar NeverStencilFunc = 512;\nvar LessStencilFunc = 513;\nvar EqualStencilFunc = 514;\nvar LessEqualStencilFunc = 515;\nvar GreaterStencilFunc = 516;\nvar NotEqualStencilFunc = 517;\nvar GreaterEqualStencilFunc = 518;\nvar AlwaysStencilFunc = 519;\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nfunction EventDispatcher() {}\n\nObject.assign( EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _lut = [];\n\nfor ( var i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nvar _Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: function () {\n\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\treturn uuid.toUpperCase();\n\n\t},\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\tlerp: function ( x, y, t ) {\n\n\t\treturn ( 1 - t ) * x + t * y;\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * _Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * _Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tceilPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tfloorPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nfunction Vector2( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n}\n\nObject.defineProperties( Vector2.prototype, {\n\n\t\"width\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t}\n\n\t},\n\n\t\"height\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tisVector2: true,\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tcross: function ( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tisQuaternion: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar EPS = 0.000001;\n\n\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t},\n\n\tangleTo: function ( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t},\n\n\trotateTowards: function ( q, step ) {\n\n\t\tvar angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tvar t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t},\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\t_onChange: function ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\t_onChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nvar _vector = new Vector3();\nvar _quaternion = new Quaternion();\n\nfunction Vector3( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n}\n\nObject.assign( Vector3.prototype, {\n\n\tisVector3: true,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t},\n\n\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t},\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t},\n\n\tunproject: function ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t},\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\t// TODO lengthSquared?\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( v ) {\n\n\t\t// v cannot be the zero v\n\n\t\tvar scalar = v.dot( this ) / v.lengthSq();\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t},\n\n\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector );\n\n\t},\n\n\treflect: function ( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t},\n\n\tangleTo: function ( v ) {\n\n\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' );\n\n\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function ( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t},\n\n\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCylindrical: function ( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t},\n\n\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nvar _vector$1 = new Vector3();\n\nfunction Matrix3() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix3.prototype, {\n\n\tisMatrix3: true,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t_vector$1.x = attribute.getX( i );\n\t\t\t_vector$1.y = attribute.getY( i );\n\t\t\t_vector$1.z = attribute.getZ( i );\n\n\t\t\t_vector$1.applyMatrix3( this );\n\n\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\n\n\t\t}\n\n\t\treturn attribute;\n\n\t},\n\n\tmultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tvar c = Math.cos( rotation );\n\t\tvar s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t},\n\n\tscale: function ( sx, sy ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t},\n\n\trotate: function ( theta ) {\n\n\t\tvar c = Math.cos( theta );\n\t\tvar s = Math.sin( theta );\n\n\t\tvar te = this.elements;\n\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( tx, ty ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nvar _canvas;\n\nvar ImageUtils = {\n\n\tgetDataURL: function ( image ) {\n\n\t\tvar canvas;\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nvar textureId = 0;\n\nfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\n\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : RGBAFormat;\n\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\tthis.offset = new Vector2( 0, 0 );\n\tthis.repeat = new Vector2( 1, 1 );\n\tthis.center = new Vector2( 0, 0 );\n\tthis.rotation = 0;\n\n\tthis.matrixAutoUpdate = true;\n\tthis.matrix = new Matrix3();\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Texture,\n\n\tisTexture: true,\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tvar output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tvar url;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\turl = [];\n\n\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// process single image\n\n\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t}\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: url\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n} );\n\nObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector4( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.defineProperties( Vector4.prototype, {\n\n\t\"width\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.z = value;\n\n\t\t}\n\n\t},\n\n\t\"height\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.w = value;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Vector4.prototype, {\n\n\tisVector4: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function ( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget( width, height, options ) {\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.texture.image = {};\n\tthis.texture.image.width = width;\n\tthis.texture.image.height = height;\n\n\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n}\n\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: WebGLRenderTarget,\n\n\tisWebGLRenderTarget: true,\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * @author Matt DesLauriers / @mattdesl\n */\n\nfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n\tthis.samples = 4;\n\n}\n\nWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\tconstructor: WebGLMultisampleRenderTarget,\n\n\tisWebGLMultisampleRenderTarget: true,\n\n\tcopy: function ( source ) {\n\n\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nvar _v1 = new Vector3();\nvar _m1 = new Matrix4();\nvar _zero = new Vector3( 0, 0, 0 );\nvar _one = new Vector3( 1, 1, 1 );\nvar _x = new Vector3();\nvar _y = new Vector3();\nvar _z = new Vector3();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Matrix4() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix4.prototype, {\n\n\tisMatrix4: true,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function ( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t},\n\n\tlookAt: function ( eye, target, up ) {\n\n\t\tvar te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t_v1.x = attribute.getX( i );\n\t\t\t_v1.y = attribute.getY( i );\n\t\t\t_v1.z = attribute.getZ( i );\n\n\t\t\t_v1.applyMatrix4( this );\n\n\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\n\n\t\t}\n\n\t\treturn attribute;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tsetPosition: function ( x, y, z ) {\n\n\t\tvar te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeShear: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, y, z, 0,\n\t\t\tx, 1, z, 0,\n\t\t\tx, y, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function ( position, quaternion, scale ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tvar det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1.copy( this );\n\n\t\tvar invSX = 1 / sx;\n\t\tvar invSY = 1 / sy;\n\t\tvar invSZ = 1 / sz;\n\n\t\t_m1.elements[ 0 ] *= invSX;\n\t\t_m1.elements[ 1 ] *= invSX;\n\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t_m1.elements[ 4 ] *= invSY;\n\t\t_m1.elements[ 5 ] *= invSY;\n\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nvar _matrix = new Matrix4();\nvar _quaternion$1 = new Quaternion();\n\nfunction Euler( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || Euler.DefaultOrder;\n\n}\n\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nEuler.DefaultOrder = 'XYZ';\n\nObject.defineProperties( Euler.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\torder: {\n\n\t\tget: function () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Euler.prototype, {\n\n\tisEuler: true,\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = _Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t},\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function ( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$1.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t},\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\t_onChange: function ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\t_onChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Layers() {\n\n\tthis.mask = 1 | 0;\n\n}\n\nObject.assign( Layers.prototype, {\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t},\n\n\tenableAll: function () {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t},\n\n\tdisableAll: function () {\n\n\t\tthis.mask = 0;\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n} );\n\nvar _object3DId = 0;\n\nvar _v1$1 = new Vector3();\nvar _q1 = new Quaternion();\nvar _m1$1 = new Matrix4();\nvar _target = new Vector3();\n\nvar _position = new Vector3();\nvar _scale = new Vector3();\nvar _quaternion$2 = new Quaternion();\n\nvar _xAxis = new Vector3( 1, 0, 0 );\nvar _yAxis = new Vector3( 0, 1, 0 );\nvar _zAxis = new Vector3( 0, 0, 1 );\n\nvar _addedEvent = { type: 'added' };\nvar _removedEvent = { type: 'removed' };\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nfunction Object3D() {\n\n\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = Object3D.DefaultUp.clone();\n\n\tvar position = new Vector3();\n\tvar rotation = new Euler();\n\tvar quaternion = new Quaternion();\n\tvar scale = new Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation._onChange( onRotationChange );\n\tquaternion._onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new Matrix4();\n\tthis.matrixWorld = new Matrix4();\n\n\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Object3D,\n\n\tisObject3D: true,\n\n\tonBeforeRender: function () {},\n\tonAfterRender: function () {},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function ( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t},\n\n\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function ( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t},\n\n\trotateY: function ( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t},\n\n\trotateZ: function ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t},\n\n\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t},\n\n\ttranslateX: function ( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t},\n\n\ttranslateY: function ( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t},\n\n\ttranslateZ: function ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t},\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t},\n\n\tlookAt: function ( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tvar parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t}\n\n\t},\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tattach: function ( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix( _m1$1 );\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\ttarget = new Quaternion();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\treturn target;\n\n\t},\n\n\tgetWorldScale: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\treturn target;\n\n\t},\n\n\tgetWorldDirection: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tvar e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t},\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tvar uuids = [];\n\n\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Scene() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Scene,\n\n\tisScene: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nvar _points = [\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3(),\n\tnew Vector3()\n];\nvar _vector$2 = new Vector3();\n\n// triangle centered vertices\n\nvar _v0 = new Vector3();\nvar _v1$2 = new Vector3();\nvar _v2 = new Vector3();\n\n// triangle edge vectors\n\nvar _f0 = new Vector3();\nvar _f1 = new Vector3();\nvar _f2 = new Vector3();\n\nvar _center = new Vector3();\nvar _extents = new Vector3();\nvar _triangleNormal = new Vector3();\nvar _testAxis = new Vector3();\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n}\n\nObject.assign( Box3.prototype, {\n\n\tisBox3: true,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\texpandByObject: function ( object ) {\n\n\t\tvar i, l;\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t_vector$2.copy( vertices[ i ] );\n\t\t\t\t\t_vector$2.applyMatrix4( object.matrixWorld );\n\n\t\t\t\t\tthis.expandByPoint( _vector$2 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_vector$2.fromBufferAttribute( attribute, i ).applyMatrix4( object.matrixWorld );\n\n\t\t\t\t\t\tthis.expandByPoint( _vector$2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar children = object.children;\n\n\t\tfor ( i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$2 );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t},\n\n\tintersectsTriangle: function ( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tvar axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t},\n\n\tgetBoundingSphere: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t}\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\n\n\t\treturn target;\n\n\t},\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tvar i, j;\n\n\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tvar p0 = v0.dot( _testAxis );\n\t\tvar p1 = v1.dot( _testAxis );\n\t\tvar p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nvar _box = new Box3();\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Sphere( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n}\n\nObject.assign( Sphere.prototype, {\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\tvar center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tvar maxRadiusSq = 0;\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t},\n\n\tgetBoundingBox: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\ttarget = new Box3();\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n} );\n\nvar _vector$3 = new Vector3();\nvar _segCenter = new Vector3();\nvar _segDir = new Vector3();\nvar _diff = new Vector3();\n\nvar _edge1 = new Vector3();\nvar _edge2 = new Vector3();\nvar _normal = new Vector3();\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Ray( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n}\n\nObject.assign( Ray.prototype, {\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function ( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$3 ) );\n\n\t\treturn this;\n\n\t},\n\n\tclosestPointToPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tvar directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function ( point ) {\n\n\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$3.distanceToSquared( point );\n\n\t},\n\n\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tvar a01 = - this.direction.dot( _segDir );\n\t\tvar b0 = _diff.dot( this.direction );\n\t\tvar b1 = - _diff.dot( _segDir );\n\t\tvar c = _diff.lengthSq();\n\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\tvar s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t},\n\n\tintersectSphere: function ( sphere, target ) {\n\n\t\t_vector$3.subVectors( sphere.center, this.origin );\n\t\tvar tca = _vector$3.dot( this.direction );\n\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\n\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tvar t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tvar t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t},\n\n\tintersectPlane: function ( plane, target ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, target ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn this.intersectBox( box, _vector$3 ) !== null;\n\n\t},\n\n\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tvar DdN = this.direction.dot( _normal );\n\t\tvar sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t},\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v0$1 = new Vector3();\nvar _v1$3 = new Vector3();\nvar _v2$1 = new Vector3();\nvar _v3 = new Vector3();\n\nvar _vab = new Vector3();\nvar _vac = new Vector3();\nvar _vbc = new Vector3();\nvar _vap = new Vector3();\nvar _vbp = new Vector3();\nvar _vcp = new Vector3();\n\nfunction Triangle( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n}\n\nObject.assign( Triangle, {\n\n\tgetNormal: function ( a, b, c, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tvar targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t},\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$1.subVectors( point, a );\n\n\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t},\n\n\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t},\n\n\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\treturn target;\n\n\t},\n\n\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tgetArea: function () {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t},\n\n\tgetMidpoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tgetNormal: function ( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t},\n\n\tgetPlane: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tgetBarycoord: function ( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t},\n\n\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tisFrontFacing: function ( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t},\n\n\tclosestPointToPoint: function ( p, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tvar a = this.a, b = this.b, c = this.c;\n\t\tvar v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tvar d1 = _vab.dot( _vap );\n\t\tvar d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tvar d3 = _vab.dot( _vbp );\n\t\tvar d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tvar vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tvar d5 = _vab.dot( _vcp );\n\t\tvar d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tvar vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tvar va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tvar denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t},\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nvar _hslA = { h: 0, s: 0, l: 0 };\nvar _hslB = { h: 0, s: 0, l: 0 };\n\nfunction Color( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n}\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nObject.assign( Color.prototype, {\n\n\tisColor: true,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function ( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = _Math.euclideanModulo( h, 1 );\n\t\ts = _Math.clamp( s, 0, 1 );\n\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopySRGBToLinear: function ( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToSRGB: function ( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t},\n\n\tconvertSRGBToLinear: function () {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToSRGB: function () {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t}\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpHSL: function ( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\n\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\n\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\treturn this.getHex();\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = ( color && color.isColor ) ? color : new Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n}\n\nObject.assign( Face3.prototype, {\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar materialId = 0;\n\nfunction Material() {\n\n\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\n\tthis.blending = NormalBlending;\n\tthis.side = FrontSide;\n\tthis.flatShading = false;\n\tthis.vertexTangents = false;\n\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = SrcAlphaFactor;\n\tthis.blendDst = OneMinusSrcAlphaFactor;\n\tthis.blendEquation = AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.stencilWriteMask = 0xff;\n\tthis.stencilFunc = AlwaysStencilFunc;\n\tthis.stencilRef = 0;\n\tthis.stencilFuncMask = 0xff;\n\tthis.stencilFail = KeepStencilOp;\n\tthis.stencilZFail = KeepStencilOp;\n\tthis.stencilZPass = KeepStencilOp;\n\tthis.stencilWrite = false;\n\n\tthis.clippingPlanes = null;\n\tthis.clipIntersection = false;\n\tthis.clipShadows = false;\n\n\tthis.shadowSide = null;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.dithering = false;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.visible = true;\n\n\tthis.toneMapped = true;\n\n\tthis.userData = {};\n\n\tthis.needsUpdate = true;\n\n}\n\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Material,\n\n\tisMaterial: true,\n\n\tonBeforeCompile: function () {},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen && this.sheen.isColor ) data.sheen = this.sheen.getHex();\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\t\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\n\t\t}\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\tif ( this.morphNormals === true ) data.morphNormals = true;\n\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWrite = source.stencilWrite;\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.clipShadows = source.clipShadows;\n\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferAttribute( array, itemSize, normalized ) {\n\n\tif ( Array.isArray( array ) ) {\n\n\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t}\n\n\tthis.name = '';\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\tthis.normalized = normalized === true;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( BufferAttribute.prototype, {\n\n\tisBufferAttribute: true,\n\n\tonUploadCallback: function () {},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\treturn {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t}\n\n} );\n\n//\n\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n}\n\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n}\n\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n}\n\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n}\n\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n}\n\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n}\n\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n}\n\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n}\n\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n}\n\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectGeometry() {\n\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nObject.assign( DirectGeometry.prototype, {\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tvar max = array[ 0 ];\n\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\nvar _m1$2 = new Matrix4();\nvar _obj = new Object3D();\nvar _offset = new Vector3();\nvar _box$1 = new Box3();\nvar _boxMorphTargets = new Box3();\nvar _vector$4 = new Vector3();\n\nfunction BufferGeometry() {\n\n\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n\tthis.userData = {};\n\n}\n\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: BufferGeometry,\n\n\tisBufferGeometry: true,\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\treturn this.setAttribute( name, attribute );\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tsetAttribute: function ( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tvar tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\n\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function ( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1$2.makeRotationX( angle );\n\n\t\tthis.applyMatrix( _m1$2 );\n\n\t\treturn this;\n\n\t},\n\n\trotateY: function ( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1$2.makeRotationY( angle );\n\n\t\tthis.applyMatrix( _m1$2 );\n\n\t\treturn this;\n\n\t},\n\n\trotateZ: function ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1$2.makeRotationZ( angle );\n\n\t\tthis.applyMatrix( _m1$2 );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix( _m1$2 );\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1$2.makeScale( x, y, z );\n\n\t\tthis.applyMatrix( _m1$2 );\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function ( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix( _obj.matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object.isMesh ) {\n\n\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tvar position = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\tdirect = undefined;\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tvar attribute;\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tvar position = this.attributes.position;\n\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tvar position = this.attributes.position;\n\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal;\n\n\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t_vector$4.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t}\n\n\t},\n\n\ttoNonIndexed: function () {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.addAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tvar morphAttributes = this.morphAttributes;\n\n\t\tfor ( name in morphAttributes ) {\n\n\t\t\tvar morphArray = [];\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\t// groups\n\n\t\tvar groups = this.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\tif ( attribute.name !== '' ) attributeData.name = attribute.name;\n\n\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t}\n\n\t\tvar morphAttributes = {};\n\t\tvar hasMorphAttributes = false;\n\n\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) attributeData.name = attribute.name;\n\n\t\t\t\tarray.push( attributeData );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) data.data.morphAttributes = morphAttributes;\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar name, i, l;\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tvar morphAttributes = source.morphAttributes;\n\n\t\tfor ( name in morphAttributes ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// groups\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nvar _inverseMatrix = new Matrix4();\nvar _ray = new Ray();\nvar _sphere = new Sphere();\n\nvar _vA = new Vector3();\nvar _vB = new Vector3();\nvar _vC = new Vector3();\n\nvar _tempA = new Vector3();\nvar _tempB = new Vector3();\nvar _tempC = new Vector3();\n\nvar _morphA = new Vector3();\nvar _morphB = new Vector3();\nvar _morphC = new Vector3();\n\nvar _uvA = new Vector2();\nvar _uvB = new Vector2();\nvar _uvC = new Vector2();\n\nvar _intersectionPoint = new Vector3();\nvar _intersectionPointWorld = new Vector3();\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tvar geometry = this.geometry;\n\t\tvar material = this.material;\n\t\tvar matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tvar intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar a, b, c;\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\tvar uv = geometry.attributes.uv;\n\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar drawRange = geometry.drawRange;\n\t\t\tvar i, j, il, jl;\n\t\t\tvar group, groupMaterial;\n\t\t\tvar start, end;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tvar fvA, fvB, fvC;\n\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar uvs;\n\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = faces[ f ];\n\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = face;\n\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tvar intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, uv, uv2, a, b, c ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tvar morphInfluences = object.morphTargetInfluences;\n\n\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tvar influence = morphInfluences[ i ];\n\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t}\n\n\t\t_vA.add( _morphA );\n\t\t_vB.add( _morphB );\n\t\t_vC.add( _morphC );\n\n\t}\n\n\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tvar face = new Face3( a, b, c );\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nvar _geometryId = 0; // Geometry uses even numbers as Id\nvar _m1$3 = new Matrix4();\nvar _obj$1 = new Object3D();\nvar _offset$1 = new Vector3();\n\nfunction Geometry() {\n\n\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [[]];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.elementsNeedUpdate = false;\n\tthis.verticesNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Geometry,\n\n\tisGeometry: true,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function ( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1$3.makeRotationX( angle );\n\n\t\tthis.applyMatrix( _m1$3 );\n\n\t\treturn this;\n\n\t},\n\n\trotateY: function ( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1$3.makeRotationY( angle );\n\n\t\tthis.applyMatrix( _m1$3 );\n\n\t\treturn this;\n\n\t},\n\n\trotateZ: function ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1$3.makeRotationZ( angle );\n\n\t\tthis.applyMatrix( _m1$3 );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix( _m1$3 );\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1$3.makeScale( x, y, z );\n\n\t\tthis.applyMatrix( _m1$3 );\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function ( vector ) {\n\n\t\t_obj$1.lookAt( vector );\n\n\t\t_obj$1.updateMatrix();\n\n\t\tthis.applyMatrix( _obj$1.matrix );\n\n\t\treturn this;\n\n\t},\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( attributes.position === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t];\n\n\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeFlatVertexNormals: function () {\n\n\t\tvar f, fl, face;\n\n\t\tthis.computeFaceNormals();\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// colors\n\n\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.vertices = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar i, il, j, jl, k, kl;\n\n\t\t// reset\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// vertices\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\t// colors\n\n\t\tvar colors = source.colors;\n\n\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\t// face vertex uvs\n\n\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargets = source.morphTargets;\n\n\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = {};\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t// vertices\n\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t}\n\n\t\t// morph normals\n\n\t\tvar morphNormals = source.morphNormals;\n\n\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\tvar morphNormal = {};\n\n\t\t\t// vertex normals\n\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// face normals\n\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t}\n\n\t\t// skin weights\n\n\t\tvar skinWeights = source.skinWeights;\n\n\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t}\n\n\t\t// skin indices\n\n\t\tvar skinIndices = source.skinIndices;\n\n\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t}\n\n\t\t// line distances\n\n\t\tvar lineDistances = source.lineDistances;\n\n\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// BoxGeometry\n\nclass BoxGeometry extends Geometry {\n\n\tconstructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n}\n\n// BoxBufferGeometry\n\nclass BoxBufferGeometry extends BufferGeometry {\n\n\tconstructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\t\tdepth = depth || 1;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tvar dst = {};\n\n\tfor ( var u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( var p in src[ u ] ) {\n\n\t\t\tvar property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tvar merged = {};\n\n\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( var p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\n// Legacy\n\nvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction ShaderMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = default_vertex;\n\tthis.fragmentShader = default_fragment;\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\tthis.uniformsNeedUpdate = false;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nShaderMaterial.prototype = Object.create( Material.prototype );\nShaderMaterial.prototype.constructor = ShaderMaterial;\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nShaderMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\tthis.defines = Object.assign( {}, source.defines );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = {};\n\n\tfor ( var name in this.uniforms ) {\n\n\t\tvar uniform = this.uniforms[ name ];\n\t\tvar value = uniform.value;\n\n\t\tif ( value && value.isTexture ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 't',\n\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t};\n\n\t\t} else if ( value && value.isColor ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'c',\n\t\t\t\tvalue: value.getHex()\n\t\t\t};\n\n\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'v2',\n\t\t\t\tvalue: value.toArray()\n\t\t\t};\n\n\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'v3',\n\t\t\t\tvalue: value.toArray()\n\t\t\t};\n\n\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'v4',\n\t\t\t\tvalue: value.toArray()\n\t\t\t};\n\n\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'm3',\n\t\t\t\tvalue: value.toArray()\n\t\t\t};\n\n\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\ttype: 'm4',\n\t\t\t\tvalue: value.toArray()\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tdata.uniforms[ name ] = {\n\t\t\t\tvalue: value\n\t\t\t};\n\n\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t}\n\n\t}\n\n\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\tvar extensions = {};\n\n\tfor ( var key in this.extensions ) {\n\n\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t}\n\n\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\treturn data;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\n\tthis.projectionMatrix = new Matrix4();\n\tthis.projectionMatrixInverse = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tvar e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar fov = 90, aspect = 1;\n\nfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\tthis.update = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar renderTarget = this.renderTarget;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n}\n\nCubeCamera.prototype = Object.create( Object3D.prototype );\nCubeCamera.prototype.constructor = CubeCamera;\n\n/**\n * @author alteredq / http://alteredqualia.com\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n}\n\nWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\nWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\tthis.texture.type = texture.type;\n\tthis.texture.format = texture.format;\n\tthis.texture.encoding = texture.encoding;\n\n\tvar scene = new Scene();\n\n\tvar shader = {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\"}\"\n\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\"}\"\n\n\t\t].join( '\\n' ),\n\t};\n\n\tvar material = new ShaderMaterial( {\n\n\t\ttype: 'CubemapFromEquirect',\n\n\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader,\n\t\tside: BackSide,\n\t\tblending: NoBlending\n\n\t} );\n\n\tmaterial.uniforms.tEquirect.value = texture;\n\n\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\tscene.add( mesh );\n\n\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\tcamera.renderTarget = this;\n\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\tcamera.update( renderer, scene );\n\n\tmesh.geometry.dispose();\n\tmesh.material.dispose();\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\tthis.unpackAlignment = 1;\n\n\tthis.needsUpdate = true;\n\n}\n\nDataTexture.prototype = Object.create( Texture.prototype );\nDataTexture.prototype.constructor = DataTexture;\n\nDataTexture.prototype.isDataTexture = true;\n\n/**\n * @author bhouston / http://clara.io\n */\n\nvar _vector1 = new Vector3();\nvar _vector2 = new Vector3();\nvar _normalMatrix = new Matrix3();\n\nfunction Plane( normal, constant ) {\n\n\t// normal is assumed to be normalized\n\n\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n}\n\nObject.assign( Plane.prototype, {\n\n\tisPlane: true,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t},\n\n\tintersectLine: function ( line, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tvar direction = line.delta( _vector1 );\n\n\t\tvar denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t},\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nvar _sphere$1 = new Sphere();\nvar _vector$5 = new Vector3();\n\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t];\n\n}\n\nObject.assign( Frustum.prototype, {\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t},\n\n\tintersectsSprite: function ( sprite ) {\n\n\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} );\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 1.0 ? log2( vFragDepth ) * logDepthBufFC * 0.5 : gl_FragCoord.z;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\";\n\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy *= normalScale;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\\n\\t\\t\\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\\n\\t\\t#else\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = clearcoatNormalScale * mapN.xy;\\n\\t\\tclearcoatNormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 encodeHalfRGBA ( vec2 v ) {\\n\\tvec4 encoded = vec4( 0.0 );\\n\\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\\n\\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\\n\\tencoded.xy = encoded.xy - ( encoded.yy * offset );\\n\\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\\n\\tencoded.zw = encoded.zw - ( encoded.ww * offset );\\n\\treturn encoded;\\n}\\nvec2 decodeHalfRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\nvar uv_pars_fragment = \"#ifdef USE_UV\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\n\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\n\nvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\n\nvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nvar ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_frag: background_frag,\n\tbackground_vert: background_vert,\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshmatcap_frag: meshmatcap_frag,\n\tmeshmatcap_vert: meshmatcap_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert,\n\tsprite_frag: sprite_frag,\n\tsprite_vert: sprite_vert\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nvar UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 },\n\t\trefractionRatio: { value: 0.98 },\n\t\tmaxMipLevel: { value: 0 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nvar ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 0.5 },\n\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.normal_vert,\n\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\ttransparency: { value: 0 },\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLAnimation() {\n\n\tvar context = null;\n\tvar isAnimating = false;\n\tvar animationLoop = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tif ( isAnimating === false ) return;\n\n\t\tanimationLoop( time, frame );\n\n\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLAttributes( gl ) {\n\n\tvar buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar usage = attribute.dynamic ? 35048 : 35044;\n\n\t\tvar buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tvar type = 5126;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\ttype = 5123;\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( attribute.dynamic === false ) {\n\n\t\t\tgl.bufferData( bufferType, array, 35044 );\n\n\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tuvs.push( ix / gridX );\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\tvar clearColor = new Color( 0x000000 );\n\tvar clearAlpha = 0;\n\n\tvar planeMesh;\n\tvar boxMesh;\n\t// Store the current background texture and its `version`\n\t// so we can recompile the material accordingly.\n\tvar currentBackground = null;\n\tvar currentBackgroundVersion = 0;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tvar background = scene.background;\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tvar vr = renderer.vr;\n\t\tvar session = vr.getSession && vr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\t\t\tcurrentBackground = null;\n\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\t\t\tcurrentBackground = null;\n\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.tCube.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\n\t\t\tboxMesh.material.uniforms.tCube.value = texture;\n\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t     currentBackgroundVersion !== texture.version ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = texture.version;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.removeAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\t   currentBackgroundVersion !== background.version ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tvar extension, methodName;\n\n\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\n\n\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tvar maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tvar maxTextures = gl.getParameter( 34930 );\n\tvar maxVertexTextures = gl.getParameter( 35660 );\n\tvar maxTextureSize = gl.getParameter( 3379 );\n\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\tvar maxAttributes = gl.getParameter( 34921 );\n\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\tvar maxVaryings = gl.getParameter( 36348 );\n\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tvar vertexTextures = maxVertexTextures > 0;\n\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\n/**\n * @author tschw\n */\n\nfunction WebGLClipping() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLExtensions( gl ) {\n\n\tvar extensions = {};\n\n\treturn {\n\n\t\tget: function ( name ) {\n\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t}\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\textensions[ name ] = extension;\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLGeometries( gl, attributes, info ) {\n\n\tvar geometries = new WeakMap();\n\tvar wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t}\n\n\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries.delete( geometry );\n\n\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries.set( geometry, buffergeometry );\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tvar indices = [];\n\n\t\tvar geometryIndex = geometry.index;\n\t\tvar geometryPosition = geometry.attributes.position;\n\t\tvar version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tvar array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\tattributes.update( attribute, 34963 );\n\n\t\t//\n\n\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tvar extension, methodName;\n\n\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLInfo( gl ) {\n\n\tvar memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tvar render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\tinstanceCount = instanceCount || 1;\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl ) {\n\n\tvar influencesList = {};\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\tvar length = objectInfluences.length;\n\n\t\tvar influences = influencesList[ geometry.id ];\n\n\t\tif ( influences === undefined ) {\n\n\t\t\t// initialise list\n\n\t\t\tinfluences = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t}\n\n\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t}\n\n\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t// Remove current morphAttributes\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Collect influences\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tinfluence[ 0 ] = i;\n\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t}\n\n\t\tinfluences.sort( absNumericalSort );\n\n\t\t// Add morphAttributes\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence ) {\n\n\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\tif ( value ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t}\n\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tvar updateList = {};\n\n\tfunction update( object ) {\n\n\t\tvar frame = info.render.frame;\n\n\t\tvar geometry = object.geometry;\n\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\tformat = format !== undefined ? format : RGBFormat;\n\n\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n}\n\nCubeTexture.prototype = Object.create( Texture.prototype );\nCubeTexture.prototype.constructor = CubeTexture;\n\nCubeTexture.prototype.isCubeTexture = true;\n\nObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n/**\n * @author Takahiro https://github.com/takahirox\n */\n\nfunction DataTexture2DArray( data, width, height, depth ) {\n\n\tTexture.call( this, null );\n\n\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\tthis.magFilter = NearestFilter;\n\tthis.minFilter = NearestFilter;\n\n\tthis.wrapR = ClampToEdgeWrapping;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\n\tthis.needsUpdate = true;\n\n}\n\nDataTexture2DArray.prototype = Object.create( Texture.prototype );\nDataTexture2DArray.prototype.constructor = DataTexture2DArray;\nDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n/**\n * @author Artur Trzesiok\n */\n\nfunction DataTexture3D( data, width, height, depth ) {\n\n\t// We're going to add .setXXX() methods for setting properties later.\n\t// Users can still set in DataTexture3D directly.\n\t//\n\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t// \ttexture.anisotropy = 16;\n\t//\n\t// See #14839\n\n\tTexture.call( this, null );\n\n\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\tthis.magFilter = NearestFilter;\n\tthis.minFilter = NearestFilter;\n\n\tthis.wrapR = ClampToEdgeWrapping;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\n\tthis.needsUpdate = true;\n\n\n}\n\nDataTexture3D.prototype = Object.create( Texture.prototype );\nDataTexture3D.prototype.constructor = DataTexture3D;\nDataTexture3D.prototype.isDataTexture3D = true;\n\n/**\n * @author tschw\n * @author Mugen87 / https://github.com/Mugen87\n * @author mrdoob / http://mrdoob.com/\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nvar emptyTexture = new Texture();\nvar emptyTexture2dArray = new DataTexture2DArray();\nvar emptyTexture3d = new DataTexture3D();\nvar emptyCubeTexture = new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nvar arrayCacheF32 = [];\nvar arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nvar mat4array = new Float32Array( 16 );\nvar mat3array = new Float32Array( 9 );\nvar mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tvar firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tvar n = nBlocks * blockSize,\n\t\tr = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tvar r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( var i = 0; i !== n; ++ i )\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tvar cache = this.cache;\n\tvar elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tvar cache = this.cache;\n\tvar elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tvar cache = this.cache;\n\tvar elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tvar cache = this.cache;\n\tvar unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tvar cache = this.cache;\n\tvar unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tvar cache = this.cache;\n\tvar unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tvar cache = this.cache;\n\tvar unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n}\n\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\nfunction setValueV1i( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\nfunction setValueV2i( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tvar cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\n\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t}\n\n}\n\n// Array of scalars\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n\n// Array of vectors (flat or from THREE classes)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tvar data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tvar data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tvar data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (flat or from THREE clases)\n\nfunction setValueM2Array( gl, v ) {\n\n\tvar data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tvar data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tvar data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tvar n = v.length;\n\n\tvar units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tvar n = v.length;\n\n\tvar units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\n\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\tvar cache = this.cache;\n\n\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\tthis.cache = new Float32Array( data.length );\n\n\t}\n\n\tcopyArray( cache, data );\n\n};\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\tvar seq = this.seq;\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tvar path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tvar match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\tid = match[ 1 ],\n\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program ) {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n\tvar n = gl.getProgramParameter( program, 35718 );\n\n\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\tvar u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tvar v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tvar r = [];\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLShader( gl, type, string ) {\n\n\tvar shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar programIdCount = 0;\n\nfunction addLineNumbers( string ) {\n\n\tvar lines = string.split( '\\n' );\n\n\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tcase LogLuvEncoding:\n\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tvar status = gl.getShaderParameter( shader, 35713 );\n\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && log === '' ) return '';\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\tvar source = gl.getShaderSource( shader );\n\n\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tvar toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase Uncharted2ToneMapping:\n\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\textensions = extensions || {};\n\n\tvar chunks = [\n\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tvar chunks = [];\n\n\tfor ( var name in defines ) {\n\n\t\tvar value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tvar attributes = {};\n\n\tvar n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\tvar info = gl.getActiveAttrib( program, i );\n\t\tvar name = info.name;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tvar string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( loopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tvar string = '';\n\n\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\tif ( parameters.precision === \"highp\" ) {\n\n\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters, material ) {\n\n\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t\tcase EquirectangularReflectionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\tbreak;\n\n\t\t\tcase SphericalReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters, material ) {\n\n\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters, material ) {\n\n\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\n\n\tvar gl = renderer.getContext();\n\n\tvar defines = material.defines;\n\n\tvar vertexShader = shader.vertexShader;\n\tvar fragmentShader = shader.fragmentShader;\n\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters, material );\n\tvar envMapModeDefine = generateEnvMapModeDefine( parameters, material );\n\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters, material );\n\n\n\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\n\n\tvar customDefines = generateDefines( defines );\n\n\tvar program = gl.createProgram();\n\n\tvar prefixVertex, prefixFragment;\n\n\tvar renderTarget = renderer.getRenderTarget();\n\tvar numMultiviewViews = renderTarget && renderTarget.isWebGLMultiviewRenderTarget ? renderTarget.numViews : 0;\n\n\tif ( material.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\n\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\n\n\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\tif ( material.isShaderMaterial &&\n\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t}\n\n\t\t// GLSL 3.0 conversion\n\n\t\tprefixVertex = [\n\t\t\t'#version 300 es\\n',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#version 300 es\\n',\n\t\t\t'#define varying in',\n\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t// Multiview\n\n\t\tif ( numMultiviewViews > 0 ) {\n\n\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t[\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\n\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t].join( '\\n' )\n\t\t\t);\n\n\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t[\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform mat3 normalMatrix;'\n\t\t\t\t].join( '\\n' ),\n\t\t\t\t[\n\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\n\n\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\n\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\n\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\n\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\n\t\t\t\t].join( '\\n' )\n\t\t\t);\n\n\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t[\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t].join( '\\n' )\n\t\t\t);\n\n\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t[\n\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\n\t\t\t\t].join( '\\n' )\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tvar vertexGlsl = prefixVertex + vertexShader;\n\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( material.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// clean up\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tvar cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tvar cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = shader.name;\n\tthis.id = programIdCount ++;\n\tthis.code = code;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\tthis.numMultiviewViews = numMultiviewViews;\n\n\treturn this;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"instancing\",\n\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\"sheen\"\n\t];\n\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\tvar precision = capabilities.precision;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tisWebGL2: capabilities.isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: !! material.sheen,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\tarray.push( renderer.gammaOutput );\n\n\t\tarray.push( renderer.gammaFactor );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n/**\n * @author fordacious / fordacious.github.io\n */\n\nfunction WebGLProperties() {\n\n\tvar properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tvar map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tvar renderItems = [];\n\tvar renderItemsIndex = 0;\n\n\tvar opaque = [];\n\tvar transparent = [];\n\n\tvar defaultProgram = { id: - 1 };\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t}\n\n\tfunction sort() {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t}\n\n\treturn {\n\t\topaque: opaque,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tvar lists = new WeakMap();\n\n\tfunction onSceneDispose( event ) {\n\n\t\tvar scene = event.target;\n\n\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\tlists.delete( scene );\n\n\t}\n\n\tfunction get( scene, camera ) {\n\n\t\tvar cameras = lists.get( scene );\n\t\tvar list;\n\t\tif ( cameras === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, new WeakMap() );\n\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t} else {\n\n\t\t\tlist = cameras.get( camera );\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tcameras.set( camera, list );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nvar nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tnumDirectionalShadows: - 1,\n\t\tnumPointShadows: - 1,\n\t\tnumSpotShadows: - 1\n\n\t};\n\n\tfor ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar numDirectionalShadows = 0;\n\t\tvar numPointShadows = 0;\n\t\tvar numSpotShadows = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tvar hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLRenderState() {\n\n\tvar lights = new WebGLLights();\n\n\tvar lightsArray = [];\n\tvar shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( camera ) {\n\n\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t}\n\n\tvar state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates() {\n\n\tvar renderStates = new WeakMap();\n\n\tfunction onSceneDispose( event ) {\n\n\t\tvar scene = event.target;\n\n\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\trenderStates.delete( scene );\n\n\t}\n\n\tfunction get( scene, camera ) {\n\n\t\tvar renderState;\n\n\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\trenderState = new WebGLRenderState();\n\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t} else {\n\n\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nfunction MeshDepthMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDepthMaterial.prototype = Object.create( Material.prototype );\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\nMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nfunction MeshDistanceMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDistanceMaterial';\n\n\tthis.referencePosition = new Vector3();\n\tthis.nearDistance = 1;\n\tthis.farDistance = 1000;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.fog = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDistanceMaterial.prototype = Object.create( Material.prototype );\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.referencePosition.copy( source.referencePosition );\n\tthis.nearDistance = source.nearDistance;\n\tthis.farDistance = source.farDistance;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\treturn this;\n\n};\n\nvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n  \\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\\n}\";\n\nvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\tvar _frustum = new Frustum(),\n\n\t\t_shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\tdefines: {\n\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t},\n\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vsm_vert,\n\n\t\tfragmentShader: vsm_frag\n\n\t} );\n\n\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\tvar fullScreenTri = new BufferGeometry();\n\tfullScreenTri.addAttribute(\n\t\t\"position\",\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t// init\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tvar _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\t\t\tvar shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, camera, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizonal pass\n\n\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( light.isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = false;\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t}\n\n\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLState( gl, extensions, utils, capabilities ) {\n\n\tfunction ColorBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar color = new Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar colorBuffer = new ColorBuffer();\n\tvar depthBuffer = new DepthBuffer();\n\tvar stencilBuffer = new StencilBuffer();\n\n\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar enabledCapabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentProgram = null;\n\n\tvar currentBlendingEnabled = null;\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( 35661 );\n\n\tvar lineWidthAvailable = false;\n\tvar version = 0;\n\tvar glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new Vector4();\n\tvar currentViewport = new Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction getCompressedTextureFormats() {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( 34467 );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tvar flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tvar stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tenabledCapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\tenable: enable,\n\t\tdisable: disable,\n\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tvar _videoTextures = new WeakMap();\n\tvar _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\n\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tvar scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\n\n\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( capabilities.isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t}\n\n\tfunction getInternalFormat( glFormat, glType ) {\n\n\t\tif ( ! capabilities.isWebGL2 ) return glFormat;\n\n\t\tvar internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 6407 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34837;\n\t\t\tif ( glType === 5131 ) internalFormat = 34843;\n\t\t\tif ( glType === 5121 ) internalFormat = 32849;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = 32856;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\tinfo.memory.textures -= 2;\n\n\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tvar textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tvar textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tvar mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t} else {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tvar extension;\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, utils.convert( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, 10243, utils.convert( texture.wrapT ) );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, utils.convert( texture.wrapR ) );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, utils.convert( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, utils.convert( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tvar textureType = 3553;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = 35866;\n\t\tif ( texture.isDataTexture3D ) textureType = 32879;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );\n\n\t\tvar supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = 6402;\n\n\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\tif ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t} else if ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tglInternalFormat = 33189;\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfo.memory.textures ++;\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\tvar width = renderTarget.width;\n\t\t\t\tvar height = renderTarget.height;\n\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t_gl.bindTexture( 35866, colorTexture );\n\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\n\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\n\n\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\n\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\n\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\n\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\n\n\t\t\t\t}\n\n\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\t\t\t\t_gl.bindTexture( 35866, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( 34067, null );\n\n\t\t} else if ( ! isMultiview ) {\n\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( 3553, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tvar width = renderTarget.width;\n\t\t\t\tvar height = renderTarget.height;\n\t\t\t\tvar mask = 16384;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\tMath.min( capabilities.maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tvar frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tvar warnedTexture2D = false;\n\tvar warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t// TODO: unify these code paths\n\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t// this function alone should take care of cube textures\n\t\t\tsetTextureCube( texture, slot );\n\n\t\t} else {\n\n\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\n/**\n * @author thespite / http://www.twitter.com/thespite\n */\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tfunction convert( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === RepeatWrapping ) return 10497;\n\t\tif ( p === ClampToEdgeWrapping ) return 33071;\n\t\tif ( p === MirroredRepeatWrapping ) return 33648;\n\n\t\tif ( p === NearestFilter ) return 9728;\n\t\tif ( p === NearestMipmapNearestFilter ) return 9984;\n\t\tif ( p === NearestMipmapLinearFilter ) return 9986;\n\n\t\tif ( p === LinearFilter ) return 9729;\n\t\tif ( p === LinearMipmapNearestFilter ) return 9985;\n\t\tif ( p === LinearMipmapLinearFilter ) return 9987;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\t\tif ( p === UnsignedShort565Type ) return 33635;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBFormat ) return 6407;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\tif ( p === AddEquation ) return 32774;\n\t\tif ( p === SubtractEquation ) return 32778;\n\t\tif ( p === ReverseSubtractEquation ) return 32779;\n\n\t\tif ( p === ZeroFactor ) return 0;\n\t\tif ( p === OneFactor ) return 1;\n\t\tif ( p === SrcColorFactor ) return 768;\n\t\tif ( p === OneMinusSrcColorFactor ) return 769;\n\t\tif ( p === SrcAlphaFactor ) return 770;\n\t\tif ( p === OneMinusSrcAlphaFactor ) return 771;\n\t\tif ( p === DstAlphaFactor ) return 772;\n\t\tif ( p === OneMinusDstAlphaFactor ) return 773;\n\n\t\tif ( p === DstColorFactor ) return 774;\n\t\tif ( p === OneMinusDstColorFactor ) return 775;\n\t\tif ( p === SrcAlphaSaturateFactor ) return 776;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tif ( p === MinEquation ) return 32775;\n\t\t\t\tif ( p === MaxEquation ) return 32776;\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\n/**\n * @author fernandojsg / http://fernandojsg.com\n * @author Takahiro https://github.com/takahirox\n */\n\nfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n\tthis.depthBuffer = false;\n\tthis.stencilBuffer = false;\n\n\tthis.numViews = numViews;\n\n}\n\nWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\tconstructor: WebGLMultiviewRenderTarget,\n\n\tisWebGLMultiviewRenderTarget: true,\n\n\tcopy: function ( source ) {\n\n\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\tthis.numViews = source.numViews;\n\n\t\treturn this;\n\n\t},\n\n\tsetNumViews: function ( numViews ) {\n\n\t\tif ( this.numViews !== numViews ) {\n\n\t\t\tthis.numViews = numViews;\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author fernandojsg / http://fernandojsg.com\n * @author Takahiro https://github.com/takahirox\n */\n\nfunction WebGLMultiview( renderer, gl ) {\n\n\tvar DEFAULT_NUMVIEWS = 2;\n\n\tvar extensions = renderer.extensions;\n\tvar properties = renderer.properties;\n\n\tvar renderTarget, currentRenderTarget;\n\tvar mat3, mat4, cameraArray, renderSize;\n\n\tvar available;\n\tvar maxNumViews = 0;\n\n\t//\n\n\tfunction isAvailable() {\n\n\t\tif ( available === undefined ) {\n\n\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\tif ( available ) {\n\n\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\trenderSize = new Vector2();\n\t\t\t\tmat4 = [];\n\t\t\t\tmat3 = [];\n\t\t\t\tcameraArray = [];\n\n\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn available;\n\n\t}\n\n\tfunction getCameraArray( camera ) {\n\n\t\tif ( camera.isArrayCamera ) return camera.cameras;\n\n\t\tcameraArray[ 0 ] = camera;\n\n\t\treturn cameraArray;\n\n\t}\n\n\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t}\n\n\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t}\n\n\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\tvar cameras = getCameraArray( camera );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t}\n\n\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t}\n\n\tfunction isMultiviewCompatible( camera ) {\n\n\t\tif ( camera.isArrayCamera === undefined ) return true;\n\n\t\tvar cameras = camera.cameras;\n\n\t\tif ( cameras.length > maxNumViews ) return false;\n\n\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction resizeRenderTarget( camera ) {\n\n\t\tif ( currentRenderTarget ) {\n\n\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t} else {\n\n\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t}\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t} else {\n\n\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t}\n\n\t}\n\n\tfunction attachCamera( camera ) {\n\n\t\tif ( isMultiviewCompatible( camera ) === false ) return;\n\n\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\tresizeRenderTarget( camera );\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t}\n\n\tfunction detachCamera( camera ) {\n\n\t\tif ( renderTarget !== renderer.getRenderTarget() ) return;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\tflush( camera );\n\n\t}\n\n\tfunction flush( camera ) {\n\n\t\tvar srcRenderTarget = renderTarget;\n\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\tvar viewWidth = srcRenderTarget.width;\n\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\tvar x1 = viewport.x;\n\t\t\t\tvar y1 = viewport.y;\n\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\n\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\n\n\t\t}\n\n\t}\n\n\tthis.isAvailable = isAvailable;\n\tthis.attachCamera = attachCamera;\n\tthis.detachCamera = detachCamera;\n\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Group() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Group';\n\n}\n\nGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Group,\n\n\tisGroup: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ArrayCamera( array ) {\n\n\tPerspectiveCamera.call( this );\n\n\tthis.cameras = array || [];\n\n}\n\nArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\tconstructor: ArrayCamera,\n\n\tisArrayCamera: true\n\n} );\n\n/**\n * @author jsantell / https://www.jsantell.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar cameraLPos = new Vector3();\nvar cameraRPos = new Vector3();\n\n/**\n * Assumes 2 cameras that are parallel and share an X-axis, and that\n * the cameras' projection and world matrices have already been set.\n * And that near and far planes are identical for both cameras.\n * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n */\nfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\tvar projL = cameraL.projectionMatrix.elements;\n\tvar projR = cameraR.projectionMatrix.elements;\n\n\t// VR systems will have identical far and near planes, and\n\t// most likely identical top and bottom frustum extents.\n\t// Use the left camera for these values.\n\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\tvar left = near * leftFov;\n\tvar right = near * rightFov;\n\n\t// Calculate the new camera's position offset from the\n\t// left camera. xOffset should be roughly half `ipd`.\n\tvar zOffset = ipd / ( - leftFov + rightFov );\n\tvar xOffset = zOffset * - leftFov;\n\n\t// TODO: Better way to apply this offset?\n\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\tcamera.translateX( xOffset );\n\tcamera.translateZ( zOffset );\n\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t// Find the union of the frustum values of the cameras and scale\n\t// the values so that the near plane's position does not change in world space,\n\t// although must now be relative to the new union camera.\n\tvar near2 = near + zOffset;\n\tvar far2 = far + zOffset;\n\tvar left2 = left - xOffset;\n\tvar right2 = right + ( ipd - xOffset );\n\tvar top2 = topFov * far / far2 * near2;\n\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebVRManager( renderer ) {\n\n\tvar renderWidth, renderHeight;\n\tvar scope = this;\n\n\tvar device = null;\n\tvar frameData = null;\n\n\tvar poseTarget = null;\n\n\tvar controllers = [];\n\tvar standingMatrix = new Matrix4();\n\tvar standingMatrixInverse = new Matrix4();\n\n\tvar framebufferScaleFactor = 1.0;\n\n\tvar referenceSpaceType = 'local-floor';\n\n\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\tframeData = new window.VRFrameData();\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t}\n\n\tvar matrixWorldInverse = new Matrix4();\n\tvar tempQuaternion = new Quaternion();\n\tvar tempPosition = new Vector3();\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.viewport = new Vector4();\n\tcameraL.layers.enable( 1 );\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.viewport = new Vector4();\n\tcameraR.layers.enable( 2 );\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tfunction isPresenting() {\n\n\t\treturn device !== null && device.isPresenting === true;\n\n\t}\n\n\tvar currentSize = new Vector2(), currentPixelRatio;\n\n\tfunction onVRDisplayPresentChange() {\n\n\t\tif ( isPresenting() ) {\n\n\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\n\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\n\n\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\trenderer.getSize( currentSize );\n\n\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\n\n\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\n\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\n\n\t\t\tanimation.start();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t} else {\n\n\t\t\tif ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t}\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tvar triggers = [];\n\n\tfunction findGamepad( id ) {\n\n\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\n\n\t\tfor ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {\n\n\t\t\tvar gamepad = gamepads[ i ];\n\n\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\n\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\n\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\n\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\n\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\n\n\t\t\t\tif ( j === id ) return gamepad;\n\n\t\t\t\tj ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateControllers() {\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tvar controller = controllers[ i ];\n\n\t\t\tvar gamepad = findGamepad( i );\n\n\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\n\n\t\t\t\tif ( gamepad.pose === null ) return;\n\n\t\t\t\t// Pose\n\n\t\t\t\tvar pose = gamepad.pose;\n\n\t\t\t\tif ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );\n\n\t\t\t\tif ( pose.position !== null ) controller.position.fromArray( pose.position );\n\t\t\t\tif ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );\n\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\n\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\n\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t// Trigger\n\n\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\n\n\t\t\t\tif ( triggers[ i ] === undefined ) triggers[ i ] = false;\n\n\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\tif ( triggers[ i ] === true ) {\n\n\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\n\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateViewportFromBounds( viewport, bounds ) {\n\n\t\tif ( bounds !== null && bounds.length === 4 ) {\n\n\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.getController = function ( id ) {\n\n\t\tvar controller = controllers[ id ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new Group();\n\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\tcontroller.visible = false;\n\n\t\t\tcontrollers[ id ] = controller;\n\n\t\t}\n\n\t\treturn controller;\n\n\t};\n\n\tthis.getDevice = function () {\n\n\t\treturn device;\n\n\t};\n\n\tthis.setDevice = function ( value ) {\n\n\t\tif ( value !== undefined ) device = value;\n\n\t\tanimation.setContext( value );\n\n\t};\n\n\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\tframebufferScaleFactor = value;\n\n\t};\n\n\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\treferenceSpaceType = value;\n\n\t};\n\n\tthis.setPoseTarget = function ( object ) {\n\n\t\tif ( object !== undefined ) poseTarget = object;\n\n\t};\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\n\n\t\tif ( isPresenting() === false ) {\n\n\t\t\tcamera.position.set( 0, userHeight, 0 );\n\t\t\tcamera.rotation.set( 0, 0, 0 );\n\n\t\t\treturn camera;\n\n\t\t}\n\n\t\tdevice.depthNear = camera.near;\n\t\tdevice.depthFar = camera.far;\n\n\t\tdevice.getFrameData( frameData );\n\n\t\t//\n\n\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t\t} else {\n\n\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar pose = frameData.pose;\n\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n\t\tposeObject.matrix.copy( standingMatrix );\n\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\n\n\t\tif ( pose.orientation !== null ) {\n\n\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\tposeObject.quaternion.multiply( tempQuaternion );\n\n\t\t}\n\n\t\tif ( pose.position !== null ) {\n\n\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\ttempPosition.fromArray( pose.position );\n\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\tposeObject.position.add( tempPosition );\n\n\t\t}\n\n\t\tposeObject.updateMatrixWorld();\n\n\t\t//\n\n\t\tcameraL.near = camera.near;\n\t\tcameraR.near = camera.near;\n\n\t\tcameraL.far = camera.far;\n\t\tcameraR.far = camera.far;\n\n\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t// TODO (mrdoob) Double check this code\n\n\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t}\n\n\t\tvar parent = poseObject.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t}\n\n\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t//\n\n\t\tvar layers = device.getLayers();\n\n\t\tif ( layers.length ) {\n\n\t\t\tvar layer = layers[ 0 ];\n\n\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\n\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\n\n\t\t}\n\n\t\tupdateControllers();\n\n\t\treturn cameraVR;\n\n\t};\n\n\tthis.getStandingMatrix = function () {\n\n\t\treturn standingMatrix;\n\n\t};\n\n\tthis.isPresenting = isPresenting;\n\n\t// Animation Loop\n\n\tvar animation = new WebGLAnimation();\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tanimation.setAnimationLoop( callback );\n\n\t\tif ( isPresenting() ) animation.start();\n\n\t};\n\n\tthis.submitFrame = function () {\n\n\t\tif ( isPresenting() ) device.submitFrame();\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t}\n\n\t};\n\n\t// DEPRECATED\n\n\tthis.setFrameOfReferenceType = function () {\n\n\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t};\n\n}\n\nObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebXRManager( renderer, gl ) {\n\n\tvar scope = this;\n\n\tvar session = null;\n\n\t// var framebufferScaleFactor = 1.0;\n\n\tvar referenceSpace = null;\n\tvar referenceSpaceType = 'local-floor';\n\n\tvar pose = null;\n\n\tvar controllers = [];\n\tvar inputSources = [];\n\n\tfunction isPresenting() {\n\n\t\treturn session !== null && referenceSpace !== null;\n\n\t}\n\n\t//\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.layers.enable( 1 );\n\tcameraL.viewport = new Vector4();\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.layers.enable( 2 );\n\tcameraR.viewport = new Vector4();\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.getController = function ( id ) {\n\n\t\tvar controller = controllers[ id ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new Group();\n\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\tcontroller.visible = false;\n\n\t\t\tcontrollers[ id ] = controller;\n\n\t\t}\n\n\t\treturn controller;\n\n\t};\n\n\t//\n\n\tfunction onSessionEvent( event ) {\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tif ( inputSources[ i ] === event.inputSource ) {\n\n\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction onSessionEnd() {\n\n\t\trenderer.setFramebuffer( null );\n\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\tanimation.stop();\n\n\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t}\n\n\tfunction onRequestReferenceSpace( value ) {\n\n\t\treferenceSpace = value;\n\n\t\tanimation.setContext( session );\n\t\tanimation.start();\n\n\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t}\n\n\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t// framebufferScaleFactor = value;\n\n\t};\n\n\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\treferenceSpaceType = value;\n\n\t};\n\n\tthis.getSession = function () {\n\n\t\treturn session;\n\n\t};\n\n\tthis.setSession = function ( value ) {\n\n\t\tsession = value;\n\n\t\tif ( session !== null ) {\n\n\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\n\n\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t//\n\n\t\t\tinputSources = session.inputSources;\n\n\t\t\tsession.addEventListener( 'inputsourceschange', function () {\n\n\t\t\t\tinputSources = session.inputSources;\n\t\t\t\tconsole.log( inputSources );\n\n\t\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\tvar controller = controllers[ i ];\n\t\t\t\t\tcontroller.userData.inputSource = inputSources[ i ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t};\n\n\tfunction updateCamera( camera, parent ) {\n\n\t\tif ( parent === null ) {\n\n\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t} else {\n\n\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t}\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t}\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tif ( isPresenting() ) {\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t}\n\n\t\treturn camera;\n\n\t};\n\n\tthis.isPresenting = isPresenting;\n\n\t// Animation Loop\n\n\tvar onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\tif ( pose !== null ) {\n\n\t\t\tvar views = pose.views;\n\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\tvar view = views[ i ];\n\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\n\n\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tvar controller = controllers[ i ];\n\n\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = false;\n\n\t\t}\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tvar animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\n\t};\n\n\tthis.dispose = function () {};\n\n\t// DEPRECATED\n\n\tthis.getStandingMatrix = function () {\n\n\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\n\t\treturn new Matrix4();\n\n\t};\n\n\tthis.getDevice = function () {\n\n\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\n\n\t};\n\n\tthis.setDevice = function () {\n\n\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\n\n\t};\n\n\tthis.setFrameOfReferenceType = function () {\n\n\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t};\n\n\tthis.submitFrame = function () {};\n\n}\n\nObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nfunction WebGLRenderer( parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tvar currentRenderList = null;\n\tvar currentRenderState = null;\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t\t_isContextLost = false,\n\n\t\t// internal state cache\n\n\t\t_framebuffer = null,\n\n\t\t_currentActiveCubeFace = 0,\n\t\t_currentActiveMipmapLevel = 0,\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\n\t\t// geometry and program caching\n\n\t\t_currentGeometryProgram = {\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false\n\t\t},\n\n\t\t_currentCamera = null,\n\t\t_currentArrayCamera = null,\n\n\t\t_currentViewport = new Vector4(),\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t//\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3();\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\txrCompatible: true\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tvar extensions, capabilities, state, info;\n\tvar properties, textures, attributes, geometries, objects;\n\tvar programCache, renderLists, renderStates;\n\n\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tvar utils;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\textensions.get( 'OES_texture_float' );\n\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t}\n\n\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, utils, capabilities );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tattributes = new WebGLAttributes( _gl );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates();\n\n\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// vr\n\n\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator && 'supportsSession' in navigator.xr ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\n\n\tthis.vr = vr;\n\n\t// Multiview\n\n\tvar multiview = new WebGLMultiview( _this, _gl );\n\n\t// shadow map\n\n\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( vr.isPresenting() ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\ttarget = new Vector4();\n\n\t\t}\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= 16384;\n\t\tif ( depth === undefined || depth ) bits |= 256;\n\t\tif ( stencil === undefined || stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tobjects.dispose();\n\n\t\tvr.dispose();\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\n\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\t\tvar rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tvar attribute;\n\t\tvar renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( 4 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( 5 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( 6 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.material ) {\n\n\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tvar onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( vr.isPresenting() ) return;\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tvar animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\tvr.setAnimationLoop( callback );\n\n\t\tanimation.start();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar renderTarget, forceClear;\n\n\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t}\n\n\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\tforceClear = arguments[ 3 ];\n\n\t\t}\n\n\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost ) return;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram.geometry = null;\n\t\t_currentGeometryProgram.program = null;\n\t\t_currentGeometryProgram.wireframe = false;\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tcamera = vr.getCamera( camera );\n\n\t\t}\n\n\t\t//\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort();\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\tif ( renderTarget !== undefined ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\tmultiview.attachCamera( camera );\n\n\t\t}\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tif ( multiview.isAvailable() ) {\n\n\t\t\t\tmultiview.detachCamera( camera );\n\n\t\t\t}\n\n\t\t\tvr.submitFrame();\n\n\t\t}\n\n\t\t// _gl.finish();\n\n\t\tcurrentRenderList = null;\n\t\tcurrentRenderState = null;\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\trenderObjectImmediate( object, program );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar lights = currentRenderState.state.lights;\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tvar lightsStateVersion = lights.state.version;\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tprogramChange = false;\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\t// Computing code again as onBeforeCompile may have changed the shaders\n\t\t\tcode = programCache.getProgramCode( material, parameters );\n\n\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.fog = fog;\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\ttextures.resetTextureUnits();\n\n\t\tvar materialProperties = properties.get( material );\n\t\tvar lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate === false ) {\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t}\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\t// RectAreaLight Texture\n\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\n\n\t\t} else {\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\n\t\t}\n\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _height * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\trefreshUniformsPhong( uniforms, material );\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\tif ( material.sheen ) uniforms.sheen.value.copy( material.sheen );\n\n\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.transparency.value = material.transparency;\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\t//\n\tthis.setFramebuffer = function ( value ) {\n\n\t\tif ( _framebuffer !== value ) _gl.bindFramebuffer( 36160, value );\n\n\t\t_framebuffer = value;\n\n\t};\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar framebuffer = _framebuffer;\n\t\tvar isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\tvar width = texture.image.width;\n\t\tvar height = texture.image.height;\n\t\tvar glFormat = utils.convert( texture.format );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( 3553, level || 0, glFormat, position.x, position.y, width, height, 0 );\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\tvar width = srcTexture.image.width;\n\t\tvar height = srcTexture.image.height;\n\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t}\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction FogExp2( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n}\n\nObject.assign( FogExp2.prototype, {\n\n\tisFogExp2: true,\n\n\tclone: function () {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t},\n\n\ttoJSON: function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Fog( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n}\n\nObject.assign( Fog.prototype, {\n\n\tisFog: true,\n\n\tclone: function () {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBuffer( array, stride ) {\n\n\tthis.array = array;\n\tthis.stride = stride;\n\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( InterleavedBuffer.prototype, {\n\n\tisInterleavedBuffer: true,\n\n\tonUploadCallback: function () {},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n\tthis.normalized = normalized === true;\n\n}\n\nObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\tcount: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.count;\n\n\t\t}\n\n\t},\n\n\tarray: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.array;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( InterleavedBufferAttribute.prototype, {\n\n\tisInterleavedBufferAttribute: true,\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  map: new THREE.Texture( <Image> ),\n *  rotation: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nfunction SpriteMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.sizeAttenuation = true;\n\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nSpriteMaterial.prototype = Object.create( Material.prototype );\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nSpriteMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar _geometry;\n\nvar _intersectPoint = new Vector3();\nvar _worldScale = new Vector3();\nvar _mvPosition = new Vector3();\n\nvar _alignedPosition = new Vector2();\nvar _rotatedPosition = new Vector2();\nvar _viewWorldMatrix = new Matrix4();\n\nvar _vA$1 = new Vector3();\nvar _vB$1 = new Vector3();\nvar _vC$1 = new Vector3();\n\nvar _uvA$1 = new Vector2();\nvar _uvB$1 = new Vector2();\nvar _uvC$1 = new Vector2();\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tif ( _geometry === undefined ) {\n\n\t\t_geometry = new BufferGeometry();\n\n\t\tvar float32Array = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t] );\n\n\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t_geometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t_geometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t}\n\n\tthis.geometry = _geometry;\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\tthis.center = new Vector2( 0.5, 0.5 );\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tvar rotation = this.material.rotation;\n\t\tvar sin, cos;\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tvar center = this.center;\n\n\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA$1.set( 0, 0 );\n\t\t_uvB$1.set( 1, 0 );\n\t\t_uvC$1.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\treturn this;\n\n\t}\n\n\n} );\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v1$4 = new Vector3();\nvar _v2$2 = new Vector3();\n\nfunction LOD() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n\tthis.autoUpdate = true;\n\n}\n\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LOD,\n\n\tisLOD: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t},\n\n\tupdate: function ( camera ) {\n\n\t\tvar levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction SkinnedMesh( geometry, material ) {\n\n\tif ( geometry && geometry.isGeometry ) {\n\n\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t}\n\n\tMesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = 'attached';\n\tthis.bindMatrix = new Matrix4();\n\tthis.bindMatrixInverse = new Matrix4();\n\n}\n\nSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: SkinnedMesh,\n\n\tisSkinnedMesh: true,\n\n\tbind: function ( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tvar vector = new Vector4();\n\n\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.x = skinWeight.getX( i );\n\t\t\tvector.y = skinWeight.getY( i );\n\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nvar _offsetMatrix = new Matrix4();\nvar _identityMatrix = new Matrix4();\n\nfunction Skeleton( bones, boneInverses ) {\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\tthis.frame = - 1;\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone, i, il;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: function () {\n\n\t\tvar bones = this.bones;\n\t\tvar boneInverses = this.boneInverses;\n\t\tvar boneMatrices = this.boneMatrices;\n\t\tvar boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== undefined ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t},\n\n\tgetBoneByName: function ( name ) {\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction Bone() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Bone';\n\n}\n\nBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Bone,\n\n\tisBone: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction InstancedMesh( geometry, material, count ) {\n\n\tMesh.call( this, geometry, material );\n\n\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\tthis.count = count;\n\n}\n\nInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: InstancedMesh,\n\n\tisInstancedMesh: true,\n\n\traycast: function () {},\n\n\tsetMatrixAt: function ( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t},\n\n\tupdateMorphTargets: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nfunction LineBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.setValues( parameters );\n\n}\n\nLineBasicMaterial.prototype = Object.create( Material.prototype );\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nLineBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _start = new Vector3();\nvar _end = new Vector3();\nvar _inverseMatrix$1 = new Matrix4();\nvar _ray$1 = new Ray();\nvar _sphere$2 = new Sphere();\n\nfunction Line( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Line,\n\n\tisLine: true,\n\n\tcomputeLineDistances: function () {\n\n\t\tvar geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tvar precision = raycaster.linePrecision;\n\n\t\tvar geometry = this.geometry;\n\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t_sphere$2.radius += precision;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tvar localPrecisionSq = localPrecision * localPrecision;\n\n\t\tvar vStart = new Vector3();\n\t\tvar vEnd = new Vector3();\n\t\tvar interSegment = new Vector3();\n\t\tvar interRay = new Vector3();\n\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar nbVertices = vertices.length;\n\n\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\tif ( distSq > localPrecisionSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _start$1 = new Vector3();\nvar _end$1 = new Vector3();\n\nfunction LineSegments( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n}\n\nLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineSegments,\n\n\tisLineSegments: true,\n\n\tcomputeLineDistances: function () {\n\n\t\tvar geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\tvar lineDistances = [];\n\n\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mgreter / http://github.com/mgreter\n */\n\nfunction LineLoop( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineLoop';\n\n}\n\nLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineLoop,\n\n\tisLineLoop: true,\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n *\n *  morphTargets: <bool>\n * }\n */\n\nfunction PointsMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n}\n\nPointsMaterial.prototype = Object.create( Material.prototype );\nPointsMaterial.prototype.constructor = PointsMaterial;\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nPointsMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar _inverseMatrix$2 = new Matrix4();\nvar _ray$2 = new Ray();\nvar _sphere$3 = new Sphere();\nvar _position$1 = new Vector3();\n\nfunction Points( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.updateMorphTargets();\n\n}\n\nPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Points,\n\n\tisPoints: true,\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tvar geometry = this.geometry;\n\t\tvar matrixWorld = this.matrixWorld;\n\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t_sphere$3.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tvar intersectPoint = new Vector3();\n\n\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.format = format !== undefined ? format : RGBFormat;\n\n\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\tthis.generateMipmaps = false;\n\n}\n\nVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\tconstructor: VideoTexture,\n\n\tisVideoTexture: true,\n\n\tupdate: function () {\n\n\t\tvar video = this.image;\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n}\n\nCanvasTexture.prototype = Object.create( Texture.prototype );\nCanvasTexture.prototype.constructor = CanvasTexture;\nCanvasTexture.prototype.isCanvasTexture = true;\n\n/**\n * @author Matt DesLauriers / @mattdesl\n * @author atix / arthursilber.de\n */\n\nfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\tformat = format !== undefined ? format : DepthFormat;\n\n\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t}\n\n\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps\t= false;\n\n}\n\nDepthTexture.prototype = Object.create( Texture.prototype );\nDepthTexture.prototype.constructor = DepthTexture;\nDepthTexture.prototype.isDepthTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WireframeGeometry( geometry ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'WireframeGeometry';\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar i, j, l, o, ol;\n\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\tvar vertex;\n\n\t// different logic for Geometry and BufferGeometry\n\n\tif ( geometry && geometry.isGeometry ) {\n\n\t\t// create a data structure that contains all edges without duplicates\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\te = edges[ key ];\n\n\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\tvar position, indices, groups;\n\t\tvar group, start, count;\n\t\tvar index1, index2;\n\n\t\tvertex = new Vector3();\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\t\t\tindices = geometry.index;\n\t\t\tgroups = geometry.groups;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t}\n\n\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\tstart = group.start;\n\t\t\t\tcount = group.count;\n\n\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\n\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\nWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n/**\n * @author zz85 / https://github.com/zz85\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n */\n\n// ParametricGeometry\n\nfunction ParametricGeometry( func, slices, stacks ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\tthis.mergeVertices();\n\n}\n\nParametricGeometry.prototype = Object.create( Geometry.prototype );\nParametricGeometry.prototype.constructor = ParametricGeometry;\n\n// ParametricBufferGeometry\n\nfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ParametricBufferGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\tvar EPS = 0.00001;\n\n\tvar normal = new Vector3();\n\n\tvar p0 = new Vector3(), p1 = new Vector3();\n\tvar pu = new Vector3(), pv = new Vector3();\n\n\tvar i, j;\n\n\tif ( func.length < 3 ) {\n\n\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t}\n\n\t// generate vertices, normals and uvs\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tvar v = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tvar u = j / slices;\n\n\t\t\t// vertex\n\n\t\t\tfunc( u, v, p0 );\n\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t// normal\n\n\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, v );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\tvar a = i * sliceCount + j;\n\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t// faces one and two\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PolyhedronGeometry\n\nfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n// PolyhedronBufferGeometry\n\nfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PolyhedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\t// default buffer data\n\n\tvar vertexBuffer = [];\n\tvar uvBuffer = [];\n\n\t// the subdivision creates the vertex buffer data\n\n\tsubdivide( detail );\n\n\t// all vertices should lie on a conceptual sphere with a given radius\n\n\tapplyRadius( radius );\n\n\t// finally, create the uv data\n\n\tgenerateUVs();\n\n\t// build non-indexed geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\tif ( detail === 0 ) {\n\n\t\tthis.computeVertexNormals(); // flat normals\n\n\t} else {\n\n\t\tthis.normalizeNormals(); // smooth normals\n\n\t}\n\n\t// helper functions\n\n\tfunction subdivide( detail ) {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t// get the vertices of the face\n\n\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t// perform subdivision\n\n\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t}\n\n\t}\n\n\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\n\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\tvar v = [];\n\n\t\tvar i, j;\n\n\t\t// construct all of the vertices for this subdivision\n\n\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// construct all of the faces\n\n\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction applyRadius( radius ) {\n\n\t\tvar vertex = new Vector3();\n\n\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tvar vertex = new Vector3();\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t}\n\n\t\tcorrectUVs();\n\n\t\tcorrectSeam();\n\n\t}\n\n\tfunction correctSeam() {\n\n\t\t// handle case when face straddles the seam, see #3269\n\n\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t// uv data of a single face\n\n\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction pushVertex( vertex ) {\n\n\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t}\n\n\tfunction getVertexByIndex( index, vertex ) {\n\n\t\tvar stride = index * 3;\n\n\t\tvertex.x = vertices[ stride + 0 ];\n\t\tvertex.y = vertices[ stride + 1 ];\n\t\tvertex.z = vertices[ stride + 2 ];\n\n\t}\n\n\tfunction correctUVs() {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\tvar centroid = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\tvar azi = azimuth( centroid );\n\n\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t}\n\n\t}\n\n\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t}\n\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t}\n\n\t}\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n}\n\nPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TetrahedronGeometry\n\nfunction TetrahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n// TetrahedronBufferGeometry\n\nfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// OctahedronGeometry\n\nfunction OctahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nOctahedronGeometry.prototype = Object.create( Geometry.prototype );\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n// OctahedronBufferGeometry\n\nfunction OctahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t1, 3, 4,\t1, 4, 2\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// IcosahedronGeometry\n\nfunction IcosahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n// IcosahedronBufferGeometry\n\nfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t];\n\n\tvar indices = [\n\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n/**\n * @author Abe Pazos / https://hamoid.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// DodecahedronGeometry\n\nfunction DodecahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n// DodecahedronBufferGeometry\n\nfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t, 0, - r, t,\n\t\t 0, r, - t, 0, r, t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t, 0, - r, t, 0,\n\t\t r, - t, 0, r, t, 0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t, 0, - r, t, 0, - r,\n\t\t- t, 0, r, t, 0, r\n\t];\n\n\tvar indices = [\n\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n\n// TubeGeometry\n\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = bufferGeometry.tangents;\n\tthis.normals = bufferGeometry.normals;\n\tthis.binormals = bufferGeometry.binormals;\n\n\t// create geometry\n\n\tthis.fromBufferGeometry( bufferGeometry );\n\tthis.mergeVertices();\n\n}\n\nTubeGeometry.prototype = Object.create( Geometry.prototype );\nTubeGeometry.prototype.constructor = TubeGeometry;\n\n// TubeBufferGeometry\n\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TubeBufferGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\ttubularSegments = tubularSegments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = frames.tangents;\n\tthis.normals = frames.normals;\n\tthis.binormals = frames.binormals;\n\n\t// helper variables\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\tvar uv = new Vector2();\n\tvar P = new Vector3();\n\n\tvar i, j;\n\n\t// buffer\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\tvar indices = [];\n\n\t// create buffer data\n\n\tgenerateBufferData();\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// functions\n\n\tfunction generateBufferData() {\n\n\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\tgenerateSegment( i );\n\n\t\t}\n\n\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t// at the regular position on the given path\n\t\t//\n\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t// uvs are generated in a separate function.\n\t\t// this makes it easy compute correct values for closed geometries\n\n\t\tgenerateUVs();\n\n\t\t// finally create faces\n\n\t\tgenerateIndices();\n\n\t}\n\n\tfunction generateSegment( i ) {\n\n\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t// retrieve corresponding normal and binormal\n\n\t\tvar N = frames.normals[ i ];\n\t\tvar B = frames.binormals[ i ];\n\n\t\t// generate normals and vertices for the current segment\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tvar sin = Math.sin( v );\n\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t// normal\n\n\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\tnormal.normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\tfunction generateIndices() {\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\nTubeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tdata.path = this.parameters.path.toJSON();\n\n\treturn data;\n\n};\n\n/**\n * @author oosmoxiecode\n * @author Mugen87 / https://github.com/Mugen87\n *\n * based on http://www.blackpawn.com/texts/pqtorus/\n */\n\n// TorusKnotGeometry\n\nfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n}\n\nTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n// TorusKnotBufferGeometry\n\nfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, j;\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar P1 = new Vector3();\n\tvar P2 = new Vector3();\n\n\tvar B = new Vector3();\n\tvar T = new Vector3();\n\tvar N = new Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n}\n\nTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TorusGeometry\n\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\tthis.mergeVertices();\n\n}\n\nTorusGeometry.prototype = Object.create( Geometry.prototype );\nTorusGeometry.prototype.constructor = TorusGeometry;\n\n// TorusBufferGeometry\n\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar center = new Vector3();\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * Port from https://github.com/mapbox/earcut (v2.1.5)\n */\n\nvar Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\tdim = dim || 2;\n\n\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\ttriangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tvar i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tvar p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tvar stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tvar p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\tvar p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tvar p = start;\n\tdo {\n\n\t\tvar a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn p;\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tvar a = start;\n\tdo {\n\n\t\tvar b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tvar queue = [],\n\t\ti, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\tif ( outerNode ) {\n\n\t\tvar b = splitPolygon( outerNode, hole );\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tvar p = outerNode,\n\t\thx = hole.x,\n\t\thy = hole.y,\n\t\tqx = - Infinity,\n\t\tm;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tvar stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y,\n\t\ttanMin = Infinity,\n\t\ttan;\n\n\tp = m.next;\n\n\twhile ( p !== stop ) {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn m;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tvar p = start;\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tvar p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tvar p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tvar p = a,\n\t\tinside = false,\n\t\tpx = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tvar p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tvar sum = 0;\n\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nvar ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tvar holeIndices = []; // array of hole indices\n\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tvar holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n};\n\nfunction removeDupEndPts( points ) {\n\n\tvar l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n// ExtrudeGeometry\n\nfunction ExtrudeGeometry( shapes, options ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\tthis.mergeVertices();\n\n}\n\nExtrudeGeometry.prototype = Object.create( Geometry.prototype );\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\nExtrudeGeometry.prototype.toJSON = function () {\n\n\tvar data = Geometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\tvar options = this.parameters.options;\n\n\treturn toJSON( shapes, options, data );\n\n};\n\n// ExtrudeBufferGeometry\n\nfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ExtrudeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tvar scope = this;\n\n\tvar verticesArray = [];\n\tvar uvArray = [];\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tvar shape = shapes[ i ];\n\t\taddShape( shape );\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\tthis.computeVertexNormals();\n\n\t// functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar placeholder = [];\n\n\t\t// options\n\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\tvar extrudePath = options.extrudePath;\n\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t// deprecated options\n\n\t\tif ( options.amount !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\tdepth = options.amount;\n\n\t\t}\n\n\t\t//\n\n\t\tvar extrudePts, extrudeByPath = false;\n\t\tvar splineTube, binormal, normal, position2;\n\n\t\tif ( extrudePath ) {\n\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t// SETUP TNB variables\n\n\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\tbinormal = new Vector3();\n\t\t\tnormal = new Vector3();\n\t\t\tposition2 = new Vector3();\n\n\t\t}\n\n\t\t// Safeguards if bevels are not enabled\n\n\t\tif ( ! bevelEnabled ) {\n\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\t\t\tbevelOffset = 0;\n\n\t\t}\n\n\t\t// Variables initialization\n\n\t\tvar ahole, h, hl; // looping of holes\n\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\n\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\tif ( reverse ) {\n\n\t\t\tvertices = vertices.reverse();\n\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t/* Vertices */\n\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tvertices = vertices.concat( ahole );\n\n\t\t}\n\n\n\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t}\n\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\n\n\t\t// Find directions for point movement\n\n\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t// not collinear\n\n\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t}\n\n\n\t\tvar contourMovements = [];\n\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t}\n\n\t\tvar holesMovements = [],\n\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\toneHoleMovements = [];\n\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t}\n\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t}\n\n\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tbs = bevelSize + bevelOffset;\n\n\t\t// Back facing vertices\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\n\t\tvar s;\n\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// Add bevel segments planes\n\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t// contract shape\n\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t}\n\n\t\t\t// expand holes\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Faces */\n\n\t\t// Top and bottom faces\n\n\t\tbuildLidFaces();\n\n\t\t// Sides faces\n\n\t\tbuildSideFaces();\n\n\n\t\t/////  Internal functions\n\n\t\tfunction buildLidFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Bottom faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// Top faces\n\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t}\n\n\t\t// Create faces for the z-sides of the shape\n\n\t\tfunction buildSideFaces() {\n\n\t\t\tvar start = verticesArray.length / 3;\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t}\n\n\n\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t}\n\n\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\n\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\tvar s = 0,\n\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction v( x, y, z ) {\n\n\t\t\tplaceholder.push( x );\n\t\t\tplaceholder.push( y );\n\t\t\tplaceholder.push( z );\n\n\t\t}\n\n\n\t\tfunction f3( a, b, c ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\n\t\t}\n\n\t\tfunction f4( a, b, c, d ) {\n\n\t\t\taddVertex( a );\n\t\t\taddVertex( b );\n\t\t\taddVertex( d );\n\n\t\t\taddVertex( b );\n\t\t\taddVertex( c );\n\t\t\taddVertex( d );\n\n\n\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\taddUV( uvs[ 0 ] );\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\taddUV( uvs[ 1 ] );\n\t\t\taddUV( uvs[ 2 ] );\n\t\t\taddUV( uvs[ 3 ] );\n\n\t\t}\n\n\t\tfunction addVertex( index ) {\n\n\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t}\n\n\n\t\tfunction addUV( vector2 ) {\n\n\t\t\tuvArray.push( vector2.x );\n\t\t\tuvArray.push( vector2.y );\n\n\t\t}\n\n\t}\n\n}\n\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\nExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\tvar options = this.parameters.options;\n\n\treturn toJSON( shapes, options, data );\n\n};\n\n//\n\nvar WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\tvar d_x = vertices[ indexD * 3 ];\n\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\nfunction toJSON( shapes, options, data ) {\n\n\t//\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\t//\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\n// TextGeometry\n\nfunction TextGeometry( text, parameters ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TextGeometry';\n\n\tthis.parameters = {\n\t\ttext: text,\n\t\tparameters: parameters\n\t};\n\n\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\tthis.mergeVertices();\n\n}\n\nTextGeometry.prototype = Object.create( Geometry.prototype );\nTextGeometry.prototype.constructor = TextGeometry;\n\n// TextBufferGeometry\n\nfunction TextBufferGeometry( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( ! ( font && font.isFont ) ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextBufferGeometry';\n\n}\n\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// SphereGeometry\n\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nSphereGeometry.prototype = Object.create( Geometry.prototype );\nSphereGeometry.prototype.constructor = SphereGeometry;\n\n// SphereBufferGeometry\n\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\tvar ix, iy;\n\n\tvar index = 0;\n\tvar grid = [];\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = iy / heightSegments;\n\n\t\t// special case for the poles\n\n\t\tvar uOffset = 0;\n\n\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t}\n\n\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\tvar u = ix / widthSegments;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormal.copy( vertex ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\tverticesRow.push( index ++ );\n\n\t\t}\n\n\t\tgrid.push( verticesRow );\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// RingGeometry\n\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nRingGeometry.prototype = Object.create( Geometry.prototype );\nRingGeometry.prototype.constructor = RingGeometry;\n\n// RingBufferGeometry\n\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0.5;\n\touterRadius = outerRadius || 1;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// some helper variables\n\n\tvar segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\n\t\tradius += radiusStep;\n\n\t}\n\n\t// indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n/**\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// LatheGeometry\n\nfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n}\n\nLatheGeometry.prototype = Object.create( Geometry.prototype );\nLatheGeometry.prototype.constructor = LatheGeometry;\n\n// LatheBufferGeometry\n\nfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar base;\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif ( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new Vector3();\n\t\tvar n2 = new Vector3();\n\t\tvar n = new Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\n\t\tbase = segments * points.length * 3;\n\n\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t}\n\n\t}\n\n}\n\nLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n/**\n * @author jonobr1 / http://jonobr1.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// ShapeGeometry\n\nfunction ShapeGeometry( shapes, curveSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( typeof curveSegments === 'object' ) {\n\n\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\tcurveSegments = curveSegments.curveSegments;\n\n\t}\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\tthis.mergeVertices();\n\n}\n\nShapeGeometry.prototype = Object.create( Geometry.prototype );\nShapeGeometry.prototype.constructor = ShapeGeometry;\n\nShapeGeometry.prototype.toJSON = function () {\n\n\tvar data = Geometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON$1( shapes, data );\n\n};\n\n// ShapeBufferGeometry\n\nfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ShapeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tcurveSegments = curveSegments || 12;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar groupStart = 0;\n\tvar groupCount = 0;\n\n\t// allow single and array values for \"shapes\" parameter\n\n\tif ( Array.isArray( shapes ) === false ) {\n\n\t\taddShape( shapes );\n\n\t} else {\n\n\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\taddShape( shapes[ i ] );\n\n\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\tgroupStart += groupCount;\n\t\t\tgroupCount = 0;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t// helper functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar i, l, shapeHole;\n\n\t\tvar indexOffset = vertices.length / 3;\n\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\tvar shapeVertices = points.shape;\n\t\tvar shapeHoles = points.holes;\n\n\t\t// check direction of vertices\n\n\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t}\n\n\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t// join vertices of inner and outer paths to a single array\n\n\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t}\n\n\t\t// vertices, normals, uvs\n\n\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\tnormals.push( 0, 0, 1 );\n\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t}\n\n\t\t// incides\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\tindices.push( a, b, c );\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t}\n\n}\n\nShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\nShapeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON$1( shapes, data );\n\n};\n\n//\n\nfunction toJSON$1( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'EdgesGeometry';\n\n\tthis.parameters = {\n\t\tthresholdAngle: thresholdAngle\n\t};\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t// prepare source geometry\n\n\tvar geometry2;\n\n\tif ( geometry.isBufferGeometry ) {\n\n\t\tgeometry2 = new Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar sourceVertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// generate vertices\n\n\tfor ( key in edges ) {\n\n\t\tvar e = edges[ key ];\n\n\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\nEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// CylinderGeometry\n\nfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCylinderGeometry.prototype = Object.create( Geometry.prototype );\nCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n// CylinderBufferGeometry\n\nfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\theight = height || 1;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar index = 0;\n\tvar indexArray = [];\n\tvar halfHeight = height / 2;\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new Vector3();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// update group counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new Vector2();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\n\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\n\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t}\n\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n}\n\nCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\n// ConeGeometry\n\nfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\nConeGeometry.prototype.constructor = ConeGeometry;\n\n// ConeBufferGeometry\n\nfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n\n// CircleGeometry\n\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCircleGeometry.prototype = Object.create( Geometry.prototype );\nCircleGeometry.prototype.constructor = CircleGeometry;\n\n// CircleBufferGeometry\n\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, s;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\n\t// center point\n\n\tvertices.push( 0, 0, 0 );\n\tnormals.push( 0, 0, 1 );\n\tuvs.push( 0.5, 0.5 );\n\n\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t// vertex\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t// normal\n\n\t\tnormals.push( 0, 0, 1 );\n\n\t\t// uvs\n\n\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\tuvs.push( uv.x, uv.y );\n\n\t}\n\n\t// indices\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\tWireframeGeometry: WireframeGeometry,\n\tParametricGeometry: ParametricGeometry,\n\tParametricBufferGeometry: ParametricBufferGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeBufferGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusBufferGeometry,\n\tTextGeometry: TextGeometry,\n\tTextBufferGeometry: TextBufferGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereBufferGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingBufferGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneBufferGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheBufferGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeBufferGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeBufferGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderBufferGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleBufferGeometry,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxBufferGeometry\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <THREE.Color>\n * }\n */\n\nfunction ShadowMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShadowMaterial';\n\n\tthis.color = new Color( 0x000000 );\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nShadowMaterial.prototype = Object.create( Material.prototype );\nShadowMaterial.prototype.constructor = ShadowMaterial;\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\nShadowMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction RawShaderMaterial( parameters ) {\n\n\tShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n}\n\nRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n *  clearcoat: <float>\n *  clearcoatRoughness: <float>\n *\n *  sheen: <Color>\n *\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearcoat = 0.0;\n\tthis.clearcoatRoughness = 0.0;\n\n\tthis.sheen = null; // null will disable sheen bsdf\n\n\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\tthis.clearcoatNormalMap = null;\n\n\tthis.transparency = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearcoat = source.clearcoat;\n\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\tif ( source.sheen ) this.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\telse this.sheen = null;\n\n\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\tthis.transparency = source.transparency;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.specular = new Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author takahirox / http://github.com/takahirox\n *\n * parameters = {\n *  gradientMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshToonMaterial( parameters ) {\n\n\tMeshPhongMaterial.call( this );\n\n\tthis.defines = { 'TOON': '' };\n\n\tthis.type = 'MeshToonMaterial';\n\n\tthis.gradientMap = null;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\nMeshToonMaterial.prototype.copy = function ( source ) {\n\n\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\tthis.gradientMap = source.gradientMap;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshNormalMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshNormalMaterial.prototype = Object.create( Material.prototype );\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  matcap: new THREE.Texture( <Image> ),\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshMatcapMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'MATCAP': '' };\n\n\tthis.type = 'MeshMatcapMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.matcap = null;\n\n\tthis.map = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalMapType = TangentSpaceNormalMap;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.alphaMap = null;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshMatcapMaterial.prototype = Object.create( Material.prototype );\nMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\nMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'MATCAP': '' };\n\n\tthis.color.copy( source.color );\n\n\tthis.matcap = source.matcap;\n\n\tthis.map = source.map;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalMapType = source.normalMapType;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nfunction LineDashedMaterial( parameters ) {\n\n\tLineBasicMaterial.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.setValues( parameters );\n\n}\n\nLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nLineDashedMaterial.prototype.copy = function ( source ) {\n\n\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n\n\nvar Materials = /*#__PURE__*/Object.freeze({\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tMeshMatcapMaterial: MeshMatcapMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nvar AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n}\n\nObject.assign( Interpolant.prototype, {\n\n\tevaluate: function ( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function () {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function ( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( Interpolant.prototype, {\n\n\t//( 0, t, t0 ), returns this.resultBuffer\n\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t//( N-1, tN-1, t ), returns this.resultBuffer\n\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n} );\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = - 0;\n\tthis._offsetPrev = - 0;\n\tthis._weightNext = - 0;\n\tthis._offsetNext = - 0;\n\n}\n\nCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: LinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: DiscreteInterpolant,\n\n\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\tthis.name = name;\n\n\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n}\n\n// Static methods\n\nObject.assign( KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\ttoJSON: function ( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n} );\n\nObject.assign( KeyframeTrack.prototype, {\n\n\tconstructor: KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function ( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t},\n\n\tgetInterpolation: function () {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function () {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function ( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function ( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function ( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function () {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function () {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\twriteIndex = 1,\n\t\t\tlastIndex = times.length - 1;\n\n\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\tvar TypedKeyframeTrack = this.constructor;\n\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction BooleanKeyframeTrack( name, times, values ) {\n\n\tKeyframeTrack.call( this, name, times, values );\n\n}\n\nBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: NumberKeyframeTrack,\n\n\tValueTypeName: 'number'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: QuaternionLinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nfunction AnimationClip( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tvar times = [], values = [];\n\n\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nObject.assign( AnimationClip, {\n\n\tparse: function ( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\ttoJSON: function ( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t},\n\n\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function ( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || - 1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\nObject.assign( AnimationClip.prototype, {\n\n\tresetDuration: function () {\n\n\t\tvar tracks = this.tracks, duration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t},\n\n\ttrim: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tvalidate: function () {\n\n\t\tvar valid = true;\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\toptimize: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\n\tclone: function () {\n\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false;\n\tvar itemsLoaded = 0;\n\tvar itemsTotal = 0;\n\tvar urlModifier = undefined;\n\tvar handlers = [];\n\n\t// Refer to #5689 for the reason why we don't set .onStart\n\t// in the constructor\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n\tthis.resolveURL = function ( url ) {\n\n\t\tif ( urlModifier ) {\n\n\t\t\treturn urlModifier( url );\n\n\t\t}\n\n\t\treturn url;\n\n\t};\n\n\tthis.setURLModifier = function ( transform ) {\n\n\t\turlModifier = transform;\n\n\t\treturn this;\n\n\t};\n\n\tthis.addHandler = function ( regex, loader ) {\n\n\t\thandlers.push( regex, loader );\n\n\t\treturn this;\n\n\t};\n\n\tthis.removeHandler = function ( regex ) {\n\n\t\tvar index = handlers.indexOf( regex );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\thandlers.splice( index, 2 );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tthis.getHandler = function ( file ) {\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t};\n\n}\n\nvar DefaultLoadingManager = new LoadingManager();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Loader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\tthis.crossOrigin = 'anonymous';\n\tthis.path = '';\n\tthis.resourcePath = '';\n\n}\n\nObject.assign( Loader.prototype, {\n\n\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\tparse: function ( /* data */ ) {},\n\n\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t},\n\n\tsetResourcePath: function ( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: FileLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tCache.add( url, response );\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io/\n */\n\nfunction AnimationLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: AnimationLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction CompressedTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: CompressedTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipmapLinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ImageLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: ImageLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction CubeTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: CubeTextureLoader,\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new CubeTexture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction TextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new Texture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\n\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nfunction Curve() {\n\n\tthis.type = 'Curve';\n\n\tthis.arcLengthDivisions = 200;\n\n}\n\nObject.assign( Curve.prototype, {\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function ( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t},\n\n\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tvar normal = new Vector3();\n\n\t\tvar tangents = [];\n\t\tvar normals = [];\n\t\tvar binormals = [];\n\n\t\tvar vec = new Vector3();\n\t\tvar mat = new Matrix4();\n\n\t\tvar i, u, theta;\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tu = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tvar min = Number.MAX_VALUE;\n\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'EllipseCurve';\n\n\tthis.aX = aX || 0;\n\tthis.aY = aY || 0;\n\n\tthis.xRadius = xRadius || 1;\n\tthis.yRadius = yRadius || 1;\n\n\tthis.aStartAngle = aStartAngle || 0;\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\tthis.aClockwise = aClockwise || false;\n\n\tthis.aRotation = aRotation || 0;\n\n}\n\nEllipseCurve.prototype = Object.create( Curve.prototype );\nEllipseCurve.prototype.constructor = EllipseCurve;\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn point.set( x, y );\n\n};\n\nEllipseCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.aX = source.aX;\n\tthis.aY = source.aY;\n\n\tthis.xRadius = source.xRadius;\n\tthis.yRadius = source.yRadius;\n\n\tthis.aStartAngle = source.aStartAngle;\n\tthis.aEndAngle = source.aEndAngle;\n\n\tthis.aClockwise = source.aClockwise;\n\n\tthis.aRotation = source.aRotation;\n\n\treturn this;\n\n};\n\n\nEllipseCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.aX = this.aX;\n\tdata.aY = this.aY;\n\n\tdata.xRadius = this.xRadius;\n\tdata.yRadius = this.yRadius;\n\n\tdata.aStartAngle = this.aStartAngle;\n\tdata.aEndAngle = this.aEndAngle;\n\n\tdata.aClockwise = this.aClockwise;\n\n\tdata.aRotation = this.aRotation;\n\n\treturn data;\n\n};\n\nEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.aX = json.aX;\n\tthis.aY = json.aY;\n\n\tthis.xRadius = json.xRadius;\n\tthis.yRadius = json.yRadius;\n\n\tthis.aStartAngle = json.aStartAngle;\n\tthis.aEndAngle = json.aEndAngle;\n\n\tthis.aClockwise = json.aClockwise;\n\n\tthis.aRotation = json.aRotation;\n\n\treturn this;\n\n};\n\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\tthis.type = 'ArcCurve';\n\n}\n\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\nArcCurve.prototype.constructor = ArcCurve;\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nvar tmp = new Vector3();\nvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CatmullRomCurve3';\n\n\tthis.points = points || [];\n\tthis.closed = closed || false;\n\tthis.curveType = curveType || 'centripetal';\n\tthis.tension = tension || 0.5;\n\n}\n\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar points = this.points;\n\tvar l = points.length;\n\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tif ( this.closed ) {\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\tintPoint = l - 2;\n\t\tweight = 1;\n\n\t}\n\n\tvar p0, p1, p2, p3; // 4 points\n\n\tif ( this.closed || intPoint > 0 ) {\n\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate first point\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\tp0 = tmp;\n\n\t}\n\n\tp1 = points[ intPoint % l ];\n\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate last point\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\tp3 = tmp;\n\n\t}\n\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t// init Centripetal / Chordal Catmull-Rom\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t// safety check for repeated points\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t}\n\n\tpoint.set(\n\t\tpx.calc( weight ),\n\t\tpy.calc( weight ),\n\t\tpz.calc( weight )\n\t);\n\n\treturn point;\n\n};\n\nCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\tthis.closed = source.closed;\n\tthis.curveType = source.curveType;\n\tthis.tension = source.tension;\n\n\treturn this;\n\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\tdata.closed = this.closed;\n\tdata.curveType = this.curveType;\n\tdata.tension = this.tension;\n\n\treturn data;\n\n};\n\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t}\n\n\tthis.closed = json.closed;\n\tthis.curveType = json.curveType;\n\tthis.tension = json.tension;\n\n\treturn this;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tvar v0 = ( p2 - p0 ) * 0.5;\n\tvar v1 = ( p3 - p1 ) * 0.5;\n\tvar t2 = t * t;\n\tvar t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tvar k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\tthis.v3 = v3 || new Vector2();\n\n}\n\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\tthis.v3 = v3 || new Vector3();\n\n}\n\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction LineCurve( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve';\n\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nLineCurve.prototype = Object.create( Curve.prototype );\nLineCurve.prototype.constructor = LineCurve;\n\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\nLineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction LineCurve3( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve3';\n\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nLineCurve3.prototype = Object.create( Curve.prototype );\nLineCurve3.prototype.constructor = LineCurve3;\n\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar points = this.points;\n\tvar p = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar p1 = points[ intPoint ];\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nfunction CurvePath() {\n\n\tCurve.call( this );\n\n\tthis.type = 'CurvePath';\n\n\tthis.curves = [];\n\tthis.autoClose = false; // Automatically closes the path\n\n}\n\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\tconstructor: CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar points = [], last;\n\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tvar curve = curves[ i ];\n\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n **/\n\nfunction Path( points ) {\n\n\tCurvePath.call( this );\n\n\tthis.type = 'Path';\n\n\tthis.currentPoint = new Vector2();\n\n\tif ( points ) {\n\n\t\tthis.setFromPoints( points );\n\n\t}\n\n}\n\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\tconstructor: Path,\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tvar curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape( points ) {\n\n\tPath.call( this, points );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.type = 'Shape';\n\n\tthis.holes = [];\n\n}\n\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\tconstructor: Shape,\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tPath.prototype.copy.call( this, source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Light( color, intensity ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n}\n\nLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Light,\n\n\tisLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\tLight.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new Color( groundColor );\n\n}\n\nHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: HemisphereLight,\n\n\tisHemisphereLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LightShadow( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.mapPass = null;\n\tthis.matrix = new Matrix4();\n\n\tthis._frustum = new Frustum();\n\tthis._frameExtents = new Vector2( 1, 1 );\n\n\tthis._viewportCount = 1;\n\n\tthis._viewports = [\n\n\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t];\n\n}\n\nObject.assign( LightShadow.prototype, {\n\n\t_projScreenMatrix: new Matrix4(),\n\n\t_lightPositionWorld: new Vector3(),\n\n\t_lookTarget: new Vector3(),\n\n\tgetViewportCount: function () {\n\n\t\treturn this._viewportCount;\n\n\t},\n\n\tgetFrustum: function () {\n\n\t\treturn this._frustum;\n\n\t},\n\n\tupdateMatrices: function ( light ) {\n\n\t\tvar shadowCamera = this.camera,\n\t\t\tshadowMatrix = this.matrix,\n\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\tlookTarget = this._lookTarget,\n\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( lookTarget );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t},\n\n\tgetViewport: function ( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t},\n\n\tgetFrameExtents: function () {\n\n\t\treturn this._frameExtents;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction SpotLightShadow() {\n\n\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n}\n\nSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: SpotLightShadow,\n\n\tisSpotLightShadow: true,\n\n\tupdateMatrices: function ( light, viewCamera, viewportIndex ) {\n\n\t\tvar camera = this.camera;\n\n\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tLightShadow.prototype.updateMatrices.call( this, light, viewCamera, viewportIndex );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new SpotLightShadow();\n\n}\n\nSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: SpotLight,\n\n\tisSpotLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction PointLightShadow() {\n\n\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\tthis._frameExtents = new Vector2( 4, 2 );\n\n\tthis._viewportCount = 6;\n\n\tthis._viewports = [\n\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t// following orientation:\n\t\t//\n\t\t//  xzXZ\n\t\t//   y Y\n\t\t//\n\t\t// X - Positive x direction\n\t\t// x - Negative x direction\n\t\t// Y - Positive y direction\n\t\t// y - Negative y direction\n\t\t// Z - Positive z direction\n\t\t// z - Negative z direction\n\n\t\t// positive X\n\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t// negative X\n\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t// positive Z\n\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t// negative Z\n\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t// positive Y\n\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t// negative Y\n\t\tnew Vector4( 1, 0, 1, 1 )\n\t];\n\n\tthis._cubeDirections = [\n\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t];\n\n\tthis._cubeUps = [\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t];\n\n}\n\nPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: PointLightShadow,\n\n\tisPointLightShadow: true,\n\n\tupdateMatrices: function ( light, viewCamera, viewportIndex ) {\n\n\t\tvar camera = this.camera,\n\t\t\tshadowMatrix = this.matrix,\n\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\tlookTarget = this._lookTarget,\n\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( lightPositionWorld );\n\n\t\tlookTarget.copy( camera.position );\n\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction PointLight( color, intensity, distance, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new PointLightShadow();\n\n}\n\nPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: PointLight,\n\n\tisPointLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = ( left !== undefined ) ? left : - 1;\n\tthis.right = ( right !== undefined ) ? right : 1;\n\tthis.top = ( top !== undefined ) ? top : 1;\n\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n}\n\nOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: OrthographicCamera,\n\n\tisOrthographicCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectionalLightShadow() {\n\n\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n}\n\nDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: DirectionalLightShadow,\n\n\tisDirectionalLightShadow: true,\n\n\tupdateMatrices: function ( light, viewCamera, viewportIndex ) {\n\n\t\tLightShadow.prototype.updateMatrices.call( this, light, viewCamera, viewportIndex );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DirectionalLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tthis.shadow = new DirectionalLightShadow();\n\n}\n\nDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: DirectionalLight,\n\n\tisDirectionalLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AmbientLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n}\n\nAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: AmbientLight,\n\n\tisAmbientLight: true\n\n} );\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nfunction RectAreaLight( color, intensity, width, height ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'RectAreaLight';\n\n\tthis.width = ( width !== undefined ) ? width : 10;\n\tthis.height = ( height !== undefined ) ? height : 10;\n\n}\n\nRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: RectAreaLight,\n\n\tisRectAreaLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.textures = {};\n\n}\n\nMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: MaterialLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\treturn material;\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar LoaderUtils = {\n\n\tdecodeText: function ( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n};\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferGeometry() {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n}\n\nInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\tconstructor: InstancedBufferGeometry,\n\n\tisInstancedBufferGeometry: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\tmeshPerAttribute = normalized;\n\n\t\tnormalized = false;\n\n\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t}\n\n\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\tconstructor: InstancedBufferAttribute,\n\n\tisInstancedBufferAttribute: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ()\t{\n\n\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferGeometryLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BufferGeometryLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tgeometry.addAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\nvar TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\t// Workaround for IE11 pre KB2929437. See #11440\n\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ObjectLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: ObjectLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar shapes = this.parseShape( json.shapes );\n\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseShape: function ( json ) {\n\n\t\tvar shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t},\n\n\tparseGeometries: function ( json, shapes ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\n\n\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\n\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar cache = {}; // MultiMaterial\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar data = json[ i ];\n\n\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\tif ( data.uuid !== undefined ) clip.uuid = data.uuid;\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\tvar loader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function ( data, geometries, materials ) {\n\n\t\tvar object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tvar children = data.children;\n\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tvar levels = data.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tvar level = levels[ l ];\n\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n} );\n\nvar TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tSphericalReflectionMapping: SphericalReflectionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nvar TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nvar TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\n/**\n * @author thespite / http://clicktorelease.com/\n */\n\n\nfunction ImageBitmapLoader( manager ) {\n\n\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t}\n\n\tif ( typeof fetch === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t}\n\n\tLoader.call( this, manager );\n\n\tthis.options = undefined;\n\n}\n\nImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: ImageBitmapLoader,\n\n\tsetOptions: function setOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tfetch( url ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t} else {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t}\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n **/\n\nfunction ShapePath() {\n\n\tthis.type = 'ShapePath';\n\n\tthis.color = new Color();\n\n\tthis.subPaths = [];\n\tthis.currentPath = null;\n\n}\n\nObject.assign( ShapePath.prototype, {\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\tvar subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction Font( data ) {\n\n\tthis.type = 'Font';\n\n\tthis.data = data;\n\n}\n\nObject.assign( Font.prototype, {\n\n\tisFont: true,\n\n\tgenerateShapes: function ( text, size ) {\n\n\t\tif ( size === undefined ) size = 100;\n\n\t\tvar shapes = [];\n\t\tvar paths = createPaths( text, size, this.data );\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\nfunction createPaths( text, size, data ) {\n\n\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\tvar scale = size / data.resolution;\n\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tvar paths = [];\n\n\tvar offsetX = 0, offsetY = 0;\n\n\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\tvar char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tvar path = new ShapePath();\n\n\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\tvar action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction FontLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: FontLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _context;\n\nvar AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\t_context = value;\n\n\t}\n\n};\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction AudioLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: AudioLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\tvar context = AudioContext.getContext();\n\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nfunction SphericalHarmonics3() {\n\n\tthis.coefficients = [];\n\n\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\tthis.coefficients.push( new Vector3() );\n\n\t}\n\n}\n\nObject.assign( SphericalHarmonics3.prototype, {\n\n\tisSphericalHarmonics3: true,\n\n\tset: function ( coefficients ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tzero: function () {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt: function ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t},\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\tvar coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t},\n\n\tadd: function ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\n\tscale: function ( s ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( sh, alpha ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sh ) {\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcopy: function ( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar coefficients = this.coefficients;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n} );\n\nObject.assign( SphericalHarmonics3, {\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n} );\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * A LightProbe is a source of indirect-diffuse light\n */\n\nfunction LightProbe( sh, intensity ) {\n\n\tLight.call( this, undefined, intensity );\n\n\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n}\n\nLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: LightProbe,\n\n\tisLightProbe: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.sh.copy( source.sh );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\tLightProbe.call( this, undefined, intensity );\n\n\tvar color1 = new Color().set( skyColor );\n\tvar color2 = new Color().set( groundColor );\n\n\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\tvar c0 = Math.sqrt( Math.PI );\n\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n}\n\nHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\tconstructor: HemisphereLightProbe,\n\n\tisHemisphereLightProbe: true,\n\n\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction AmbientLightProbe( color, intensity ) {\n\n\tLightProbe.call( this, undefined, intensity );\n\n\tvar color1 = new Color().set( color );\n\n\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n}\n\nAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\tconstructor: AmbientLightProbe,\n\n\tisAmbientLightProbe: true,\n\n\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\treturn data;\n\n\t}\n\n} );\n\nvar _eyeRight = new Matrix4();\nvar _eyeLeft = new Matrix4();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction StereoCamera() {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.eyeSep = 0.064;\n\n\tthis.cameraL = new PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n\tthis._cache = {\n\t\tfocus: null,\n\t\tfov: null,\n\t\taspect: null,\n\t\tnear: null,\n\t\tfar: null,\n\t\tzoom: null,\n\t\teyeSep: null\n\t};\n\n}\n\nObject.assign( StereoCamera.prototype, {\n\n\tupdate: function ( camera ) {\n\n\t\tvar cache = this._cache;\n\n\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tvar xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Clock( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n}\n\nObject.assign( Clock.prototype, {\n\n\tstart: function () {\n\n\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _position$2 = new Vector3();\nvar _quaternion$3 = new Quaternion();\nvar _scale$1 = new Vector3();\nvar _orientation = new Vector3();\n\nfunction AudioListener() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = AudioContext.getContext();\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n\tthis.timeDelta = 0;\n\n\t// private\n\n\tthis._clock = new Clock();\n\n}\n\nAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener = this.context.listener;\n\t\tvar up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction Audio( listener ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.listener = listener;\n\tthis.context = listener.context;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.buffer = null;\n\tthis.detune = 0;\n\tthis.loop = false;\n\tthis.startTime = 0;\n\tthis.offset = 0;\n\tthis.duration = undefined;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n}\n\nAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tthis.startTime = this.context.currentTime;\n\t\tsource.start( this.startTime, this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.offset = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetDetune: function ( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetDetune: function () {\n\n\t\treturn this.detune;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _position$3 = new Vector3();\nvar _quaternion$4 = new Quaternion();\nvar _scale$2 = new Vector3();\nvar _orientation$1 = new Vector3();\n\nfunction PositionalAudio( listener ) {\n\n\tAudio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.panningModel = 'HRTF';\n\tthis.panner.connect( this.gain );\n\n}\n\nPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\tconstructor: PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t},\n\n\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\tvar panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioAnalyser( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n}\n\nObject.assign( AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\n\t\t\tmixFunction = this._slerp;\n\t\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\t\t\tbufferType = Array;\n\t\t\tmixFunction = this._select;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n}\n\nObject.assign( PropertyMixer.prototype, {\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function ( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function ( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function () {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function () {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\n// Characters [].:/ are reserved for track binding syntax.\nvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nvar _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\nfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n}\n\nObject.assign( Composite.prototype, {\n\n\tgetValue: function ( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function ( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n} );\n\n\nfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n}\n\nObject.assign( PropertyBinding, {\n\n\tComposite: Composite,\n\n\tcreate: function ( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tsanitizeNodeName: function ( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t},\n\n\tparseTrackName: function ( trackName ) {\n\n\t\tvar matches = _trackRe.exec( trackName );\n\n\t\tif ( ! matches ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tvar results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t},\n\n\tfindNode: function ( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n} );\n\nObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function () {},\n\t_setValue_unavailable: function () {},\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t],\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function () {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function () {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( PropertyBinding.prototype, {\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n} );\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n *\n * @author tschw\n */\n\nfunction AnimationObjectGroup() {\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0; // threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices; // for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = []; // inside: string\n\tthis._parsedPaths = []; // inside: { we don't care, here }\n\tthis._bindings = []; // inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() {\n\n\t\t\t\treturn scope._objects.length;\n\n\t\t\t},\n\t\t\tget inUse() {\n\n\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t}\n\t\t},\n\t\tget bindingsPerObject() {\n\n\t\t\treturn scope._bindings.length;\n\n\t\t}\n\n\t};\n\n}\n\nObject.assign( AnimationObjectGroup.prototype, {\n\n\tisAnimationObjectGroup: true,\n\n\tadd: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length,\n\t\t\tknownObject = undefined;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function ( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants; // bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null; // for the memory manager\n\tthis._byClipCacheIndex = null; // for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = LoopRepeat;\n\tthis._loopCount = - 1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\tthis.paused = false; // true -> zero effective time scale\n\tthis.enabled = true; // false -> zero effective weight\n\n\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n}\n\nObject.assign( AnimationAction.prototype, {\n\n\t// State & Scheduling\n\n\tplay: function () {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function () {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function () {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function () {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function ( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function ( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function ( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function () {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function () {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function () {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function ( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function ( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function ( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function () {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function () {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function () {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function () {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function ( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function ( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function ( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\t\tvar duration = this._clip.duration;\n\t\tvar loop = this.loop;\n\t\tvar loopCount = this._loopCount;\n\n\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction AnimationMixer( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n}\n\nAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: AnimationMixer,\n\n\t_bindAction: function ( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function ( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function ( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function () {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction: function ( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function ( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function ( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function ( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function () {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function () {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function ( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime: function ( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function () {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function ( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function ( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Uniform( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n}\n\nUniform.prototype.clone = function () {\n\n\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n};\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\tInterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\tconstructor: InstancedInterleavedBuffer,\n\n\tisInstancedInterleavedBuffer: true,\n\n\tcopy: function ( source ) {\n\n\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\nfunction Raycaster( origin, direction, near, far ) {\n\n\tthis.ray = new Ray( origin, direction );\n\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\tthis.near = near || 0;\n\tthis.far = far || Infinity;\n\tthis.camera = null;\n\n\tthis.params = {\n\t\tMesh: {},\n\t\tLine: {},\n\t\tLOD: {},\n\t\tPoints: { threshold: 1 },\n\t\tSprite: {}\n\t};\n\n\tObject.defineProperties( this.params, {\n\t\tPointCloud: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\treturn this.Points;\n\n\t\t\t}\n\t\t}\n\t} );\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.visible === false ) return;\n\n\tobject.raycast( raycaster, intersects );\n\n\tif ( recursive === true ) {\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n\tlinePrecision: 1,\n\n\tset: function ( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t},\n\n\tsetFromCamera: function ( coords, camera ) {\n\n\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t}\n\n\t},\n\n\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t},\n\n\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axiz.\n */\n\nfunction Spherical( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\treturn this;\n\n}\n\nObject.assign( Spherical.prototype, {\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t},\n\n\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\n\nfunction Cylindrical( radius, theta, y ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\treturn this;\n\n}\n\nObject.assign( Cylindrical.prototype, {\n\n\tset: function ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t},\n\n\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nvar _vector$6 = new Vector2();\n\nfunction Box2( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n}\n\nObject.assign( Box2.prototype, {\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t},\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nvar _startP = new Vector3();\nvar _startEnd = new Vector3();\n\nfunction Line3( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n}\n\nObject.assign( Line3.prototype, {\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\tvar t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t},\n\n\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction ImmediateRenderObject( material ) {\n\n\tObject3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( /* renderCallback */ ) {};\n\n}\n\nImmediateRenderObject.prototype = Object.create( Object3D.prototype );\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nvar _v1$5 = new Vector3();\nvar _v2$3 = new Vector3();\nvar _normalMatrix$1 = new Matrix3();\nvar _keys = [ 'a', 'b', 'c' ];\n\nfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\nVertexNormalsHelper.prototype.update = function () {\n\n\tthis.object.updateMatrixWorld( true );\n\n\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\n\n\tvar matrixWorld = this.object.matrixWorld;\n\n\tvar position = this.geometry.attributes.position;\n\n\t//\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\n\n\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\tvar objPos = objGeometry.attributes.position;\n\n\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\tvar idx = 0;\n\n\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t}\n\n\tposition.needsUpdate = true;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nvar _vector$7 = new Vector3();\n\nfunction SpotLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0, \t0, 0, 1,\n\t\t0, 0, 0, \t1, 0, 1,\n\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t0, 0, 0, \t0, 1, 1,\n\t\t0, 0, 0, \t0, - 1, 1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n}\n\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nSpotLightHelper.prototype.update = function () {\n\n\tthis.light.updateMatrixWorld();\n\n\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\tthis.cone.lookAt( _vector$7 );\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.cone.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.cone.material.color.copy( this.light.color );\n\n\t}\n\n};\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nvar _vector$8 = new Vector3();\nvar _boneMatrix = new Matrix4();\nvar _matrixWorldInv = new Matrix4();\n\nfunction getBoneList( object ) {\n\n\tvar boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nfunction SkeletonHelper( object ) {\n\n\tvar bones = getBoneList( object );\n\n\tvar geometry = new BufferGeometry();\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar color1 = new Color( 0, 0, 1 );\n\tvar color2 = new Color( 0, 1, 0 );\n\n\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\tvar bone = bones[ i ];\n\n\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t}\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\tthis.bones = bones;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n}\n\nSkeletonHelper.prototype = Object.create( LineSegments.prototype );\nSkeletonHelper.prototype.constructor = SkeletonHelper;\n\nSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar bones = this.bones;\n\n\tvar geometry = this.geometry;\n\tvar position = geometry.getAttribute( 'position' );\n\n\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\tvar bone = bones[ i ];\n\n\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PointLightHelper( light, sphereSize, color ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.color = color;\n\n\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n}\n\nPointLightHelper.prototype = Object.create( Mesh.prototype );\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nPointLightHelper.prototype.update = function () {\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t}\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n/**\n * @author abelnation / http://github.com/abelnation\n * @author Mugen87 / http://github.com/Mugen87\n * @author WestLangley / http://github.com/WestLangley\n *\n *  This helper must be added as a child of the light\n */\n\nfunction RectAreaLightHelper( light, color ) {\n\n\tthis.type = 'RectAreaLightHelper';\n\n\tthis.light = light;\n\n\tthis.color = color; // optional hardwired color for the helper\n\n\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tgeometry.computeBoundingSphere();\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tLine.call( this, geometry, material );\n\n\t//\n\n\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\tvar geometry2 = new BufferGeometry();\n\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\tgeometry2.computeBoundingSphere();\n\n\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\n\n\tthis.update();\n\n}\n\nRectAreaLightHelper.prototype = Object.create( Line.prototype );\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\nRectAreaLightHelper.prototype.update = function () {\n\n\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\t\tthis.children[ 0 ].material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t// prevent hue shift\n\t\tvar c = this.material.color;\n\t\tvar max = Math.max( c.r, c.g, c.b );\n\t\tif ( max > 1 ) c.multiplyScalar( 1 / max );\n\n\t\tthis.children[ 0 ].material.color.copy( this.material.color );\n\n\t}\n\n};\n\nRectAreaLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nvar _vector$9 = new Vector3();\nvar _color1 = new Color();\nvar _color2 = new Color();\n\nfunction HemisphereLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new OctahedronBufferGeometry( size );\n\tgeometry.rotateY( Math.PI * 0.5 );\n\n\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\tvar position = geometry.getAttribute( 'position' );\n\tvar colors = new Float32Array( position.count * 3 );\n\n\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\tthis.add( new Mesh( geometry, this.material ) );\n\n\tthis.update();\n\n}\n\nHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\nHemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nHemisphereLightHelper.prototype.update = function () {\n\n\tvar mesh = this.children[ 0 ];\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t_color1.copy( this.light.color );\n\t\t_color2.copy( this.light.groundColor );\n\n\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\n\t}\n\n\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction LightProbeHelper( lightProbe, size ) {\n\n\tthis.lightProbe = lightProbe;\n\n\tthis.size = size;\n\n\tvar defines = {};\n\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\n\n\t// material\n\tvar material = new ShaderMaterial( {\n\n\t\tdefines: defines,\n\n\t\tuniforms: {\n\n\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\n\n\t\t\tintensity: { value: this.lightProbe.intensity }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t'varying vec3 vNormal;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\n\n\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t'}',\n\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\n\t\t\t'#define RECIPROCAL_PI 0.318309886',\n\n\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\n\n\t\t\t'\t// matrix is assumed to be orthogonal',\n\n\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\n\n\t\t\t'}',\n\n\t\t\t'vec3 linearToOutput( in vec3 a ) {',\n\n\t\t\t'\t#ifdef GAMMA_OUTPUT',\n\n\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\treturn a;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'}',\n\n\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\n\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\n\n\t\t\t'\t// normal is assumed to have unit length',\n\n\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\n\n\t\t\t'\t// band 0',\n\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\n\n\t\t\t'\t// band 1',\n\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\n\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\n\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\n\n\t\t\t'\t// band 2',\n\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\n\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\n\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\n\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\n\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\n\n\t\t\t'\treturn result;',\n\n\t\t\t'}',\n\n\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\n\n\t\t\t'uniform float intensity; // light probe intensity',\n\n\t\t\t'varying vec3 vNormal;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec3 normal = normalize( vNormal );',\n\n\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\n\n\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\n\n\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\n\n\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\n\n\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' )\n\n\t} );\n\n\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.onBeforeRender();\n\n}\n\nLightProbeHelper.prototype = Object.create( Mesh.prototype );\nLightProbeHelper.prototype.constructor = LightProbeHelper;\n\nLightProbeHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nLightProbeHelper.prototype.onBeforeRender = function () {\n\n\tthis.position.copy( this.lightProbe.position );\n\n\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\n\n\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction GridHelper( size, divisions, color1, color2 ) {\n\n\tsize = size || 10;\n\tdivisions = divisions || 10;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = size / divisions;\n\tvar halfSize = size / 2;\n\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\tconstructor: GridHelper,\n\n\tcopy: function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.geometry.copy( source.geometry );\n\t\tthis.material.copy( source.material );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\n\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\tradius = radius || 10;\n\tradials = radials || 16;\n\tcircles = circles || 8;\n\tdivisions = divisions || 64;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar x, z;\n\tvar v, i, j, r, color;\n\n\t// create the radials\n\n\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\tx = Math.sin( v ) * radius;\n\t\tz = Math.cos( v ) * radius;\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tvertices.push( x, 0, z );\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tcolors.push( color.r, color.g, color.b );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t}\n\n\t// create the circles\n\n\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tr = radius - ( radius / circles * i );\n\n\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t// first vertex\n\n\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t// second vertex\n\n\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n/**\n * @author Mugen87 / http://github.com/Mugen87\n */\n\nfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\n\n\tthis.audio = audio;\n\tthis.range = range || 1;\n\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\n\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\n\n\tvar geometry = new BufferGeometry();\n\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\n\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\n\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\n\n\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\n\n\tthis.update();\n\n}\n\nPositionalAudioHelper.prototype = Object.create( Line.prototype );\nPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\n\nPositionalAudioHelper.prototype.update = function () {\n\n\tvar audio = this.audio;\n\tvar range = this.range;\n\tvar divisionsInnerAngle = this.divisionsInnerAngle;\n\tvar divisionsOuterAngle = this.divisionsOuterAngle;\n\n\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\n\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\n\n\tvar halfConeInnerAngle = coneInnerAngle / 2;\n\tvar halfConeOuterAngle = coneOuterAngle / 2;\n\n\tvar start = 0;\n\tvar count = 0;\n\tvar i, stride;\n\n\tvar geometry = this.geometry;\n\tvar positionAttribute = geometry.attributes.position;\n\n\tgeometry.clearGroups();\n\n\t//\n\n\tfunction generateSegment( from, to, divisions, materialIndex ) {\n\n\t\tvar step = ( to - from ) / divisions;\n\n\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\n\t\tcount ++;\n\n\t\tfor ( i = from; i < to; i += step ) {\n\n\t\t\tstride = start + count;\n\n\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\n\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\n\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\n\n\t\t\tcount += 3;\n\n\t\t}\n\n\t\tgeometry.addGroup( start, count, materialIndex );\n\n\t\tstart += count;\n\t\tcount = 0;\n\n\t}\n\n\t//\n\n\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\n\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\n\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\n\n\t//\n\n\tpositionAttribute.needsUpdate = true;\n\n\tif ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;\n\n};\n\nPositionalAudioHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material[ 0 ].dispose();\n\tthis.material[ 1 ].dispose();\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nvar _v1$6 = new Vector3();\nvar _v2$4 = new Vector3();\nvar _normalMatrix$2 = new Matrix3();\n\nfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n}\n\nFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\nFaceNormalsHelper.prototype.update = function () {\n\n\tthis.object.updateMatrixWorld( true );\n\n\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\n\n\tvar matrixWorld = this.object.matrixWorld;\n\n\tvar position = this.geometry.attributes.position;\n\n\t//\n\n\tvar objGeometry = this.object.geometry;\n\n\tvar vertices = objGeometry.vertices;\n\n\tvar faces = objGeometry.faces;\n\n\tvar idx = 0;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tvar normal = face.normal;\n\n\t\t_v1$6.copy( vertices[ face.a ] )\n\t\t\t.add( vertices[ face.b ] )\n\t\t\t.add( vertices[ face.c ] )\n\t\t\t.divideScalar( 3 )\n\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\n\n\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\n\n\t\tidx = idx + 1;\n\n\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\n\n\t\tidx = idx + 1;\n\n\t}\n\n\tposition.needsUpdate = true;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nvar _v1$7 = new Vector3();\nvar _v2$5 = new Vector3();\nvar _v3$1 = new Vector3();\n\nfunction DirectionalLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t- size, size, 0,\n\t\tsize, size, 0,\n\t\tsize, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size, size, 0\n\t], 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.lightPlane = new Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.targetLine = new Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n}\n\nDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\nDirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n\n};\n\nDirectionalLightHelper.prototype.update = function () {\n\n\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\n\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\n\t_v3$1.subVectors( _v2$5, _v1$7 );\n\n\tthis.lightPlane.lookAt( _v2$5 );\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.lightPlane.material.color.set( this.color );\n\t\tthis.targetLine.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t}\n\n\tthis.targetLine.lookAt( _v2$5 );\n\tthis.targetLine.scale.z = _v3$1.length();\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nvar _vector$a = new Vector3();\nvar _camera = new Camera();\n\nfunction CameraHelper( camera ) {\n\n\tvar geometry = new BufferGeometry();\n\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar colorFrustum = new Color( 0xffaa00 );\n\tvar colorCone = new Color( 0xff0000 );\n\tvar colorUp = new Color( 0x00aaff );\n\tvar colorTarget = new Color( 0xffffff );\n\tvar colorCross = new Color( 0x333333 );\n\n\t// near\n\n\taddLine( 'n1', 'n2', colorFrustum );\n\taddLine( 'n2', 'n4', colorFrustum );\n\taddLine( 'n4', 'n3', colorFrustum );\n\taddLine( 'n3', 'n1', colorFrustum );\n\n\t// far\n\n\taddLine( 'f1', 'f2', colorFrustum );\n\taddLine( 'f2', 'f4', colorFrustum );\n\taddLine( 'f4', 'f3', colorFrustum );\n\taddLine( 'f3', 'f1', colorFrustum );\n\n\t// sides\n\n\taddLine( 'n1', 'f1', colorFrustum );\n\taddLine( 'n2', 'f2', colorFrustum );\n\taddLine( 'n3', 'f3', colorFrustum );\n\taddLine( 'n4', 'f4', colorFrustum );\n\n\t// cone\n\n\taddLine( 'p', 'n1', colorCone );\n\taddLine( 'p', 'n2', colorCone );\n\taddLine( 'p', 'n3', colorCone );\n\taddLine( 'p', 'n4', colorCone );\n\n\t// up\n\n\taddLine( 'u1', 'u2', colorUp );\n\taddLine( 'u2', 'u3', colorUp );\n\taddLine( 'u3', 'u1', colorUp );\n\n\t// target\n\n\taddLine( 'c', 't', colorTarget );\n\taddLine( 'p', 'c', colorCross );\n\n\t// cross\n\n\taddLine( 'cn1', 'cn2', colorCross );\n\taddLine( 'cn3', 'cn4', colorCross );\n\n\taddLine( 'cf1', 'cf2', colorCross );\n\taddLine( 'cf3', 'cf4', colorCross );\n\n\tfunction addLine( a, b, color ) {\n\n\t\taddPoint( a, color );\n\t\taddPoint( b, color );\n\n\t}\n\n\tfunction addPoint( id, color ) {\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n}\n\nCameraHelper.prototype = Object.create( LineSegments.prototype );\nCameraHelper.prototype.constructor = CameraHelper;\n\nCameraHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\tvar pointMap = this.pointMap;\n\n\tvar w = 1, h = 1;\n\n\t// we need just camera projection matrix inverse\n\t// world matrix must be identity\n\n\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t// center / target\n\n\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t// near\n\n\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t// far\n\n\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t// up\n\n\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t// cross\n\n\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n};\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector$a.set( x, y, z ).unproject( camera );\n\n\tvar points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n */\n\nvar _box$2 = new Box3();\n\nfunction BoxHelper( object, color ) {\n\n\tthis.object = object;\n\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nBoxHelper.prototype = Object.create( LineSegments.prototype );\nBoxHelper.prototype.constructor = BoxHelper;\n\nBoxHelper.prototype.update = function ( object ) {\n\n\tif ( object !== undefined ) {\n\n\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t}\n\n\tif ( this.object !== undefined ) {\n\n\t\t_box$2.setFromObject( this.object );\n\n\t}\n\n\tif ( _box$2.isEmpty() ) return;\n\n\tvar min = _box$2.min;\n\tvar max = _box$2.max;\n\n\t/*\n\t  5____4\n\t1/___0/|\n\t| 6__|_7\n\t2/___3/\n\n\t0: max.x, max.y, max.z\n\t1: min.x, max.y, max.z\n\t2: min.x, min.y, max.z\n\t3: max.x, min.y, max.z\n\t4: max.x, max.y, min.z\n\t5: min.x, max.y, min.z\n\t6: min.x, min.y, min.z\n\t7: max.x, min.y, min.z\n\t*/\n\n\tvar position = this.geometry.attributes.position;\n\tvar array = position.array;\n\n\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\tposition.needsUpdate = true;\n\n\tthis.geometry.computeBoundingSphere();\n\n\n};\n\nBoxHelper.prototype.setFromObject = function ( object ) {\n\n\tthis.object = object;\n\tthis.update();\n\n\treturn this;\n\n};\n\nBoxHelper.prototype.copy = function ( source ) {\n\n\tLineSegments.prototype.copy.call( this, source );\n\n\tthis.object = source.object;\n\n\treturn this;\n\n};\n\nBoxHelper.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3Helper( box, color ) {\n\n\tthis.type = 'Box3Helper';\n\n\tthis.box = box;\n\n\tcolor = color || 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.geometry.computeBoundingSphere();\n\n}\n\nBox3Helper.prototype = Object.create( LineSegments.prototype );\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar box = this.box;\n\n\tif ( box.isEmpty() ) return;\n\n\tbox.getCenter( this.position );\n\n\tbox.getSize( this.scale );\n\n\tthis.scale.multiplyScalar( 0.5 );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction PlaneHelper( plane, size, hex ) {\n\n\tthis.type = 'PlaneHelper';\n\n\tthis.plane = plane;\n\n\tthis.size = ( size === undefined ) ? 1 : size;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tgeometry.computeBoundingSphere();\n\n\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t//\n\n\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\tvar geometry2 = new BufferGeometry();\n\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\tgeometry2.computeBoundingSphere();\n\n\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n}\n\nPlaneHelper.prototype = Object.create( Line.prototype );\nPlaneHelper.prototype.constructor = PlaneHelper;\n\nPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar scale = - this.plane.constant;\n\n\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\tthis.lookAt( this.plane.normal );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nvar _axis = new Vector3();\nvar _lineGeometry, _coneGeometry;\n\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t// dir is assumed to be normalized\n\n\tObject3D.call( this );\n\n\tif ( dir === undefined ) dir = new Vector3( 0, 0, 1 );\n\tif ( origin === undefined ) origin = new Vector3( 0, 0, 0 );\n\tif ( length === undefined ) length = 1;\n\tif ( color === undefined ) color = 0xffff00;\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( _lineGeometry === undefined ) {\n\n\t\t_lineGeometry = new BufferGeometry();\n\t\t_lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t}\n\n\tthis.position.copy( origin );\n\n\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\tthis.line.matrixAutoUpdate = false;\n\tthis.add( this.line );\n\n\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\tthis.cone.matrixAutoUpdate = false;\n\tthis.add( this.cone );\n\n\tthis.setDirection( dir );\n\tthis.setLength( length, headLength, headWidth );\n\n}\n\nArrowHelper.prototype = Object.create( Object3D.prototype );\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t// dir is assumed to be normalized\n\n\tif ( dir.y > 0.99999 ) {\n\n\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t} else if ( dir.y < - 0.99999 ) {\n\n\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t} else {\n\n\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\tvar radians = Math.acos( dir.y );\n\n\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t}\n\n};\n\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.set( color );\n\tthis.cone.material.color.set( color );\n\n};\n\nArrowHelper.prototype.copy = function ( source ) {\n\n\tObject3D.prototype.copy.call( this, source, false );\n\n\tthis.line.copy( source.line );\n\tthis.cone.copy( source.cone );\n\n\treturn this;\n\n};\n\nArrowHelper.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AxesHelper( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = [\n\t\t0, 0, 0,\tsize, 0, 0,\n\t\t0, 0, 0,\t0, size, 0,\n\t\t0, 0, 0,\t0, 0, size\n\t];\n\n\tvar colors = [\n\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t0, 0, 1,\t0, 0.6, 1\n\t];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nAxesHelper.prototype = Object.create( LineSegments.prototype );\nAxesHelper.prototype.constructor = AxesHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n}\n\nvar LineStrip = 0;\n\nvar LinePieces = 1;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials ) {\n\n\tif ( materials === undefined ) materials = [];\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nObject.assign( CurvePath.prototype, {\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from equidistant sampling along the path\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\tvar geometry = new Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n//\n\nObject.assign( Path.prototype, {\n\n\tfromPoints: function ( points ) {\n\n\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\tthis.setFromPoints( points );\n\n\t}\n\n} );\n\n//\n\nfunction ClosedSplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n}\n\nClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction SplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction Spline( points ) {\n\n\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\nObject.assign( Spline.prototype, {\n\n\tinitFromArray: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t},\n\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t},\n\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nObject.assign( Loader.prototype, {\n\n\textractUrlBase: function ( url ) {\n\n\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t}\n\n} );\n\nLoader.Handlers = {\n\n\tadd: function ( /* regex, loader */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t},\n\n\tget: function ( /* file */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t}\n\n};\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\nObject.assign( ObjectLoader.prototype, {\n\n\tsetTexturePath: function ( value ) {\n\n\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\treturn this.setResourcePath( value );\n\n\t}\n\n} );\n\n//\n\nObject.assign( Box2.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nObject.assign( Box3.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nObject.assign( _Math, {\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\treturn _Math.floorPowerOfTwo( value );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t}\n\n} );\n\nObject.assign( Matrix3.prototype, {\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( Matrix4.prototype, {\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tgetPosition: function () {\n\n\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t},\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\tmultiplyToArray: function () {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t},\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\n\t},\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\ttranslate: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\trotateX: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\trotateY: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\trotateZ: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\trotateByAxis: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t},\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t}\n\n} );\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nObject.assign( Ray.prototype, {\n\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t}\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tarea: function () {\n\n\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\treturn this.getArea();\n\n\t},\n\tbarycoordFromPoint: function ( point, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn this.getBarycoord( point, target );\n\n\t},\n\tmidpoint: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\treturn this.getMidpoint( target );\n\n\t},\n\tnormal: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn this.getNormal( target );\n\n\t},\n\tplane: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\treturn this.getPlane( target );\n\n\t}\n\n} );\n\nObject.assign( Triangle, {\n\n\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t},\n\tnormal: function ( a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t}\n\n} );\n\nObject.assign( Shape.prototype, {\n\n\textractAllPoints: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\treturn this.extractPoints( divisions );\n\n\t},\n\textrude: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\treturn new ExtrudeGeometry( this, options );\n\n\t},\n\tmakeGeometry: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\treturn new ShapeGeometry( this, options );\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector3.prototype, {\n\n\tsetEulerFromRotationMatrix: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\tsetEulerFromQuaternion: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t},\n\tapplyProjection: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\treturn this.applyMatrix4( m );\n\n\t},\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector4.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\n//\n\nObject.assign( Geometry.prototype, {\n\n\tcomputeTangents: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeLineDistances: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t}\n\n} );\n\nObject.assign( Object3D.prototype, {\n\n\tgetChildByName: function ( name ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\n\t},\n\trenderDepth: function () {\n\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t},\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t},\n\tgetWorldRotation: function () {\n\n\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t}\n\n} );\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( LOD.prototype, {\n\n\tobjects: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t},\n\tset: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t}\n\n} );\n\nSkinnedMesh.prototype.initBones = function () {\n\n\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n};\n\nObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\treturn this.arcLengthDivisions;\n\n\t},\n\tset: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\tthis.arcLengthDivisions = value;\n\n\t}\n\n} );\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t}\n\n} );\n\nObject.assign( BufferAttribute.prototype, {\n\n\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t},\n\tsetArray: function ( array ) {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\tthis.array = array;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nObject.assign( BufferGeometry.prototype, {\n\n\taddIndex: function ( index ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tif ( indexOffset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\n\t},\n\tclearDrawCalls: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\n\t},\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeOffsets: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\nObject.assign( InterleavedBuffer.prototype, {\n\n\tsetArray: function ( array ) {\n\n\t\tconsole.warn( 'THREE.InterleavedBuffer: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\tthis.array = array;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n//\n\nObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\tgetArrays: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t},\n\n\taddShapeList: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t},\n\n\taddShape: function () {\n\n\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Uniform.prototype, {\n\n\tdynamic: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t}\n\t},\n\tonUpdate: {\n\t\tvalue: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\treturn this;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\n\toverdraw: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t}\n\t},\n\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t},\n\n\tstencilMask: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\treturn this.stencilFuncMask;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\tthis.stencilFuncMask = value;\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\tmetal: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( WebGLRenderer.prototype, {\n\n\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t},\n\tanimate: function ( callback ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\tthis.setAnimationLoop( callback );\n\n\t},\n\tgetCurrentRenderTarget: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\treturn this.getRenderTarget();\n\n\t},\n\tgetMaxAnisotropy: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t},\n\tgetPrecision: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\treturn this.capabilities.precision;\n\n\t},\n\tresetGLState: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\treturn this.state.reset();\n\n\t},\n\tsupportsFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t},\n\tsupportsHalfFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t},\n\tsupportsStandardDerivatives: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t},\n\tsupportsBlendMinMax: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t},\n\tsupportsVertexTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\treturn this.capabilities.vertexTextures;\n\n\t},\n\tsupportsInstancedArrays: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t},\n\tenableScissorTest: function ( boolean ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\n\t},\n\tinitMaterial: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t},\n\taddPrePlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t},\n\taddPostPlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t},\n\tupdateShadowMap: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t},\n\tsetFaceCulling: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t},\n\tallocTextureUnit: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t},\n\tsetTexture: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t},\n\tsetTexture2D: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t},\n\tsetTextureCube: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t},\n\tgetActiveMipMapLevel: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\treturn this.getActiveMipmapLevel();\n\n\t}\n\n} );\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\tcontext: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\treturn this.getContext();\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTargetCube.prototype, {\n\n\tactiveCubeFace: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t}\n\t},\n\tactiveMipMapLevel: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebVRManager.prototype, {\n\n\tstanding: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t}\n\t},\n\tuserHeight: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tvar scope = this;\n\tvar audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\n//\n\nvar GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\tvar matrix;\n\n\t\tif ( geometry2.isMesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nImageUtils.crossOrigin = undefined;\n\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\tvar loader = new TextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\tvar loader = new CubeTextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadCompressedTexture = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nImageUtils.loadCompressedTextureCube = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n}\n\n//\n\nfunction JSONLoader() {\n\n\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n}\n\n//\n\nvar SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t/* eslint-disable no-undef */\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\t/* eslint-enable no-undef */\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, AxisHelper, BackSide, BasicDepthPacking, BasicShadowMap, BinaryTextureLoader, Bone, BooleanKeyframeTrack, BoundingBoxHelper, Box2, Box3, Box3Helper, BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasRenderer, CanvasTexture, CatmullRomCurve3, CineonToneMapping, CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, ClosedSplineCurve3, Color, ColorKeyframeTrack, CompressedTexture, CompressedTextureLoader, ConeBufferGeometry, ConeGeometry, CubeCamera, BoxGeometry as CubeGeometry, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubeUVRefractionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CylinderBufferGeometry, CylinderGeometry, Cylindrical, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DirectionalLightShadow, DiscreteInterpolant, DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicBufferAttribute, EdgesGeometry, EdgesHelper, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeBufferGeometry, ExtrudeGeometry, Face3, Face4, FaceColors, FaceNormalsHelper, FileLoader, FlatShading, Float32Attribute, Float32BufferAttribute, Float64Attribute, Float64BufferAttribute, FloatType, Fog, FogExp2, Font, FontLoader, FrontFaceDirectionCCW, FrontFaceDirectionCW, FrontSide, Frustum, GammaEncoding, Geometry, GeometryUtils, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16Attribute, Int16BufferAttribute, Int32Attribute, Int32BufferAttribute, Int8Attribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, JSONLoader, KeepStencilOp, KeyframeTrack, LOD, LatheBufferGeometry, LatheGeometry, Layers, LensFlare, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, LightProbeHelper, LightShadow, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LinePieces, LineSegments, LineStrip, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LogLuvEncoding, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, _Math as Math, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshFaceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiMaterial, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColors, NoToneMapping, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, ParametricBufferGeometry, ParametricGeometry, Particle, ParticleBasicMaterial, ParticleSystem, ParticleSystemMaterial, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointCloud, PointCloudMaterial, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PositionalAudioHelper, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDEncoding, RGBEEncoding, RGBEFormat, RGBFormat, RGBM16Encoding, RGBM7Encoding, RGB_ETC1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RectAreaLightHelper, RedFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingBufferGeometry, RingGeometry, Scene, SceneUtils, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, SmoothShading, Sphere, SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SphericalReflectionMapping, Spline, SplineCurve, SplineCurve3, SpotLight, SpotLightHelper, SpotLightShadow, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StereoCamera, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronBufferGeometry, TetrahedronGeometry, TextBufferGeometry, TextGeometry, Texture, TextureLoader, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeBufferGeometry, TubeGeometry, UVMapping, Uint16Attribute, Uint16BufferAttribute, Uint32Attribute, Uint32BufferAttribute, Uint8Attribute, Uint8BufferAttribute, Uint8ClampedAttribute, Uint8ClampedBufferAttribute, Uncharted2ToneMapping, Uniform, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, Vertex, VertexColors, VertexNormalsHelper, VideoTexture, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderTargetCube, WebGLRenderer, WebGLUtils, WireframeGeometry, WireframeHelper, WrapAroundEnding, XHRLoader, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, sRGBEncoding };\n","/*!\n * VERSION: 1.20.5\n * DATE: 2018-05-21\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n **/\nimport TweenLite, { _gsScope, TweenPlugin, Ease, Power0, Power1, Power2, Power3, Power4, Linear } from \"./TweenLite\";\nimport TimelineLite from \"./TimelineLite\";\nimport TimelineMax from \"./TimelineMax\";\nimport TweenMax from \"./TweenMax\";\nimport CSSPlugin from \"./CSSPlugin\";\nimport AttrPlugin from \"./AttrPlugin\";\nimport RoundPropsPlugin from \"./RoundPropsPlugin\";\nimport DirectionalRotationPlugin from \"./DirectionalRotationPlugin\";\nimport BezierPlugin from \"./BezierPlugin\";\nimport { Back, Elastic, Bounce, RoughEase, SlowMo, SteppedEase, Circ, Expo, Sine, ExpoScaleEase } from \"./EasePack\";\n\n\nexport { TweenMax as default };\nexport { TweenLite, TweenMax, TimelineLite, TimelineMax, CSSPlugin, AttrPlugin, BezierPlugin, RoundPropsPlugin, DirectionalRotationPlugin, TweenPlugin, Ease, Power0, Power1, Power2, Power3, Power4, Linear, Back, Elastic, Bounce, RoughEase, SlowMo, SteppedEase, Circ, Expo, Sine, ExpoScaleEase, _gsScope };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*!\n * VERSION: 1.20.5\n * DATE: 2018-05-21\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n\n/* ES6 changes:\n\t- declare and export _gsScope at top.\n\t- set const TweenLite = the result of the main function\n\t- export default TweenLite at the bottom\n\t- return TweenLite at the bottom of the main function\n\t- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)\n\t- remove the \"export to multiple environments\" in Definition().\n */\nexport const _gsScope = (typeof(window) !== \"undefined\") ? window : (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this;\n\nexport const TweenLite = (function(window, moduleName) {\n\n\t\t\"use strict\";\n\t\tvar _exports = {},\n\t\t\t_doc = window.document,\n\t\t\t_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\t\tif (_globals.TweenLite) {\n\t\t\treturn _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.\n\t\t}\n\t\tvar _namespace = function(ns) {\n\t\t\t\tvar a = ns.split(\".\"),\n\t\t\t\t\tp = _globals, i;\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\t\t\tgs = _namespace(\"com.greensock\"),\n\t\t\t_tinyNum = 0.0000000001,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_emptyFunc = function() {},\n\t\t\t_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\t\t\tvar toString = Object.prototype.toString,\n\t\t\t\t\tarray = toString.call([]);\n\t\t\t\treturn function(obj) {\n\t\t\t\t\treturn obj != null && (obj instanceof Array || (typeof(obj) === \"object\" && !!obj.push && toString.call(obj) === array));\n\t\t\t\t};\n\t\t\t}()),\n\t\t\ta, i, p, _ticker, _tickerActive,\n\t\t\t_defLookup = {},\n\n\t\t\t/**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */\n\t\t\tDefinition = function(ns, dependencies, func, global) {\n\t\t\t\tthis.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses\n\t\t\t\t_defLookup[ns] = this;\n\t\t\t\tthis.gsClass = null;\n\t\t\t\tthis.func = func;\n\t\t\t\tvar _classes = [];\n\t\t\t\tthis.check = function(init) {\n\t\t\t\t\tvar i = dependencies.length,\n\t\t\t\t\t\tmissing = i,\n\t\t\t\t\t\tcur, a, n, cl;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\t\t\tmissing--;\n\t\t\t\t\t\t} else if (init) {\n\t\t\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (missing === 0 && func) {\n\t\t\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\t\t\tn = a.pop();\n\t\t\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t\t\t//exports to multiple environments\n\t\t\t\t\t\tif (global) {\n\t\t\t\t\t\t\t_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\t\t\t\t\t\t\tif (ns === moduleName) {\n\t\t\t\t\t\t\t\t\tmodule.exports = _exports[moduleName] = cl;\n\t\t\t\t\t\t\t\t\tfor (i in _exports) {\n\t\t\t\t\t\t\t\t\t\tcl[i] = _exports[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_exports[moduleName]) {\n\t\t\t\t\t\t\t\t\t_exports[moduleName][n] = cl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (typeof(define) === \"function\" && define.amd){ //AMD\n\t\t\t\t\t\t\t\tdefine((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.check(true);\n\t\t\t},\n\n\t\t\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t\t\t_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {\n\t\t\t\treturn new Definition(ns, dependencies, func, global);\n\t\t\t},\n\n\t\t\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t\t\t_class = gs._class = function(ns, func, global) {\n\t\t\t\tfunc = func || function() {};\n\t\t\t\t_gsDefine(ns, [], function(){ return func; }, global);\n\t\t\t\treturn func;\n\t\t\t};\n\n\t\t_gsDefine.globals = _globals;\n\n\n\n/*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */\n\t\tvar _baseParams = [0, 0, 1, 1],\n\t\t\tEase = _class(\"easing.Ease\", function(func, extraParams, type, power) {\n\t\t\t\tthis._func = func;\n\t\t\t\tthis._type = type || 0;\n\t\t\t\tthis._power = power || 0;\n\t\t\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t\t\t}, true),\n\t\t\t_easeMap = Ease.map = {},\n\t\t\t_easeReg = Ease.register = function(ease, names, types, create) {\n\t\t\t\tvar na = names.split(\",\"),\n\t\t\t\t\ti = na.length,\n\t\t\t\t\tta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t\t\t\te, name, j, type;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tname = na[i];\n\t\t\t\t\te = create ? _class(\"easing.\"+name, null, true) : gs.easing[name] || {};\n\t\t\t\t\tj = ta.length;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\ttype = ta[j];\n\t\t\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tp = Ease.prototype;\n\t\tp._calcEnd = false;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._func) {\n\t\t\t\tthis._params[0] = p;\n\t\t\t\treturn this._func.apply(null, this._params);\n\t\t\t}\n\t\t\tvar t = this._type,\n\t\t\t\tpw = this._power,\n\t\t\t\tr = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\t\t\tif (pw === 1) {\n\t\t\t\tr *= r;\n\t\t\t} else if (pw === 2) {\n\t\t\t\tr *= r * r;\n\t\t\t} else if (pw === 3) {\n\t\t\t\tr *= r * r * r;\n\t\t\t} else if (pw === 4) {\n\t\t\t\tr *= r * r * r * r;\n\t\t\t}\n\t\t\treturn (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t};\n\n\t\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\t\ta = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];\n\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\tp = a[i]+\",Power\"+i;\n\t\t\t_easeReg(new Ease(null,null,1,i), p, \"easeOut\", true);\n\t\t\t_easeReg(new Ease(null,null,2,i), p, \"easeIn\" + ((i === 0) ? \",easeNone\" : \"\"));\n\t\t\t_easeReg(new Ease(null,null,3,i), p, \"easeInOut\");\n\t\t}\n\t\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */\n\t\tvar EventDispatcher = _class(\"events.EventDispatcher\", function(target) {\n\t\t\tthis._listeners = {};\n\t\t\tthis._eventTarget = target || this;\n\t\t});\n\t\tp = EventDispatcher.prototype;\n\n\t\tp.addEventListener = function(type, callback, scope, useParam, priority) {\n\t\t\tpriority = priority || 0;\n\t\t\tvar list = this._listeners[type],\n\t\t\t\tindex = 0,\n\t\t\t\tlistener, i;\n\t\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (list == null) {\n\t\t\t\tthis._listeners[type] = list = [];\n\t\t\t}\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\t\tindex = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});\n\t\t};\n\n\t\tp.removeEventListener = function(type, callback) {\n\t\t\tvar list = this._listeners[type], i;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.dispatchEvent = function(type) {\n\t\t\tvar list = this._listeners[type],\n\t\t\t\ti, t, listener;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\tif (i > 1) {\n\t\t\t\t\tlist = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n\t\t\t\t}\n\t\t\t\tt = this._eventTarget;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlistener = list[i];\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t, {type:type, target:t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */\n \t\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t\t\t_cancelAnimFrame = window.cancelAnimationFrame,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_lastUpdate = _getTime();\n\n\t\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\t\ta = [\"ms\",\"moz\",\"webkit\",\"o\"];\n\t\ti = a.length;\n\t\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t\t}\n\n\t\t_class(\"Ticker\", function(fps, useRAF) {\n\t\t\tvar _self = this,\n\t\t\t\t_startTime = _getTime(),\n\t\t\t\t_useRAF = (useRAF !== false && _reqAnimFrame) ? \"auto\" : false,\n\t\t\t\t_lagThreshold = 500,\n\t\t\t\t_adjustedLag = 33,\n\t\t\t\t_tickWord = \"tick\", //helps reduce gc burden\n\t\t\t\t_fps, _req, _id, _gap, _nextTime,\n\t\t\t\t_tick = function(manual) {\n\t\t\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t\t\t\toverlap, dispatch;\n\t\t\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t\t\t}\n\t\t\t\t\t_lastUpdate += elapsed;\n\t\t\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\t\t\toverlap = _self.time - _nextTime;\n\t\t\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t\t\t_self.frame++;\n\t\t\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (manual !== true) { //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t\t\t_id = _req(_tick);\n\t\t\t\t\t}\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tEventDispatcher.call(_self);\n\t\t\t_self.time = _self.frame = 0;\n\t\t\t_self.tick = function() {\n\t\t\t\t_tick(true);\n\t\t\t};\n\n\t\t\t_self.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t\tif (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n\t\t\t\t\treturn (_lagThreshold < 1 / _tinyNum);\n\t\t\t\t}\n\t\t\t\t_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited\n\t\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t\t};\n\n\t\t\t_self.sleep = function() {\n\t\t\t\tif (_id == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\t\tclearTimeout(_id);\n\t\t\t\t} else {\n\t\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t\t}\n\t\t\t\t_req = _emptyFunc;\n\t\t\t\t_id = null;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.wake = function(seamless) {\n\t\t\t\tif (_id !== null) {\n\t\t\t\t\t_self.sleep();\n\t\t\t\t} else if (seamless) {\n\t\t\t\t\t_startTime += -_lastUpdate + (_lastUpdate = _getTime());\n\t\t\t\t} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t\t}\n\t\t\t\t_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = true;\n\t\t\t\t}\n\t\t\t\t_tick(2);\n\t\t\t};\n\n\t\t\t_self.fps = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _fps;\n\t\t\t\t}\n\t\t\t\t_fps = value;\n\t\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t\t_nextTime = this.time + _gap;\n\t\t\t\t_self.wake();\n\t\t\t};\n\n\t\t\t_self.useRAF = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _useRAF;\n\t\t\t\t}\n\t\t\t\t_self.sleep();\n\t\t\t\t_useRAF = value;\n\t\t\t\t_self.fps(_fps);\n\t\t\t};\n\t\t\t_self.fps(fps);\n\n\t\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (_useRAF === \"auto\" && _self.frame < 5 && (_doc || {}).visibilityState !== \"hidden\") {\n\t\t\t\t\t_self.useRAF(false);\n\t\t\t\t}\n\t\t\t}, 1500);\n\t\t});\n\n\t\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\t\tp.constructor = gs.Ticker;\n\n\n/*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */\n\t\tvar Animation = _class(\"core.Animation\", function(duration, vars) {\n\t\t\t\tthis.vars = vars = vars || {};\n\t\t\t\tthis._duration = this._totalDuration = duration || 0;\n\t\t\t\tthis._delay = Number(vars.delay) || 0;\n\t\t\t\tthis._timeScale = 1;\n\t\t\t\tthis._active = (vars.immediateRender === true);\n\t\t\t\tthis.data = vars.data;\n\t\t\t\tthis._reversed = (vars.reversed === true);\n\n\t\t\t\tif (!_rootTimeline) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\n\t\t\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\t\t\ttl.add(this, tl._time);\n\n\t\t\t\tif (this.vars.paused) {\n\t\t\t\t\tthis.paused(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t_ticker = Animation.ticker = new gs.Ticker();\n\t\tp = Animation.prototype;\n\t\tp._dirty = p._gc = p._initted = p._paused = false;\n\t\tp._totalTime = p._time = 0;\n\t\tp._rawPrevTime = -1;\n\t\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\t\tp._paused = false;\n\n\n\t\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\t\tvar _checkTimeout = function() {\n\t\t\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== \"hidden\" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\tvar t = setTimeout(_checkTimeout, 2000);\n\t\t\t\tif (t.unref) {\n\t\t\t\t\t// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n\t\t\t\t\tt.unref();\n\t\t\t\t}\n\t\t\t};\n\t\t_checkTimeout();\n\n\n\t\tp.play = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(false).paused(false);\n\t\t};\n\n\t\tp.pause = function(atTime, suppressEvents) {\n\t\t\tif (atTime != null) {\n\t\t\t\tthis.seek(atTime, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.resume = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(false);\n\t\t};\n\n\t\tp.seek = function(time, suppressEvents) {\n\t\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t\t};\n\n\t\tp.restart = function(includeDelay, suppressEvents) {\n\t\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);\n\t\t};\n\n\t\tp.reverse = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek((from || this.totalDuration()), suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(true).paused(false);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\t//stub - we override this method in subclasses.\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\tthis._initted = this._gc = false;\n\t\t\tthis._rawPrevTime = -1;\n\t\t\tif (this._gc || !this.timeline) {\n\t\t\t\tthis._enabled(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.isActive = function() {\n\t\t\tvar tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\n\t\t\t\tstartTime = this._startTime,\n\t\t\t\trawTime;\n\t\t\treturn (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tthis._gc = !enabled;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (ignoreTimeline !== true) {\n\t\t\t\tif (enabled && !this.timeline) {\n\t\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n\t\tp._kill = function(vars, target) {\n\t\t\treturn this._enabled(false, false);\n\t\t};\n\n\t\tp.kill = function(vars, target) {\n\t\t\tthis._kill(vars, target);\n\t\t\treturn this;\n\t\t};\n\n\t\tp._uncache = function(includeSelf) {\n\t\t\tvar tween = includeSelf ? this : this.timeline;\n\t\t\twhile (tween) {\n\t\t\t\ttween._dirty = true;\n\t\t\t\ttween = tween.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._swapSelfInParams = function(params) {\n\t\t\tvar i = params.length,\n\t\t\t\tcopy = params.concat();\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\t\tcopy[i] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t\tp._callback = function(type) {\n\t\t\tvar v = this.vars,\n\t\t\t\tcallback = v[type],\n\t\t\t\tparams = v[type + \"Params\"],\n\t\t\t\tscope = v[type + \"Scope\"] || v.callbackScope || this,\n\t\t\t\tl = params ? params.length : 0;\n\t\t\tswitch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t\t\t\tcase 0: callback.call(scope); break;\n\t\t\t\tcase 1: callback.call(scope, params[0]); break;\n\t\t\t\tcase 2: callback.call(scope, params[0], params[1]); break;\n\t\t\t\tdefault: callback.apply(scope, params);\n\t\t\t}\n\t\t};\n\n//----Animation getters/setters --------------------------------------------------------\n\n\t\tp.eventCallback = function(type, callback, params, scope) {\n\t\t\tif ((type || \"\").substr(0,2) === \"on\") {\n\t\t\t\tvar v = this.vars;\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\treturn v[type];\n\t\t\t\t}\n\t\t\t\tif (callback == null) {\n\t\t\t\t\tdelete v[type];\n\t\t\t\t} else {\n\t\t\t\t\tv[type] = callback;\n\t\t\t\t\tv[type + \"Params\"] = (_isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1) ? this._swapSelfInParams(params) : params;\n\t\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t\t}\n\t\t\t\tif (type === \"onUpdate\") {\n\t\t\t\t\tthis._onUpdate = callback;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.delay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._delay;\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tthis.startTime( this._startTime + value - this._delay );\n\t\t\t}\n\t\t\tthis._delay = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tthis._dirty = false;\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tthis._duration = this._totalDuration = value;\n\t\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tthis._dirty = false;\n\t\t\treturn (!arguments.length) ? this._totalDuration : this.duration(value);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\treturn this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._totalTime;\n\t\t\t}\n\t\t\tif (this._timeline) {\n\t\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\t\ttime += this.totalDuration();\n\t\t\t\t}\n\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\tif (this._dirty) {\n\t\t\t\t\t\tthis.totalDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t\t\ttl = this._timeline;\n\t\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\t\ttime = totalDuration;\n\t\t\t\t\t}\n\t\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);\n\t\t\t\t\tif (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\t\tthis._uncache(false);\n\t\t\t\t\t}\n\t\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\t\tif (tl._timeline) {\n\t\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t}\n\t\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.progress = p.totalProgress = function(value, suppressEvents) {\n\t\t\tvar duration = this.duration();\n\t\t\treturn (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);\n\t\t};\n\n\t\tp.startTime = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._startTime;\n\t\t\t}\n\t\t\tif (value !== this._startTime) {\n\t\t\t\tthis._startTime = value;\n\t\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.endTime = function(includeRepeats) {\n\t\t\treturn this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;\n\t\t};\n\n\t\tp.timeScale = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._timeScale;\n\t\t\t}\n\t\t\tvar pauseTime, t;\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\t\tpauseTime = this._pauseTime;\n\t\t\t\tt = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();\n\t\t\t\tthis._startTime = t - ((t - this._startTime) * this._timeScale / value);\n\t\t\t}\n\t\t\tthis._timeScale = value;\n\t\t\tt = this.timeline;\n\t\t\twhile (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n\t\t\t\tt._dirty = true;\n\t\t\t\tt.totalDuration();\n\t\t\t\tt = t.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.reversed = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._reversed;\n\t\t\t}\n\t\t\tif (value != this._reversed) {\n\t\t\t\tthis._reversed = value;\n\t\t\t\tthis.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._paused;\n\t\t\t}\n\t\t\tvar tl = this._timeline,\n\t\t\t\traw, elapsed;\n\t\t\tif (value != this._paused) if (tl) {\n\t\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\traw = tl.rawTime();\n\t\t\t\telapsed = raw - this._pauseTime;\n\t\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\t\tthis._startTime += elapsed;\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\t\tthis._paused = value;\n\t\t\t\tthis._active = this.isActive();\n\t\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\t\tthis.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc && !value) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */\n\t\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function(vars) {\n\t\t\tAnimation.call(this, 0, vars);\n\t\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t\t});\n\n\t\tp = SimpleTimeline.prototype = new Animation();\n\t\tp.constructor = SimpleTimeline;\n\t\tp.kill()._gc = false;\n\t\tp._first = p._last = p._recent = null;\n\t\tp._sortChildren = false;\n\n\t\tp.add = p.insert = function(child, position, align, stagger) {\n\t\t\tvar prevTween, st;\n\t\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\t\tif (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\t\tchild._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);\n\t\t\t}\n\t\t\tif (child.timeline) {\n\t\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t\t}\n\t\t\tchild.timeline = child._timeline = this;\n\t\t\tif (child._gc) {\n\t\t\t\tchild._enabled(true, true);\n\t\t\t}\n\t\t\tprevTween = this._last;\n\t\t\tif (this._sortChildren) {\n\t\t\t\tst = child._startTime;\n\t\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\t\tprevTween = prevTween._prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevTween) {\n\t\t\t\tchild._next = prevTween._next;\n\t\t\t\tprevTween._next = child;\n\t\t\t} else {\n\t\t\t\tchild._next = this._first;\n\t\t\t\tthis._first = child;\n\t\t\t}\n\t\t\tif (child._next) {\n\t\t\t\tchild._next._prev = child;\n\t\t\t} else {\n\t\t\t\tthis._last = child;\n\t\t\t}\n\t\t\tchild._prev = prevTween;\n\t\t\tthis._recent = child;\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tif (tween.timeline === this) {\n\t\t\t\tif (!skipDisable) {\n\t\t\t\t\ttween._enabled(false, true);\n\t\t\t\t}\n\n\t\t\t\tif (tween._prev) {\n\t\t\t\t\ttween._prev._next = tween._next;\n\t\t\t\t} else if (this._first === tween) {\n\t\t\t\t\tthis._first = tween._next;\n\t\t\t\t}\n\t\t\t\tif (tween._next) {\n\t\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t\t} else if (this._last === tween) {\n\t\t\t\t\tthis._last = tween._prev;\n\t\t\t\t}\n\t\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\t\tif (tween === this._recent) {\n\t\t\t\t\tthis._recent = this._last;\n\t\t\t\t}\n\n\t\t\t\tif (this._timeline) {\n\t\t\t\t\tthis._uncache(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar tween = this._first,\n\t\t\t\tnext;\n\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\tif (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t};\n\n\t\tp.rawTime = function() {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\treturn this._totalTime;\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */\n\t\tvar TweenLite = _class(\"TweenLite\", function(target, duration, vars) {\n\t\t\t\tAnimation.call(this, duration, vars);\n\t\t\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\t\t\tif (target == null) {\n\t\t\t\t\tthrow \"Cannot tween a null target.\";\n\t\t\t\t}\n\n\t\t\t\tthis.target = target = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\n\t\t\t\tvar isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),\n\t\t\t\t\toverwrite = this.vars.overwrite,\n\t\t\t\t\ti, targ, targets;\n\n\t\t\t\tthis._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === \"number\") ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\t\t\tif ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== \"number\") {\n\t\t\t\t\tthis._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\t\tthis._propLookup = [];\n\t\t\t\t\tthis._siblings = [];\n\t\t\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\t\t\ttarg = targets[i];\n\t\t\t\t\t\tif (!targ) {\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\t\t\tif (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\t\ttargets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._propLookup = {};\n\t\t\t\t\tthis._siblings = _register(target, this, false);\n\t\t\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {\n\t\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative\n\t\t\t\t}\n\t\t\t}, true),\n\t\t\t_isSelector = function(v) {\n\t\t\t\treturn (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t\t\t},\n\t\t\t_autoCSS = function(vars, target) {\n\t\t\t\tvar css = {},\n\t\t\t\t\tp;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\t\t\tcss[p] = vars[p];\n\t\t\t\t\t\tdelete vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvars.css = css;\n\t\t\t};\n\n\t\tp = TweenLite.prototype = new Animation();\n\t\tp.constructor = TweenLite;\n\t\tp.kill()._gc = false;\n\n//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\t\tp.ratio = 0;\n\t\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\t\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\t\tTweenLite.version = \"1.20.5\";\n\t\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\t\tTweenLite.defaultOverwrite = \"auto\";\n\t\tTweenLite.ticker = _ticker;\n\t\tTweenLite.autoSleep = 120;\n\t\tTweenLite.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t\t};\n\n\t\tTweenLite.selector = window.$ || window.jQuery || function(e) {\n\t\t\tvar selector = window.$ || window.jQuery;\n\t\t\tif (selector) {\n\t\t\t\tTweenLite.selector = selector;\n\t\t\t\treturn selector(e);\n\t\t\t}\n\t\t\tif (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.\n\t\t\t\t_doc = window.document;\n\t\t\t}\n\t\t\treturn (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === \"#\") ? e.substr(1) : e));\n\t\t};\n\n\t\tvar _lazyTweens = [],\n\t\t\t_lazyLookup = {},\n\t\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_relExp = /[\\+-]=-?[\\.\\d]/,\n\t\t\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t\t\t_setRatio = function(v) {\n\t\t\t\tvar pt = this._firstPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join(\"\") : this.start;\n\t\t\t\t\tif (pt.m) {\n\t\t\t\t\t\tval = pt.m.call(this._tween, val, this._target || pt.t, this._tween);\n\t\t\t\t\t} else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.f) {\n\t\t\t\t\t\tpt.t[pt.p] = val;\n\t\t\t\t\t} else if (pt.fp) {\n\t\t\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p](val);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t\t\t_blobDif = function(start, end, filter, pt) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\ts = \"\",\n\t\t\t\t\tcolor = 0,\n\t\t\t\t\tstartNums, endNums, num, i, l, nonNumbers, currentNum;\n\t\t\t\ta.start = start;\n\t\t\t\ta.end = end;\n\t\t\t\tstart = a[0] = start + \"\"; //ensure values are strings\n\t\t\t\tend = a[1] = end + \"\";\n\t\t\t\tif (filter) {\n\t\t\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\t\t\tstart = a[0];\n\t\t\t\t\tend = a[1];\n\t\t\t\t}\n\t\t\t\ta.length = 0;\n\t\t\t\tstartNums = start.match(_numbersExp) || [];\n\t\t\t\tendNums = end.match(_numbersExp) || [];\n\t\t\t\tif (pt) {\n\t\t\t\t\tpt._next = null;\n\t\t\t\t\tpt.blob = 1;\n\t\t\t\t\ta._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t\t\t}\n\t\t\t\tl = endNums.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tcurrentNum = endNums[i];\n\t\t\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);\n\t\t\t\t\ts += (nonNumbers || !i) ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\t\t\tcharIndex += nonNumbers.length;\n\t\t\t\t\tif (color) { //sense rgba() values and round them.\n\t\t\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\t\t\tcolor = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\t\t\ts += currentNum;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\ta.push(s);\n\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\t\t\ta.push(num);\n\t\t\t\t\t\ta._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === \"=\") ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};\n\t\t\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += currentNum.length;\n\t\t\t\t}\n\t\t\t\ts += end.substr(charIndex);\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t}\n\t\t\t\ta.setRatio = _setRatio;\n\t\t\t\tif (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\t\t\t\t\ta.end = null;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t\t\t_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\tend = end(index || 0, target);\n\t\t\t\t}\n\t\t\t\tvar type = typeof(target[prop]),\n\t\t\t\t\tgetterName = (type !== \"function\") ? \"\" : ((prop.indexOf(\"set\") || typeof(target[\"get\" + prop.substr(3)]) !== \"function\") ? prop : \"get\" + prop.substr(3)),\n\t\t\t\t\ts = (start !== \"get\") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n\t\t\t\t\tisRelative = (typeof(end) === \"string\" && end.charAt(1) === \"=\"),\n\t\t\t\t\tpt = {t:target, p:prop, s:s, f:(type === \"function\"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === \"function\") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},\n\t\t\t\t\tblob;\n\n\t\t\t\tif (typeof(s) !== \"number\" || (typeof(end) !== \"number\" && !isRelative)) {\n\t\t\t\t\tif (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === \"boolean\" || typeof(end) === \"boolean\") {\n\t\t\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\t\t\tpt.fp = funcParam;\n\t\t\t\t\t\tblob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + \"\").replace(/[0-9\\-\\.]/g, \"\") : end), stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\t\t\tpt = {t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.s = parseFloat(s);\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\tpt.c = (parseFloat(end) - pt.s) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pt.c) { //only add it to the linked list if there's a change.\n\t\t\t\t\tif ((pt._next = this._firstPT)) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t\t\t_plugins = TweenLite._plugins = {},\n\t\t\t_tweenLookup = _internals.tweenLookup = {},\n\t\t\t_tweenLookupNum = 0,\n\t\t\t_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1},\n\t\t\t_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, \"true\":1, \"false\":0},\n\t\t\t_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t\t\t_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t\t\t_nextGCFrame = 30,\n\t\t\t_lazyRender = _internals.lazyRender = function() {\n\t\t\t\tvar i = _lazyTweens.length,\n\t\t\t\t\ttween;\n\t\t\t\t_lazyLookup = {};\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ttween = _lazyTweens[i];\n\t\t\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\t\t\ttween._lazy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_lazyTweens.length = 0;\n\t\t\t};\n\n\t\t_rootTimeline._startTime = _ticker.time;\n\t\t_rootFramesTimeline._startTime = _ticker.frame;\n\t\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\t\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\t\tAnimation._updateRoot = TweenLite.render = function() {\n\t\t\t\tvar i, a, p;\n\t\t\t\tif (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tif (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\t\t\tfor (p in _tweenLookup) {\n\t\t\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\t\t\ti = a.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.length === 0) {\n\t\t\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\t\t\tp = _rootTimeline._first;\n\t\t\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\t\t\tp = p._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p) {\n\t\t\t\t\t\t\t_ticker.sleep();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\t\tvar _register = function(target, tween, scrub) {\n\t\t\t\tvar id = target._gsTweenID, a, i;\n\t\t\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + (_tweenLookupNum++))]) {\n\t\t\t\t\t_tweenLookup[id] = {target:target, tweens:[]};\n\t\t\t\t}\n\t\t\t\tif (tween) {\n\t\t\t\t\ta = _tweenLookup[id].tweens;\n\t\t\t\t\ta[(i = a.length)] = tween;\n\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn _tweenLookup[id].tweens;\n\t\t\t},\n\t\t\t_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {\n\t\t\t\tvar func = overwrittenTween.vars.onOverwrite, r1, r2;\n\t\t\t\tif (func) {\n\t\t\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\tfunc = TweenLite.onOverwrite;\n\t\t\t\tif (func) {\n\t\t\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\treturn (r1 !== false && r2 !== false);\n\t\t\t},\n\t\t\t_applyOverwrite = function(target, tween, props, mode, siblings) {\n\t\t\t\tvar i, changed, curTween, l;\n\t\t\t\tif (mode === 1 || mode >= 4) {\n\t\t\t\t\tl = siblings.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\t\t\t\t//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\t\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t\t\t\toverlaps = [],\n\t\t\t\t\toCount = 0,\n\t\t\t\t\tzeroDur = (tween._duration === 0),\n\t\t\t\t\tglobalStart;\n\t\t\t\ti = siblings.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t\t\t//ignore\n\t\t\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {\n\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = oCount;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tcurTween = overlaps[i];\n\t\t\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (mode !== 2 || (!curTween._firstPT && curTween._initted)) {\n\t\t\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn changed;\n\t\t\t},\n\t\t\t_checkOverlap = function(tween, reference, zeroDur) {\n\t\t\t\tvar tl = tween._timeline,\n\t\t\t\t\tts = tl._timeScale,\n\t\t\t\t\tt = tween._startTime;\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tt += tl._startTime;\n\t\t\t\t\tts *= tl._timeScale;\n\t\t\t\t\tif (tl._paused) {\n\t\t\t\t\t\treturn -100;\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t\tt /= ts;\n\t\t\t\treturn (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;\n\t\t\t};\n\n\n//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\t\tp._init = function() {\n\t\t\tvar v = this.vars,\n\t\t\t\top = this._overwrittenProps,\n\t\t\t\tdur = this._duration,\n\t\t\t\timmediate = !!v.immediateRender,\n\t\t\t\tease = v.ease,\n\t\t\t\ti, initPlugins, pt, p, startVars, l;\n\t\t\tif (v.startAt) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t}\n\t\t\t\tstartVars = {};\n\t\t\t\tfor (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t\t}\n\t\t\t\tstartVars.data = \"isStart\";\n\t\t\t\tstartVars.overwrite = false;\n\t\t\t\tstartVars.immediateRender = true;\n\t\t\t\tstartVars.lazy = (immediate && v.lazy !== false);\n\t\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\t\tstartVars.onUpdate = v.onUpdate;\n\t\t\t\tstartVars.onUpdateParams = v.onUpdateParams;\n\t\t\t\tstartVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n\t\t\t\tthis._startAt = TweenLite.to(this.target || {}, 0, startVars);\n\t\t\t\tif (immediate) {\n\t\t\t\t\tif (this._time > 0) {\n\t\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true);\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t\tthis._startAt = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\t\timmediate = false;\n\t\t\t\t\t}\n\t\t\t\t\tpt = {};\n\t\t\t\t\tfor (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt.overwrite = 0;\n\t\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\t\tpt.lazy = (immediate && v.lazy !== false);\n\t\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\t\tif (!immediate) {\n\t\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === \"function\") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t\t}\n\t\t\tthis._easeType = this._ease._type;\n\t\t\tthis._easePower = this._ease._power;\n\t\t\tthis._firstPT = null;\n\n\t\t\tif (this._targets) {\n\t\t\t\tl = this._targets.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tif ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n\t\t\t}\n\n\t\t\tif (initPlugins) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t\t}\n\t\t\tif (op) if (!this._firstPT) if (typeof(this.target) !== \"function\") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\t\tthis._enabled(false, false);\n\t\t\t}\n\t\t\tif (v.runBackwards) {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tpt.s += pt.c;\n\t\t\t\t\tpt.c = -pt.c;\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onUpdate = v.onUpdate;\n\t\t\tthis._initted = true;\n\t\t};\n\n\t\tp._initProps = function(target, propLookup, siblings, overwrittenProps, index) {\n\t\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\t\tif (target == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t\t}\n\n\t\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t\t_autoCSS(this.vars, target);\n\t\t\t}\n\t\t\tfor (p in this.vars) {\n\t\t\t\tv = this.vars[p];\n\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\tif (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n\t\t\t\t\t//t - target \t\t[object]\n\t\t\t\t\t//p - property \t\t[string]\n\t\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t\t//c - change\t\t[number]\n\t\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\t\t//m - mod           [function | 0]\n\t\t\t\t\tthis._firstPT = pt = {_next:this._firstPT, t:plugin, p:\"setRatio\", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};\n\t\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter, index);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\t\tthis._kill(propLookup, target);\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.\n\t\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t\t}\n\t\t\treturn initPlugins;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar prevTime = this._time,\n\t\t\t\tduration = this._duration,\n\t\t\t\tprevRawPrevTime = this._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, rawPrevTime;\n\t\t\tif (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tthis._totalTime = this._time = duration;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n\t\t\t\tif (!this._reversed ) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = 0;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === \"isPause\")) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._totalTime = this._time = time;\n\n\t\t\t\tif (this._easeType) {\n\t\t\t\t\tvar r = time / duration, type = this._easeType, pow = this._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\tthis.ratio = 1 - r;\n\t\t\t\t\t} else if (type === 2) {\n\t\t\t\t\t\tthis.ratio = r;\n\t\t\t\t\t} else if (time / duration < 0.5) {\n\t\t\t\t\t\tthis.ratio = r / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.ratio = 1 - (r / 2);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._time === prevTime && !force) {\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._init();\n\t\t\t\tif (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {\n\t\t\t\t\tthis._time = this._totalTime = prevTime;\n\t\t\t\t\tthis._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\t_lazyTweens.push(this);\n\t\t\t\t\tthis._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (this._time && !isComplete) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t\t} else if (isComplete && this._ease._calcEnd) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\t\tthis._lazy = false;\n\t\t\t}\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n\t\t\t\tthis._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTime === 0) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tthis._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * this.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * this.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (this._onUpdate) {\n\t\t\t\tif (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (this._time !== prevTime || isComplete || force) {\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tthis._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(vars, target, overwritingTween) {\n\t\t\tif (vars === \"all\") {\n\t\t\t\tvars = null;\n\t\t\t}\n\t\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\t\tthis._lazy = false;\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\ttarget = (typeof(target) !== \"string\") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;\n\t\t\tvar simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),\n\t\t\t\ti, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._targets) {\n\t\t\t\t\ti = this._targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (target !== this.target) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t\t}\n\n\t\t\t\tif (propLookup) {\n\t\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\t\trecord = (vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof(vars) !== \"object\" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif ((pt = propLookup[p])) {\n\t\t\t\t\t\t\tif (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (record) {\n\t\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t\t}\n\t\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\t\tthis._propLookup = (this._targets) ? {} : [];\n\t\t\tAnimation.prototype.invalidate.call(this);\n\t\t\tif (this.vars.immediateRender) {\n\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative.\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (enabled && this._gc) {\n\t\t\t\tvar targets = this._targets,\n\t\t\t\t\ti;\n\t\t\t\tif (targets) {\n\t\t\t\t\ti = targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\t\treturn TweenLite._onPluginEvent((enabled ? \"_onEnable\" : \"_onDisable\"), this);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n//----TweenLite static methods -----------------------------------------------------\n\n\t\tTweenLite.to = function(target, duration, vars) {\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, toVars);\n\t\t};\n\n\t\tTweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenLite.set = function(target, vars) {\n\t\t\treturn new TweenLite(target, 0, vars);\n\t\t};\n\n\t\tTweenLite.getTweensOf = function(target, onlyActive) {\n\t\t\tif (target == null) { return []; }\n\t\t\ttarget = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\t\t\tvar i, a, j, t;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\ta = [];\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t\t}\n\t\t\t\ti = a.length;\n\t\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tt = a[i];\n\t\t\t\t\tj = i;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target._gsTweenID) {\n\t\t\t\ta = _register(target).concat();\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc || (onlyActive && !a[i].isActive())) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a || [];\n\t\t};\n\n\t\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {\n\t\t\tif (typeof(onlyActive) === \"object\") {\n\t\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\t\tonlyActive = false;\n\t\t\t}\n\t\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i]._kill(vars, target);\n\t\t\t}\n\t\t};\n\n\n\n/*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */\n\t\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function(props, priority) {\n\t\t\t\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\t\t\t\tthis._propName = this._overwriteProps[0];\n\t\t\t\t\tthis._priority = priority || 0;\n\t\t\t\t\tthis._super = TweenPlugin.prototype;\n\t\t\t\t}, true);\n\n\t\tp = TweenPlugin.prototype;\n\t\tTweenPlugin.version = \"1.19.0\";\n\t\tTweenPlugin.API = 2;\n\t\tp._firstPT = null;\n\t\tp._addTween = _addPropTween;\n\t\tp.setRatio = _setRatio;\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._overwriteProps,\n\t\t\t\tpt = this._firstPT,\n\t\t\t\ti;\n\t\t\tif (lookup[this._propName] != null) {\n\t\t\t\tthis._overwriteProps = [];\n\t\t\t} else {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\tpt._prev = null;\n\t\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._mod = p._roundProps = function(lookup) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tval;\n\t\t\twhile (pt) {\n\t\t\t\tval = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + \"_\").join(\"\") ]);\n\t\t\t\tif (val && typeof(val) === \"function\") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\t\tif (pt.f === 2) {\n\t\t\t\t\t\tpt.t._applyPT.m = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.m = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\tTweenLite._onPluginEvent = function(type, tween) {\n\t\t\tvar pt = tween._firstPT,\n\t\t\t\tchanged, pt2, first, last, next;\n\t\t\tif (type === \"_onInitAllProps\") {\n\t\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tpt = tween._firstPT = first;\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.pg) if (typeof(pt.t[type]) === \"function\") if (pt.t[type]()) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tTweenPlugin.activate = function(plugins) {\n\t\t\tvar i = plugins.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t\t_plugins[(new plugins[i]())._propName] = plugins[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t\t_gsDefine.plugin = function(config) {\n\t\t\tif (!config || !config.propName || !config.init || !config.API) { throw \"illegal plugin definition.\"; }\n\t\t\tvar propName = config.propName,\n\t\t\t\tpriority = config.priority || 0,\n\t\t\t\toverwriteProps = config.overwriteProps,\n\t\t\t\tmap = {init:\"_onInitTween\", set:\"setRatio\", kill:\"_kill\", round:\"_mod\", mod:\"_mod\", initAll:\"_onInitAllProps\"},\n\t\t\t\tPlugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\t\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t\t\t\t}, (config.global === true)),\n\t\t\t\tp = Plugin.prototype = new TweenPlugin(propName),\n\t\t\t\tprop;\n\t\t\tp.constructor = Plugin;\n\t\t\tPlugin.API = config.API;\n\t\t\tfor (prop in map) {\n\t\t\t\tif (typeof(config[prop]) === \"function\") {\n\t\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.version = config.version;\n\t\t\tTweenPlugin.activate([Plugin]);\n\t\t\treturn Plugin;\n\t\t};\n\n\n\t\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\t\ta = window._gsQueue;\n\t\tif (a) {\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\ta[i]();\n\t\t\t}\n\t\t\tfor (p in _defLookup) {\n\t\t\t\tif (!_defLookup[p].func) {\n\t\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n\t\treturn TweenLite;\n\n})(_gsScope, \"TweenLite\");\n\nconst gs = _gsScope.com.greensock;\nexport { TweenLite as default };\nexport const SimpleTimeline = gs.core.SimpleTimeline;\nexport const Animation = gs.core.Animation;\nexport const {Ease, Linear, Power0, Power1, Power2, Power3, Power4, TweenPlugin} = _gsScope;\nexport const EventDispatcher = gs.events.EventDispatcher;\n"],"sourceRoot":""}